<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.heavyweight">
<title>Heavyweight markup languages</title>
<p>I am using the term “heavyweight” here as an obvious contrast to the commonly used “lightweight”, even though the term “heavyweight” is not used commonly. Nonetheless, it fits. Both the abstract language <phrase>XML</phrase> and the concrete languages like <phrase>DocBook</phrase> and <phrase>DITA</phrase> are heavyweights in the sense that they have a lot of capability that comes at the expense of a large footprint.</p>
<p>Having said that, I should make the distinction between the heavyweight syntax of XML and the heavyweight semantics of a <phrase>DITA</phrase> or <phrase>DocBook</phrase>. It would certainly be possible to create the semantics of DITA or DocBook in a more lightweight syntax. And it is certainly possible to create very simple markup languages (with semantics much more lightweight than something like reStructuredtext, for instance) using XML. Despite this, there is a definite connection between heavyweight syntax and heavyweight semantics, perhaps because the more heavyweight languages have more need of the capabilities of a fully abstract syntax of XML and the processing tools that go with it.</p>
<p>I’m going to briefly survey some of the heavyweight languages. One thing to note about heavyweight languages is that they often contain structures from more than one domain, though their core is usually in the document domain. But they typically contain some <phrase>media domain</phrase> structures for things like tables that are hard to abstract from the <phrase>media domain</phrase> in a generic way. They typically contain some subject domain structures, typically related to technology, since many heavyweight languages originated for documenting technical products. Finally, most contain some management domain structures, particularly for things like conditional text.</p>
<p>If the point of structured writing is improve the quality of content through the application of constraints, why is the structured writing landscape dominated by a few very large and quite loosely constrained markup languages?</p>
<p>Partly because, as I pointed out at the beginning, all writing is structured and when someone says they are moving to structured writing, what they mean is that they are adding a more structure to their writing than they had before. DocBook may not be a highly constrained language, but it is lot more constrained than <phrase>Microsoft Word</phrase> or <phrase>InDesign</phrase> and somewhat more constrained than <phrase>FrameMaker</phrase>.</p>
<p>Partly because a lot of the adoption of structured writing it not motivated primarily by content quality but by a desire to improve content management, particularly content reuse. While it is possible to do these things without resorting to structured writing for a format, structured writing format ease the integration of the various parts. They also ease fears about having your content locked into the system of a single vendor.</p>
<p>Partly it is because constraints are onerous if you don’t get them right, and the benefits of getting them right are often under-appreciated, especially in content management applications where the consequences of a lack of constraints tends to show up years down the road (and is all to easy to blame on human failure rather than poor system design).</p>
<p>For all these reasons, it is worthwhile to look at where the big public languages fit in the structured writing picture.</p>
<p>For large systems like DocBook, DITA, and S1000D, there is not nearly enough space in this book to do them full justice or to fully characterize them in terms of the structured writing domains and algorithms described in this book. This chapter is therefore not to be taken as a buyers guide. Rather, this book as a whole is an attempt to provide an framework for think and talking about structured writing that will allow you to understand your requirements independently of any system, and then to evaluate, compare, and contrast systems in more or less neutral terms.</p>
<section>
<title>DITA</title>
<p>There are two ways of looking at DITA. You can look at it as a complete structured writing system which can be used more or less out of the box. (Even packaged applications like Word of FrameMaker are not used completely out of the box for serious content creation: some customization of styles and output format is needed at least, and the same is true of DITA.)</p>
<p>Alternatively, you can look at as what it’s name proclaims it to be: an information typing architecture. The acronym DITA stand for Darwin Information Typing Architecture, with the word “Darwin” representing DITA’s approach to the <phrase>extensibility</phrase> of markup: <phrase>specialization</phrase>.</p>
<p>With out-of-the-box DITA, you get a fixed set of topic types provided by the DITA specification and implemented in the DITA Open Toolkit and other tools. With DITA as an information typing architecture, you get the capability to create a unbounded number of information types. I will discuss DITA as an information typing architecture in <citation type="nameref" value="chapter.extensible"/>. Here I will look at out-of-the-box DITA.</p>
<p>Out-of-the-box DITA comes in three forms (three different boxes, if you will).</p>
<ol>
<li>
<p>The DITA Open Toolkit. You and download the DITA Open Toolkit for free and use it to produce content. The <phrase>formatting</phrase> stylesheets that come with the toolkit are very basic, so you will likely want to do some customization of the output as a minimum.</p>
</li>
<li>
<p>Packaged DITA tools. There are a variety of tools that package DITA. Most of these are essentially content management systems of one degree of sophistication or another. These may add additional capabilities over what is supplied by the DITA Open Toolkit and may hide the underlying DITA structures to one extent or another. I don’t intend to say anything about any of these tools here.</p>
</li>
<li>
<p>Customized DITA systems. You may be handed a customized system created by a consultant or vendor, generally built using one of the available DITA CMS platforms. This may have been extended to provide new topic types, new output formats, or new management facilities. These could work in almost any way and it may not even be obvious that DITA has been used in their construction. Obviously there is not much that we can say about them here.</p>
</li>
</ol>
<p>The key features of out-of-the-box DITA that will determine how well its fits with your needs are its topic model and its focus on the <phrase>reuse algorithm</phrase>. The description of the <phrase>document-domain</phrase>/<phrase>management-domain</phrase> approach in <citation type="nameref" value="chapter.reuse"/> is based on the DITA model, which provides comprehensive support in those domains.</p>
<p>The DITA topic model is based on the concept of information typing, which is the idea that information can be usefully broken down into different abstract types, and that there is value in clearly separating the different types. One of the problems with this theory, and consequently with the application of DITA’s topic model, is that it is not clear how big an information type is. Specializing DITA may allows you to be more specific on this point, but if you are using out-of-the-box DITA you are probably using the basic concept, task, and reference topic types (though out-of-the-box DITA now includes a number of other topic types such as Machine industry task and Troubleshooting).</p>
<p>The principal thing that sets out-of-the-box DITA apart from other approaches to structured writing is its map and topic architecture. In most other systems, the unit that the writer writes and the unit that the reader reads are the same. For very long works, there may be a mechanism for breaking up and assembling pieces. For instance, in DocBook, you can write a book using a <phrase><annotation type="code">book</annotation></phrase> document type in which you can include various <phrase><annotation type="code">chapter</annotation></phrase> document types to create a complete book out of multiple files.</p>
<p>But DITA generalizes this model. In a DocBook book document, there is a lot of book content in addition to the included chapters. Indeed, you could write the entire book in one file if you wanted to. The content model of a <phrase>DocBook</phrase> document is described by a single schema and the content model of the chapters is simply part of the content model of the book. In other words, a DocBook book is a single document structure that just happens to be made up of individual files. A DocBook map file, on the other hand, is an independent structure. It does not create a single logical document structure. It does not contain any actual content, and you can’t write an entire book in a single map file. Instead, a map file is an instruction to a publishing tool chain about how to assemble a larger work out of component pieces.</p>
<p>This distinction is very important. In the DocBook model, there is a continuity of constraint between the book and its chapters. In DITA, the constraints on the map and the constraints on the topics in the map, are completely separate. This means that in DITA, the topic is the largest unit of content to which constraints can be applied (at least in the conventional way).</p>
<p>This has some useful properties. It means that the model of a map is universal. You don’t need to create a new top-level model to create a new kind of top-level information set. A map can model any information set, or at least any information set that is structured hierarchically and built by specifying members by name.</p>
<p>Maps are structured like tree so they can construct hierarchies an arbitrary number of layers deep. This means you have a choice about what parts of your structure you create using a map and what part you create inside a topic. If you have a list of four items, each of which needs two or three paragraphs of description, do you create one topic with the list of four items in it or do you create one topic for each item and then tie them together using a map? This is particularly important when we remember that the topic is the largest using of content constraint in DITA. If we break the content down to this fine a level, we lose the ability to apply constraints to it.</p>
<p>This presents something of a dilemma. We have already talked about <phrase><citation type="nameref" value="chapter.blocks">structure writing as dividing content into blocks and made a distinction between semantic blocks and narrative blocks.</citation></phrase> In the design of a markup language, narrative blocks are made up of semantic blocks which may be made up of smaller semantic blocks. This works fine for developing the structure of a narrative block, which is the work that will be presented whole to the reader. In that scenario, the unit that the writer writes is the narrative block. The semantic blocks are just elements of the model.</p>
<p>But things become more difficult when you attempt to do fine-grained reuse of content. Then you may want to write individual semantic blocks and combine them to produce narrative blocks. DITA will let you do this one of two ways. The first (which is frequently discouraged) is to nest one topic inside another. The second is to combine topics using a map, with the map representing the narrative block. However, DITA does not provide a high-level way to constrain the structure of a narrative block that is built this way.</p>
<p>If you want a constrained narrative block, you have to model it as a single DITA topic type. You can certainly do this by specializing from the base <phrase><annotation type="code">topic</annotation></phrase> topic type, but in doing so you will probably move away from the “information typing” idea of keeping different types of information separate, as a full narrative topic often requires different types of information (as in the recipe example we have used so frequently).</p>
<p>This leads to some confusion about whether a DITA topic is a <phrase>semantic block</phrase> or a <phrase>narrative block</phrase>. For people who use out-of-the-box DITA this can be a problem because the default Web presentation of DITA places each topic on a separate page, which is not an appropriate presentation if your DITA topics are not <phrase>narrative blocks</phrase>. To get your narrative block to appear on a single page, you need to use a procedure called chunking, which is not as straightforward as it should be. (Chunking is one of the things on the agenda to be fixed in DITA 2.0.<citation type="citation" value="http://docs.oasis-open.org/dita/dita-1.3-why-three-editions/v1.0/cn01/dita-1.3-why-three-editions-v1.0-cn01.html#future-of-dita"/>)</p>
<p>The idea that topics are reusable is a very attractive one. But it is important to think through exactly what the reusable unit of content is. It is one thing to reuse <phrase>narrative blocks</phrase> whole (perhaps with some variations in the text). It is quite a different thing to reuse <phrase>semantic blocks</phrase> below the level of the <phrase>narrative block</phrase>, particularly if it is important to you to constrain the <phrase>narrative block</phrase> or to apply any of the other structured writing algorithms at the level of the <phrase>narrative block</phrase>.</p>
<p>From a quality point of view, as well, the quality of content can suffer significantly if content is written in reusable units that are not properly assembled into <phrase>narrative blocks</phrase> for <phrase>presentation</phrase>. And if <phrase>narrative blocks</phrase> are being assembled out of smaller reusable units without proper attention to the narrative integrity or completeness and consistency of the result, quality suffers as well. If the author no longer sees, thinks, or works in the context of the <phrase>narrative block</phrase>, and if the structure of the <phrase>narrative block</phrase> is not constrained, content quality is very difficult to maintain.</p>
<p>DITA, as a technology, does not prevent you from working in whole <phrase>narrative blocks</phrase>, or from constraining your blocks in any way you want (using its information typing capabilities). But the block and map model (whether implemented by DITA or any other system) presents this inherent tension between creating smaller <phrase>semantic blocks</phrase> to optimize for reuse vs creating constrainable <phrase>narrative blocks</phrase> to optimize for content quality.</p>
<p>A related note here is that in a reuse scenario, you motives for constraining the semantic block may be different from your motives for constraining the narrative block. The reasons for constraining the semantic block might be to adhere to the theory of information typing, or to enhance the <phrase>composability</phrase> of the reusable blocks. The reasons for constraining the <phrase>narrative block</phrase> might be to ensure the quality or consistency of the information presented to the user.</p>
<p>But merely doing reuse of content blocks does not require either kind of constraint. The constraints may improve quality and reliability of the system if used correctly and consistently, but the actual act of composing larger blocks out of smaller blocks does not require them. This has led many organization to use DITA for its reuse capabilities without paying any particular attention to its constraint capabilities or its information typing roots. People taking this approach will sometime write their content in the base <phrase><annotation type="code">topic</annotation></phrase> topic type rather than a more constrained specialization.</p>
<p>The growing popularity of this approach to reuse has led to the development of alternatives to DITA that provide the same reuse-management capabilities but remove the constraint mechanisms. One example of this trend is <phrase><annotation type="tool">Paligo</annotation></phrase>, a reuse-focused component content management system that uses <phrase>DocBook</phrase> as its underlying content format, specifically for the purpose of minimizing constraints on the content.<citation type="citation" value="http://idratherbewriting.com/2016/08/01/paligo-the-story-xml-ccms-in-the-cloud/"/>. Such systems can reduce the up-front complexity of component-based <phrase>content-reuse</phrase>, though possibly at the expense of costs down the road due the failure to apply constraints up front.</p>
<p>DITA’s sweet spot, therefore, would appear to be <phrase>content reuse</phrase> scenarios in which you want to place constraints on the reusable content units that follow the “information typing” model, but can live without placing constraints on the narrative blocks that are built from those units.</p>
<p>Note, though, that this analysis is only focused on DITA as a tool for structured writing. DITA is also a tool for <phrase>content management</phrase> and it role in making content management systems work effectively has to be evaluated separately. And, as pointed out above, DITA provides a high-level tool for information typing which can be used for things outside this sweet spot, and potentially having noting to do with its <phrase>reuse</phrase> features. How broad this range of applicability is depends largely on where the sweet spots of other tools lie. Your needs may not coincide perfectly with the sweet spot of any one tool. At that point, the right choice is the one that can be adapted for your needs at the least cost. That calculation is outside the scope of this book. I will try to point out where costs lie in each alternative, but quantifying them for individual situations is an exercise left to the reader.</p>
<p>Large generalized systems like DITA tend to create document types that are a mix of multiple domains. At its core, DITA is an information typing system based in the document domain. It creates various topic types by <phrase><annotation type="concept">specialization</annotation></phrase> of a core generic document domain “topic” type. (I’ll describe specialization in a moment.)</p>
<p>Like other generalized languages that originated in the technical communication space, DITA also includes some subject domain structures, most for describing computer interfaces. These are generally small scale structures, often at the level of annotation in running text, such as annotations for references to parts of a windowed screen display.</p>
<p>One of the key focuses of DITA is content reuse. It would not be far off the mark to describe DITA as a system for reusing content as the decision to use it is almost always justified on this basis. As such, DITA contains a lot of management domain structures, including all of the management domain structures for <phrase><annotation type="algorithm">content reuse</annotation></phrase> and <phrase><annotation type="concept">linking</annotation></phrase> that I described earlier. The description of the document/management domain approaches to reuse and linking were based almost entirely on the way DITA does these things.</p>
</section>
<section>
<title>DocBook</title>
<p><phrase>DocBook</phrase> is an extensive, largely document domain language with a long history and an extensive body of processing tools and support. As we have noted, <phrase>DocBook</phrase> is not a tightly constrained language. Instead it is focused on providing very broad capability for describing document structures.</p>
<p>Unlike <phrase>DITA</phrase>, <phrase>DocBook</phrase> does not ascribe to any information typing theory. It does not have an opinion about how content should be written or organized. It is very much about the structure of books, and leave it to the author to decide what the <phrase>rhetorical structure</phrase> of the text should be. In other words, DocBook makes no attempt to constrain the rhetorical structure of a work, and in fact makes every attempt to avoid constraining it.</p>
<p>The result, however, is an extremely complex system that can be quite challenging to learn and use. Because of this, writers often use simplified subsets of DocBook. (Where DITA is sometimes customized by the addition of elements, DocBook is sometimes customized by their subtraction.) However, DocBook remains popular with many for its lack of constraint combined with its rich feature set.</p>
<p>Because of its lack of constraint, <phrase>DocBook</phrase> is not a particularly great fit with the idea of structured writing as a means improve content quality through the application of constraints. However, it can play a very useful role in a structured writing tools chain as a language for the <phrase>presentation algorithm</phrase>. This is exactly how it is used in the production of this book. The book is written in SAM is a small, constrained language developed just for the purpose, which is then transformed by the presentation algorithm into DocBook, which then feeds the publisher’s standard publishing tools.  The DocBook created by this method matches the publisher’s exact specifications as required to make the tools work correctly.</p>
<p>This is a more reliable process than if I had written the book in DocBook directly. I wrote my previous book in DocBook (an experience that contributed to my decision to develop SAM) but it took a lot of revision to get the DocBook I wrote into the form that the publication process required. In other words, the publishing process has a set of constraints that are not enforced by DocBook itself, and have to be imposed by human oversight and editing when an author writes in DocBook. But in my highly constrained SAM-based markup language, all those constraints were factored out, which enabled me to translate it reliably into the DocBook that the publisher needed.</p>
</section>
<section>
<title>S1000D</title>
<p><phrase>S1000D</phrase> is a specification developed in the aviation and defense industries specifically for the complex documentation tasks of those industries, and intended to support the development of the Interactive Electronic Technical Manuals (IETMs) that are typically required in that space. While it obviously has a fair amount of <phrase>subject domain</phrase> structures for the target domains, it also has media domain structures targeted at the production of IETMs and extensive management domain structures designed to support the common source database (CSDB), the content management architecture which is part of the S1000D specification. S1000D, in other words, is much more than a structured writing format. It is a specification for a complete document production system for a specific industrial sector.</p>
</section>
<section>
<title>HTML</title>
<p>HTML is widely used as an authoring format for content. For the most part this is a pure <phrase>media domain</phrase> usage: people writing for the web in its native format, often using a WYSIWYG HTML editor.</p>
<p>But HTML is still a document domain language, and efforts have been made over the years to factor out the media domain aspects of the languages and leave the formatting the CSS sytlesheets. This makes HTML a legitimate <phrase>document domain</phrase> markup language. In particular, people interested in using HTML this way often use XHTML, the version of HTML that is a valid instance of XML. Being an instance of XML is important because it means you can write XHTML in an XML editor and process it with XML processing tools. This means that you can potentially publish content written in XHTML by processing it into other formats or by modifying its structure for use in different HTML-based media such as the Web and ebooks.</p>
</section>
</chapter>
