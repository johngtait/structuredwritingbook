<?xml version="1.0" encoding="UTF-8"?>
<chapter>
<title>Change management</title>
<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">hybrid tagging language</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">DITA</annotation></phrase> <phrase><annotation type="language">DocBook</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">HTML</annotation></phrase> <phrase><annotation type="language">XML</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm">conformance algorithm</annotation></phrase> <phrase><annotation type="algorithm">conformance</annotation></phrase> <phrase><annotation type="algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract and merge algorithm</annotation></phrase> <phrase><annotation type="algorithm">extract and merge</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance algorithm</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">Content management systems</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase></p>
</annotations>
<p>Some people talk about future proofing content as a reason for adopting structured writing. This is a misnomer. Structured writing imposes specific structures on content for specific purposes. It does not make content magically immune to change nor does it guarantee you will not have to rewrite the content or change the structure to accommodate future changes in your subject matter or your business requirements.</p>
<p>You can, however, design your content structures to help you manage specific and foreseeable changes. If you are lucky, the structures you create may also allow you to adapt content for unforeseen circumstances, particularly if your content is stored in the <phrase><annotation type="concept">subject domain</annotation></phrase>. But this is a bonus. You cannot guarantee any content or structure will work for things you have not foreseen.</p>
<p>But changes in content happen all the time. Many of them are entirely predictable and you can use structured writing to support the management of those changes. For instance, companies re-brand from time to time. If the content is in media domain structures, the effort to change to a new appearance could be significant. If the content is in the document domain, however, changing how it is formatted is simply a matter of changing the <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> to produce different-looking output.</p>
<p>It is worth noting, though, that while changing the formatting algorithm is less work than changing the formatting of a large body of content, it is also more complex work. It requires a skill set that is not as widely available as the skill of changing fonts in a word processor, for instance. It also cannot be done incrementally. Once the entire new algorithm is written, all the content can be converted to the new look almost instantly. But until it is finished, none of the content can be converted. A structured writing system is not the kind of thing you can set up once and walk away from. You need to maintain an ongoing capability for making these kinds of changes efficiently and effectively.</p>
<p>A general move to the <phrase><annotation type="concept">document domain</annotation></phrase> (or the <phrase><annotation type="concept">subject domain</annotation></phrase>, or even a disciplined use of styles in a word processor) will allow you to handle font and layout changes. But what if the re-branding goes further? Suppose it involves changing the names of products or even the company. Should your structured writing approach explicitly support that change? Some organization like to mandate that writers insert a variable rather than the actual name for the company name and all product names. That way, when a product name or the company names changes all you have to do is redefine the variables.</p>
<p>I have always been skeptical of the value of this practice, however. It forces the writers to remember to use the variable every time. This interrupts their chain of thought, which slows their writing down and uses up some of their precious attention, thus impacting content quality. And it is virtually impossible to to ensure compliance. Writers will sometimes simply forget and write the names out normally, which means you always have to search for these instances anyway when a change happens. Then there are issues with historical usage of the names, where you don’t want the change to happen, and with inflections if the new or old names end in ‘s’ (in English; other languages may have different inflection problems).</p>
<p>Company and product names are distinct strings that are easy to search for when you need to make a change. The overhead of creating and maintaining the variables is greater than the overhead of doing a search and replace through the content when a change occurs. And doing a search and replace allows you to make intelligent choices about historical usage, inflections, and even changes in line breaks. It your content is held in text form (in a markup language) in a repository (file system or <phrase><annotation type="tool">content management system</annotation></phrase>) that allows you to do a search and replace across multiple files, this is probably easier and more reliable than using variables. (And it is what you are going to have to do anyway if there is a name change that you did not anticipate and therefore did not use variables for.)</p>
<p>You may well need some markup for company and product names, however. You may want to format them differently or link from them to more information about the product or company.</p>
<p>Rather than use a variable like this:</p>
<codeblock language="sam">
We here at &gt;($company-name) do not recommend using our product to catch roadrunners. 
</codeblock>
<p>I would rather use an annotation like this:</p>
<codeblock language="sam">
We here at {Acme Corporation}(company) do not recommend using our product to catch roadrunners.
</codeblock>
<p>This second approach identifies the words Acme Corporation as a company name. Creating this markup requires no extra thought from the writer. They do not have to remember what the appropriate variable name is. (They do have to remember <phrase><annotation type="code">company</annotation></phrase> as an annotation type, but that is a type, not an individual name, and if your markup is well designed your types should be few and memorable.) And this same markup can be used to format the company name appropriately and to generate links to information on the company.</p>
<p>This does not guarantee that the writer will always remember to add the annotation, or that they will always spell the company name correctly. (There is no way to guarantee that a free-floating annotation will always be remembered. The best you can do is make them easy to do.) But you can use the <phrase><annotation type="code">company</annotation></phrase> annotation to find all the phrases marked as company names, sort them, and look for variants. This then allows you to go back and fix incorrect spellings. But it also allows you to identify the ways in which writers are misspelling the company names and search the whole text for those misspellings. This improves your success rate catching both misspellings and the failure to annotate. This kind of content hygiene operation should be performed regularly on any content set, and subject domain annotation makes it easier to do while removing a distraction for writers.</p>
<p>At another level, re-branding can involve the organization deciding to change its tone or voice. It may wish to go from professional and reserved to friendly and jocular. There is no way, of course, for any structured writing process to recast content from formal to funny. You can’t make you content proof against every kind of change.</p>
<p>One form of change that is so common that it may be overlooked is simply the ongoing creation of new content and the editing of old content. In the age of the Web, this is a particular concern because we can now add a new piece of content whenever it is ready, edit and existing piece whenever it needs it, and delete an old piece whenever it becomes obsolete. We don’t have to wait for a major publication release for all these changes to roll out. Each rolls out when it is ready. And each time one rolls out, it impacts the <phrase><annotation type="concept">information architecture</annotation></phrase> or the entire content set.</p>
<p>Adding, editing, or deleting one topic does not mean that all the other topics are unaffected:</p>
<ul>
<li>
<p>There may be topics that link to the deleted topic.</p>
</li>
<li>
<p>There may be topics that should link to the newly added topic.</p>
</li>
<li>
<p>There may be topics that should no longer link to a changed topic, and topics that should now start linking to it.</p>
</li>
<li>
<p>Topics in a category may now have a new neighbor or may have lost one.</p>
</li>
<li>
<p>Any <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> navigation tools need to be updated for the topic changes.</p>
</li>
<li>
<p>Deleted topics may leave holes in the information set that need to be filled.</p>
</li>
<li>
<p>New topics or edited topics may introduce subjects that are not adequately covered by existing topics, revealing the need for yet more topics.</p>
</li>
<li>
<p>Deleted or edited topics may leave other topics orphaned, needing to be removed or edited to serve a current purpose.</p>
</li>
<li>
<p>Events in the world can change the status of a whole set of topics, for instance, those relating to the current version of a product suddenly become “previous version” when a new topic is released.</p>
</li>
</ul>
<p>When there is the potential for the effects of adding, editing, or deleting a topic to have ripple effects through the whole content set, and when such additions, deletions, and edits happen on a daily basis, it is vital to have algorithmic support for change management. Managing all the effects by hand is doomed to failure.</p>
<p><phrase><annotation type="tool">Content management systems</annotation></phrase> often have change management features that can be helpful. For instance, many of them will inform you if a change of deletion of an existing topics will break any existing links. They will also help you find topics on related subjects or manage the membership of categories and the navigation aids that are based on them. What they won’t do is tell you things like which pieces of existing content should be linking to the new content you just added.</p>
<p>For change management algorithms to be effective, you need to be able to rely on them. If you end up feeling that you have to go through and check all the content or all the output by hand, you will have lost much of the efficiency you sought. Change management, therefore, relies heavily on the <phrase><annotation type="algorithm">conformance algorithm</annotation></phrase>. ...</p>
</chapter>
