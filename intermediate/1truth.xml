<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.1truth">
<title>Single source of truth</title>
<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">hybrid tagging language</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">DITA</annotation></phrase> <phrase><annotation type="language">DocBook</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">HTML</annotation></phrase> <phrase><annotation type="language">XML</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm">conformance algorithm</annotation></phrase> <phrase><annotation type="algorithm">conformance</annotation></phrase> <phrase><annotation type="algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract and merge algorithm</annotation></phrase> <phrase><annotation type="algorithm">extract and merge</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance algorithm</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">Content management systems</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase></p>
</annotations>
<index>
<title>type, term</title>
<p>concept, single source of truth concept, single sourcing</p>
</index>
<p>A significant source of complexity in any content organization is simply determining if a piece of content already exists or not. This problem obviously affects any attempt at content reuse, since every time you consciously reuse content you have to determine if reusable content exists. The longer it takes to determine if a piece of content already exists, the longer, and therefore more expensive, each content reuse question becomes. (And bear in mind that the cost of determining if reusable content exists is incurred every time the writer looks for it, but any saving associated with reuse are realized only when the answer is yes.)</p>
<p>Even if reuse is not a major part of your process, however, determining if content already exists is still important, as it helps you avoid recreating content you already have, and all of the complexity that goes with maintaining two copies of the same thing.</p>
<p>Creating a formal system for ensuring that content only exists once is called establishing a single source of truth. This means that when a piece of information is needed anywhere in your organization (or the subset of your organization that you are able to manage), there is one and only one place where that information is stored and from which it should be accessed.</p>
<p>You can do content reuse without the assurance that there is only one source of truth on a subject, and organizations frequently do. The task of finding some content that meets your needs and can be reused is very different from the task of assuring that there is only one piece of content in existence that can meet a specific need. Finding content to reuse is a task for the writer of the content doing the reusing. Ensuring that there is only one source for that content is a task for the writer of the content being reused. They have to make sure when they create and store some piece of content that there really is no other piece of content serving the same purpose in the entire body of content.</p>
<p>There is a clear partitioning of responsibility here. Single source of truth partitions the problem of ensuring that only one copy of something exists from the problem of finding content that can be reused. Unfortunately, maintaining a single source of truth is a more difficult task than simply doing ad hoc reuse. Many attempts at creating a reuse system founder because people focus on establishing ad hoc reuse capability without giving any thought to assuring that there is only one source of truth. That neglected complexity always ends up going somewhere, and it tends to accumulate in the system until it brings it to a halt.</p>
<p>The problem with the single source of truth algorithm is, as Pontius Pilate asked, “What is truth?”<citation type="citation" value="John 18:38"/></p>
<p>For some types of content, this is an easy question to answer. What is the customer’s birthday? A person can only have one birthday, so there is no difficulty creating a clear policy that says that a customer’s birthday may only be recorded once across the organization and should be accessed from that single source whenever it is needed.<citation type="idref" value="1"/></p>
<footnote id="1">
<p>Stating the policy is straightforward; implementing and enforcing it may be more difficult, since it means every system or document that wants to include the customer’s birthday has to be capable of retrieving it dynamically from the central data story.</p>
</footnote>
<p>The set of constraints that defines a piece of information as unique are not universal. The definition of what constitutes unique for different pieces of information is complex and specific to the subject matter at hand. Take a recipe for guacamole, for instance. Is guacamole a single dish for which there can only be one recipe? Clearly not. There are may different ways in which you can prepare guacamole, some differing only slightly from one another and some presenting welcome variations that different people might like to try. Clearly a recipe site would not want eight essentially identical guacamole recipes, but nor would they want to pick one variation to the exclusion of all others. So then the question becomes, how do you decide when a recipe text is an effective duplicate of another text and when the subject is a welcome variation on how to prepare guacamole. If you decide the variation is welcome, how do you differentiate it from other guacamole recipes in your collection?</p>
<p>Clearly the answers to these questions are not universal. The way you decide these questions for recipes are not the same way you decide them for API reference topics, used car reviews, or conceptual discussions of ideas. Whatever constraint you decide upon, the business processes and systems that ensure that these constraints are followed are not universal, but specific to each function and organization.</p>
<p>Content, by its nature, deals with those subject that do not fit neatly into rows and columns, and thus cannot be formally normalized according to database rules. Where databases describe relationships formally by use of records and keys, content describes relationships informally in prose. In particular, content deals with complex, unique, and potentially ambiguous relationships that could not be reduced to rows and tables at any reasonable cost. The same fact may be mentioned in many different pieces of content for many different purposes. It may be elaborated on in one place, explained briefly in another, and merely mentioned in a third. What is the single source of this fact? Can it be effectively factored out and stored separately when it is described (legitimately) in different levels of detail in different documents?</p>
<p>Content is always designed for a particular audience, both to serve a particular need and to suit a particular background and level of knowledge. Everything we know about effective content tells us that we need to address different audiences and different tasks differently. Taking a piece of content designed for one audience and using it for all other audiences, or attempting to write generic content that takes no account of any audience’s needs or tasks is certain to produce content that is significantly less effective. What then is the single source of truth for this information?</p>
<p>It comes down to this: there is a difference between a truth and an expression of a truth. You can have one source of a truth, but you often require different expressions of that truth for different purposes and different people. If you reduce the number of expressions of the truth in the name of creating a single source of truth, that is really just dumping complexity on the reader again.</p>
<p>In the database world, you can store the customer’s birthday in a single field of a single database, but you will produce may different expressions of this truth for use by different functions in your organization and for presentation to this or other customers in different forms.</p>
<p>The way we achieve the storage of a single source of a truth is by abstracting it out of all of the expressions of that truth. Abstracting variants from invariants is, of course, what <phrase><annotation type="concept">structured writing</annotation></phrase> is about.</p>
<p>A simple case of the single source of truth algorithm is the replacement of certain pieces of text by variables. In technical communication, it is a frequent practice to replace things like company names and product names by variables:</p>
<codeblock language="sam">
Thank you for buying &gt;($company-name)'s &gt;($product-name). 
We hope you enjoy it for many years to come.
</codeblock>
<p>There are a couple of reasons for doing this. One is that company names and product names often have a precise formal variant that the marketing department wants everyone to use, and one or more informal variants that people actually use. There is constraint here: use the formal name for company and product not the common name. But because authors are more used to using the common name (like everyone else) they are likely to slip it in without thinking. And if they do remember that they are supposed to use the formal name, they may not remember it correctly and so use the wrong form. Using the variable instead ensures that the correct version of the name is used at all times.</p>
<p>The second reason is that products and companies are sometimes re-branded. The names change. If the names are written into the source in a hundred places, you will need to find those hundred instances and change them all. If a variable is used, you just need to change the definition of the variable and you don’t have to touch the source content at all.</p>
<p>This is clearly a very tactical approach to creating a single source of truth. We have a single source of truth for the name of the company and the name of the product. We don’t have a single source of truth for every name. We don’t for example, have a variable for the name of every ingredient in a recipe:</p>
<codeblock language="sam">
ingredients:: ingredient, quantity, measure
    &gt;($carrots), &gt;($5), &gt;($lb)
</codeblock>
<p>We don’t do this because there is no abstraction here. Carrots are carrots, 5 is 5, and pounds are pounds.</p>
<p>When we talk about single source of truth in regard to content, therefore, we are not (or should not be) talking about designating a single piece of content as the sole truth on a particular subject. We are (or should be) talking about abstracting out key information from various pieces of content to store separately.</p>
<section>
<title>Single vs Findable</title>
<p>In many cases, the desire to create a single source of truth is to manage change in a content set. Since facts may be scattered across a content set in all kinds of content designed for all kinds of purposes for all kinds of audiences, it can be time consuming and expensive to find and change all of these instances when the subject matter changes. The biggest challenge, perhaps, is making sure that you have found all the instances in which the fact is mentioned, which can be particularly challenging when information is scattered across multiple formats and systems. We will look at managing change in more depth in <citation type="nameref" value="chapter.change"/>.</p>
<p>Factoring out that information into a single source of truth should, in theory, make the whole update process much easier. Lots of organization use variables to insert product names into documents, for instance, so that they can just update the value of the variable when the product name changes. However, there are a number of problems with this approach:</p>
<ll>
<li>
<label>Historical usage</label>
<p>Sometimes there is historical usage in a document: a reference to past products or services that remain true after the contemporary changes are made. Not every instance of a product name, for instance, should change when the current product name changes. But it is often hard to make the distinction between historical and contemporary use at the time the variable is inserted into the content.</p>
</li>
<li>
<label>Validation</label>
<p>It is hard to make sure that the variable is always used by writers. There is generally no way to structurally remind or constrain the author to use the variable instead of the name. Automated checking systems can sometimes catch instances, but they can be confused by historical usage or by other facts that happen to be expressed with the same words. (Think of a company like Henry’s Camera, for instance, who cannot guarantee that every use of “Henry’s” is a reference to the company name.)</p>
</li>
<li>
<label>Anticipating change</label>
<p>Finally, there is the problem of which facts to factor out and which not to. Factoring out every fact would be prohibitively expensive and make authoring virtually impossible. You can only afford to factor out those facts are are likely to change. But none of us has a crystal ball, and some of the biggest changes we have to deal with often come from places we did not expect.</p>
</li>
</ll>
<p>For all these reasons, factoring out facts into a single source of truth is a limited proposition. It can be highly useful if we apply it in the right way to the right facts, but it can be cumbersome and error prone is we try to take it too far. Thus we are certainly going to end up with all sorts of duplication of facts and names in our content. And from time to time those facts are going to change and we are going to have to find all the instances and make the appropriate changes.</p>
<p>If we structure our content in a way that makes that search easier, we can potentially save ourselves a large about of time and money. Making expressions of a truth more findable has many of the same benefits as creating a single source of truth and can be less expensive, easier to implement, and more resilient in the face of unanticipated changes.</p>
<p>This is all about the ability to recognize information in context, and the ability to recognize non-canonical references to facts (a person or thing referred to by a nick name, for instance, like calling John Wayne “The Duke” or IMB “Big Blue”). Having your content in the subject domain make this much easier. Second best is having your content in the document or media domains but stored in a content management system with a cataloging scheme based in the subject domain.</p>
<!-- Two basic problems: the same truth referred to using different terms, and different truths referred to using the same term. In the latter case, context can tell us much. -->
<!-- Need for strict typing. If only source, got to make sure it does the whole job correctly. -->
<!-- Can use differential single sourcing to produce variants. -->
</section>
</chapter>
