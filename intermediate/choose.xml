<?xml version="1.0" encoding="UTF-8"?>
<chapter>
<title>Choosing</title>
<p>Content creation, particularly content creation at scale and in a dynamic environment is not simple. Structured writing can deliver many benefits in terms of both quality and efficiency, but it cannot magically make the whole process simple. It can, as we have seen, change where the complexity is seen and must be dealt with. It can push complexity out to authors to keep the publishing process simple, or it can push complexity into the publishing process to help make the authoring process simpler. But it cannot drive complexity out of the system altogether. Thus the task of choosing a structured writing approach is complex.</p>
<p>The very fact the structured writing has the ability to move the complexity around the system, imposing it on one role at the expense of another, makes the task of choosing a structured writing approach all the more complex. For instance, there has been a long history of IT departments choosing content management system on the basis that they were easy for the IT department to install and administer, only to have them be deeply unpopular because the pushed complexity out to authors and other users. On the other hand, some groups of authors want to write in uber-simple formats like Markdown, despite the difficulties that its limited structure and capabilities create for an overall publishing process.</p>
<p>The right mix and distribution of complexity and simplicity is likely to be different from one organization to another, even if all parties have a good understanding of where complexity lies and how it can be distributed or minimized. It is beyond the scope of this book to walk you through this decision making process. I hope that what this book has contributed to that process is an understanding of what structured writing is capable of bringing to an organization, and a tool-neutral language for talking about it.</p>
<p>I do want to say one thing about the decision making process, though. It is important to decide up front if you are going to have a tool-driven decision process or a process driven by algorithms you want to use.</p>
<p>Of course, your decision making process should ultimately be driven by business requirements. But even a process driven by business requirements tend to be heavily influences by what we think the available tools are capable of. We don’t tend to write requirements for systems unless we have an idea that there are systems out there that are capable of meeting those requirements.</p>
<p>Over the years I have seen many requirements documents for proposed structured writing systems that essentially said that the proposed system must work exactly like Microsoft Word. This is not surprising when the people writing the requirements have used nothing but Word to create content for years. The tools you know shape how you work and what you think of as possible. As Henry Ford is supposed to have said of the Model T, “If I asked customers what they wanted, they would have said faster horses.” Even when we are dissatisfied with our current tools, we tend to want the same basic tool only more so. Faster horses. This is why so many structured writing tool vendors literally advertise that their editor looks and feels “just like Microsoft Word”. (Not to mention those vendors who create tools that modify Word itself.)</p>
<p>But Microsoft Word is a tools that sits on the boundary between the Media and Document domains. Using Word itself, or something that looks like Word, is usually an attempt to move its use slightly more into the document domain, but as we have seen, the WYSIWYG authoring interface invites a slide back into the media domain by hiding the structured that is supposed to be created and showing only the formatting that is supposed to have been factored out in adopting the document domain.</p>
<p>It is little to be wondered then that the structured writing tools that have been popular in the market to date have been predominantly document domain tools, and have tended, like DocBook, to be very loosely constrained. (It is much easier to write an XML document in a WYSIWYG editor if the underlying structures are minimally constrained, since it lets you insert whatever bit of formatting you want anywhere you want.</p>
<p>Even with tools like DITA, which, while it is still fundamentally a document domain system, is more constrained, and capable of being constrained further, tend to be used in its generic out of the box form and with a Word-like WYSIWYG interface.</p>
<p>Thus even when a decision-making process is based on business requirements rather that specific tools, it is often tacitly driven by existing tool sets and ways of doing things, because those existing tools and processes shape our view of what the business requirements actually are. We don’t ask for a way to get from DesMoins to Albuquerque, we ask for a faster horse that eats few oats.</p>
<p>By laying out the structured writing algorithms as algorithms rather than as features of a tool, and by showing the different ways in which those algorithms can work based on content in the different structured writing domains, I hope I have provided you with a way to break free of the dead hand of current tools and processes in thinking about your structured authoring decision.</p>
<p>If so, this will allow you to have a decision making process based on algorithms and a knowledge of how the algorithms and the structure that support them can work together to address your business problems, while putting the complexity in the right place for your organization.</p>
<p>If you can come up with a set of requirements that say that you want to execute a give set of algorithms with a given level of reliability and to distribute the complexity of the system to an appropriate set of roles, then you will have a much more neutral basis on which to approach vendors or consultants.</p>
<p>Every tool in the market place, from end to end systems, to individual tools like XML editors, to frameworks and tools kits, represents an encapsulation on algorithms and the structures that support those algorithms. Not only do they represent a view about which algorithms are most important, but also a view about how they should be implemented -- which ultimately means how and to whom the complexity attendant of the algorithm should be distributed. Every tool, therefore, can be represented as a set of algorithms and structures, just like your set of requirements.</p>
<p>The decision making process then comes down to seeing if the best match between capabilities and requirements is to be found in a single end to end system, in a combination of separate tools, in modifying or building upon and existing framework, or in building some or all of the components of your system from scratch. When talking to any tool vendor, you can ask them to demonstrate how their tool supports each algorithms you care about, how reliable that implementation is, and where it distributes the complexity.</p>
<p>While individual circumstances can vary greatly, there are general patterns in how the use of different domains to implement algorithms distribute complexity within a system. Media domain systems are simple for small things, but provide no help for any kind of management or single sourcing algorithm, distributing all the complexity of those functions to the author and content manager. (Which results in complex content management systems.) They simplify ad hoc formatting of individual items but distribute all the complexity of conformance and consistency to authors. In short, they are simple in themselves but do nothing to alleviate the complexity of any other part of the publishing process.</p>
<p>The document domain distributes formatting complexity away from authors to the creators of publishing routines. However, a different kind of complexity can easily take its place if the number of document domain structures that people have to remember and use grows in order to support complex output requirements. If single sourcing is required, the document domain again distributes some of the complexity away from authors to the creators of publishing algorithm, with the limits we have noted in regard to <phrase>differential single sourcing</phrase>. By itself, the document domain, like the media domain, does little to alleviate other parts of the publishing process.</p>
<p>The management domain, in concert with the document domain, enables a range of content management features that would otherwise be either tedious or impossible. Content reuse is probably the prime example of this. Content reuse in pure media-domain or pure document-domain content is generally so complex that it would not be attempted without the introduction of management domain structures. However, management domain structures distribute a huge amount of complexity to authors, effectively shutting out contributors without specialized training and tools.</p>
<p>The subject domain distributes a huge amount of complexity away from authors, and, by making so many of the structured writing algorithms more reliable, it also distributes a lot of complexity and effort away from content mangers. However it distributes that complexity to the information architects and tools people who design the subject domain languages and write the algorithms that process them.</p>
<p>Complexity is by no mean the same thing as effort. Structured writing systems that are well designed to support appropriate algorithms can reduce overall effort considerably, which significantly improving quality. But where they place complexity matters. Even if a task requires less effort, adding complexity to it changes how the person assigned to that task works, and how they need to be qualified and trained. It is important to appreciate how the distribution of complexity and effort in the system you choose affects the dynamics and composition of your team.</p>
<p>As is no doubt apparent to you by this point, I am a strong believer in distributing the complexity of a structured writing system away from writers. The reason for this is simple. When structured writing systems distribute complexity toward writers, they don’t merely add a new and complex task that must be learned, they impose that complexity directly on the activity of writing itself. It is not really possible for the writer to segment the writing process from the process of creating structure. They are too bound up with each other. The whole point of structured writing is that they should be bound up with each other. Yet writing is an activity requiring the whole of ones attention. Any unavoidable division of that attention directly detracts from the quality of writing.</p>
<p>Any avoidable complexity should be purged from the writing process itself. Not all markup represents an addition of complexity, however. Effective subject domain markup can work to direct the writers attention into the appropriate channels, distributing design complexity away from the writing task and leaving more attention available for the task of writing itself. (This is the basis on which we use forms for all the things we use forms for.)</p>
<p>Unfortunately, structured writing systems are often designed with other priorities in mind. In particular, they are often designed with content management priorities in mind. Structures a designed to support content management algorithms with little attention paid to how those structures distribute complexity towards authors.</p>
<p>In the end, the question of where complexity is distributed in your system is at least as important, if not more so, than the question of how much effort is avoided. The wrong distribution of complexity can not only undermine quality, it can also undermine the attempt to reduce effort. Complexity in the wrong place not only undermines the productivity of those saddled with it, it also undermines the reliability of every other algorithm, thus undermining the attempt to reduce effort and cost in those algorithms.</p>
<p>The economics of this decision are clearly complex. You may decide that the cost of creating and maintaining the most appropriate algorithms and structures in not worth the cost or quality improvements they promise. But hopefully that decision can be made with a full appreciation of the benefits that those algorithms are capable of delivering. But whatever you decide, make sure you understand how complexity is being distributed in the systems that you implement, and very conscious of the ability of those you are distributing it to to handle it, and the effect it will have on their productivity and the reliability of their work.</p>
</chapter>
