<?xml version="1.0" encoding="UTF-8"?>
<article>
<title>Content Management</title>
<p>When we create an individual piece of content for one-time publication in a single media, there is really not much of a role for management in the process. You may need to manage you sources and reasearch material, but not your product. Content management becomes a concern when you want to manage the production and publishing of many pieces of content, to manage the relationship between them, ensure consistency and quality, or to publish them many times in different ways.</p>
<p>Of course, many of the reasons we have looked at for moving content from the media domain to the document domain or the subject domain have to do with managing the production and publishing process. But manageing a body of content and the processes and tools that create and process that content, require a whole set of metadata of its own.</p>
<p>Structured writing is about imposing constraints on content. Content managment is about imposing constraints on the content process. But it is also about managing the constraints we impose on content.</p>
<p>In fact, the management domain exists largely because of the decision to do structured writing. Doing structured writing requires recording content in document domain or subject domain structures, factoring out invariants into separate files, expressing constraints, and creating algorithms to translate the content to the media domain. All of that creates a lot of artifacts to keep track of, and requires a process both for keeping track of them and for running the structured authoring and publishing tool chain. Thus there is a need to manage both the artifacts and the process.</p>
<p>Of course, all content is managed. Sometimes by organizing folders on your hard drive. Sometimes by using an elaborate content management system. But management is not part of the content itself. It is a process that exists around the content, that helps the content come into being. But it is not content.</p>
<p>This is not a book about content management. That would be a subject for a book in itself -- and there are several such books already. It is worth noting, however, that content management systems, particularly component content management systems, often use structured writing as a means to enable content management practices. This is absolutely a legitimate use of structured writing, though it is not one that I will focus on.</p>
<p>You should be aware, however, that some discussions of structured writing are based on the premise that it is being used to enable content management. In many cases, the driver for such systems is the content management methodology being used, rather than the writing process of individual pieces, which is the focus on this book. When you are looking at a particular structured writing system, particularly one tied to a content management system, it may be much easier to understand if you look at it as an enabler of content management functionality.</p>
<p>One prominent system that is widely used as an enabler of content management is DITA. This is not to say that DITA is only a content management enabler, but this is the motivation for a great deal of DITA adoption.</p>
<p>Of course, all significant content initiatives need to be manged in some way. The difference is whether you start with structure writing as a means to make content better, and then look for a way to manage it, or if you look for a way to make managing content better, and then adopt structured writing as way to make your content management plan work. If your motivation is the latter, it is entirely possible to end up with a system that makes the content worse rather than better.</p>
<p>The imposition of structure -- any structure -- always affects the quality of content because it changes how authors work and how they think about the structure of the content they are creating. Content quality should always be taken into account in any structured writing system you adopt, even if your goals are not related to quality in themselves.</p>
<section>
<title>Conflicting constraints</title>
<p>As we have said all along, structured writing is about imposing constraints on content, and about recording the constraints applied to content so that algorithms can detect them. The first reason to impose constraints on content is to improve content quality. But as content collections grow, and as online content becomes more integrated, we also have a growing need to manage content, and to use algorithms to help manage content.</p>
<p>For algorithms to manage content they need to know what constraints it meets, so structured writing is a natural place to turn when you want to implement content management.</p>
<p>But the constraints you use to implement content management may not be the same as those you implement to improve content quality. It is easier to manage content (or anything else) if it is more uniform. The constraints that you will naturally wish to impose to make content more manageable are those that make it more uniform. Thus a system like DITA which, as a starting point, proposes that there are just three types of content (concept, task, and reference) has an obvious appeal from a management point of view.</p>
<p>The constraints that you impose to improve content quality, on the other hand, are those which make sure that a piece of content does just the job it is supposed to to. They are the kind of constraints that make sure that a recipe contains everything a recipe needs and is presented in the way a recipe should be presented. They are highly specific to the subject matter and to the audience. Three generic content types are not going to provide all the constraints we need to effectively manage content quality. Indeed, some of the constraints that are designed to facilitate content management may be positively damaging to content quality.</p>
<p>We have something of the same issue with the publishing algorithm. To manage publishing effectively is to good to have a single highly constrained presentation file format (a pure document domain description of the content). Such a format obviously does nothing to constrain how subject matter is expressed, so it does very little to address content quality issues beyond those related to consistent presentation and formatting.</p>
<p>But as we saw when we looked at the publishing algorithm, you don’t need to write in the presentation file format. You can write content in the subject domain and translate it to the presentation file format as part of the publishing process. And if you are doing differential single sourcing, you may be translating it into two different presentation file formats for presentation in different media. (In fact, the desire to do differential single sourcing may be one of the motives for writing in the subject domain.)</p>
<p>This works fine for the publishing algorithm. The algorithm gets the consistent presentation format it needs to work reliably and efficiently, but authors still write in the subject domain and thus have the benefit of subject domain constraints to manage content quality. The consistent document domain format is just a temporary artifact created as part of the publishing process.</p>
<p>But for the content management algorithm, this is no solution. The content management algorithm needs to manage the original source files in which the content is created. It does it no good to manage temporary artifacts created by the publishing process. If it is to manage the source files in a system where content is created in the subject domain, it is going to have to deal with many more source formats.</p>
<p>While this is not likely to be the approach you would naturally choose if you set out to create implement a content management system without making content quality one of your business goals, I would argue that managing subject domain content may actually lead to better content management in the long run.</p>
<p>In any system that relies on constraints, on on data that is known to meet certain constraints, it is necessary to make sure that the constraints are actually being me. This is the role of the <phrase>guidance algorithm</phrase> and the <phrase>validation algorithm</phrase>. But it turns out that it is much easier to provide effective guidance and preform effective validation in the subject domain. Also, the subject domain allows you to factor out many constraints, which is the most effective way of making sure they are obeyed. The document domain provides far fewer opportunities for factoring out constraints and providing effective guidance and is much more difficult to audit correctly.</p>
<p>Thus while a simple document domain scheme of concept, task, and reference topics meets the content management algorithms desire for uniformity, it provides little opportunity for ensuring that the full range of constraints necessary to make content management and reuse work are actually followed. The result can be deterioration of the quality of the content set over time, a process that tends to be self perpetuating, sometimes resulting in a complete breakdown of the system over time.</p>
<p>The variety of constraints and formats found in a subject-domain system may present an greater content management challenge initially, but it can go a very long way to ensuring that the necessary constraints are met. And, as we have seen, <phrase>you can often use subject domain structures to factor out management domain concerns</phrase>, which can go along way to removing the conflict between quality structures and management structures in content. This not only leads to more effective management, but also to a simple authoring experience.</p>
<p>We should note that it is possible to implement content reuse of temporary artifacts. If the reuse algorithm points to a URL to source content, that URL could generate reusable content from subject domain sources on the fly, and in a way that is transparent to the reuse system.</p>
</section>
<section>
<title>Finding the content to use</title>
<p>Once you have determined you criteria for making content fit, you have to figure out how writers are going to find content that fits.</p>
<p>This requires answering the question: does one of these already exist. This is a complex question. It depends on what it required to definitively identify a piece of content as one of these.</p>
<ul>
<li>
<p>Is it about the same subject?</p>
</li>
<li>
<p>Does it have the same scope?</p>
</li>
<li>
<p>Is it addressed to the same audience?</p>
</li>
<li>
<p>Does it meet my quality constraints?</p>
</li>
<li>
<p>Is it in a compatible form?</p>
</li>
<li>
<p>Is it blackboxed across all uses? Could one instance change independent of the others.</p>
</li>
</ul>
<p>It is also important to remember that the question of “does one of these already exist” may often be answered in the negative. Every time that a writer gets a negative response, they still have to write the content themselves. Thus the search for reusable content adds an overhead to the writing process even when there is no content to reuse. This can have two undesirable effects:</p>
<ol>
<li>
<p>It increases the cost of all authoring activities, which can create greater costs than any successful reuse is saving. It is quite easy for a reuse system to end up making an content organization less productive rather than more so.</p>
</li>
<li>
<p>It creates a disincentive for authors to look for reusable content. This can result in content being duplicated. If this happens the duplicate content might itself be reused, resulting in your systems having the same content stored twice and each stored instance being reused in other content. This not only increases costs and makes searches more difficult, it raises the possibility that only one of the instances will be changed when a change occurs, resulting in the change being missed in the other reuse chain. If enough inconsistencies like this accumulate, people can start to loose confidence in the whole system.</p>
</li>
</ol>
<p>You can greatly reduce the impact of this problem is you can give authors a clear idea of when they should expect to find reusable content and when they should not.</p>
</section>
<section>
<title>Dealing with change in the managed content</title>
<p>One of the big motivators for content reuse is to reduce the impact of change on your content. If a change in the subject matter occurs, ideally you would like to only change the content in one place and have that change automatically reflected across the content set.</p>
<p>This can be more challenging that it seems.</p>
<p>Links</p>
<p><phrase>When we defined structured writing</phrase>, we also noted that content should not only meet constraints, it should record the constraints it meets. If you are creating content to be used in multiple places, it is important not only that it meets the constraints (so that it will fit), but that it records what constraints it meets (so that other writers can tell if it will fit).</p>
<p>The leads to two of the biggest questions in planning your content reuse strategy:</p>
<ol>
<li>
<p>Do you want all of your content to be potentially usable in many places or only some of it?</p>
</li>
<li>
<p>Do you want to be able to use content by pulling it out of existing documents, or do you want to maintain a separate collection of usable units that are not published themselves, but only exist to be used in other documents?</p>
</li>
</ol>
<p>It is very common to start with the idea that you want all of your content to be reusable, even if it was not written with reuse in mind. This is easy to do at first, but over time it can become hard to manage. Most organizations that attempt to do content reuse at any scale tend to move to more structured methods and may outlaw random reuse altogether.</p>
</section>
</article>
