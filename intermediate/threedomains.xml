<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.three-domains">
<title>How ideas become content</title>
<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">hybrid tagging language</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">DITA</annotation></phrase> <phrase><annotation type="language">DocBook</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">HTML</annotation></phrase> <phrase><annotation type="language">XML</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm">conformance algorithm</annotation></phrase> <phrase><annotation type="algorithm">conformance</annotation></phrase> <phrase><annotation type="algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract and merge algorithm</annotation></phrase> <phrase><annotation type="algorithm">extract and merge</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance algorithm</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">Content management systems</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase></p>
</annotations>
<index>
<row>
<type>concept</type>
<value>media domain</value>
</row>
<row>
<type>concept</type>
<value>document domain</value>
</row>
<row>
<type>concept</type>
<value>subject domain</value>
</row>
<row>
<type>concept</type>
<value>structured writing domains</value>
</row>
</index>
<p>An efficient structured writing system must consider the whole content creation process in order to distribute complexity appropriately without overloading and body or letting any of the complexity slip through to fall on the reader. Let’s start, therefore, by looking at how content gets from ideas in a head to dots on a page or screen.</p>
<section>
<title>From ideas to dots</title>
<p>The process of creating and delivering content consists of translating ideas (stuff someone thinks or knows) into concrete physical form that can be read (dots or lines of ink on a page, or pixels on screen).</p>
<insert item="../graphics/ideas2dots.svg" type="image"/>
<p>Structured writing is about applying a structured methodology to that process. It is a long road from ideas to dot, and structured writing techniques can be applied at many points along that road. Almost all writing done today uses structured writing techniques to one extent or another. As this book will show, the basic principles of structured writing apply across the spectrum, from the tools and techniques used in most offices today, to most sophisticated structured writing systems. It is not a matter of unstructured vs structured approaches, but the degree of structure used.</p>
<p>All writing has structure in the literary sense of the word. Every comprehensible sentence has a grammatical structure. You may even have learned to diagram that structure in school. <citation type="citation" value="By Tjo3ya - Own work, CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=18312612"/></p>
<insert item="../graphics/Examples_of_Reed-Kellogg_diagrams.jpg" type="image"/>
<p>Many texts also have deliberate rhetorical structure: a particular way of assembling words and other media to effectively inform or persuade an audience. Sometimes that rhetorical structure is ad hoc, invented by the writer for a unique individual piece. But often it is repeated for many similar pieces of content. Thus newspapers stories have a repeated rhetorical structure known as the pyramid model, in which the most important facts are promoted to the opening sentences of the pieces. Recipes have a very familiar structure, with and introduction, a list of ingredients, and a list of preparation steps.</p>
<blockquote>
<section>
<title>Hard Boiled Eggs</title>
<p>A hard boiled egg is simple and nutritious. Prep time, 15 minutes. Serves 6.</p>
<section>
<title>Ingredients</title>
<ul>
<li>
<p>12xeggs</p>
</li>
<li>
<p>2qt water</p>
</li>
</ul>
</section>
<section>
<title>Preparation</title>
<ol>
<li>
<p>Place eggs in pan and cover with water.</p>
</li>
<li>
<p>Bring water to a boil.</p>
</li>
<li>
<p>Remove from heat and cover for 12 minutes.</p>
</li>
<li>
<p>Place eggs in cold water to stop cooking.</p>
</li>
<li>
<p>Peel and serve.</p>
</li>
</ol>
</section>
</section>
</blockquote>
<p>As a writer, you don’t have to stop to think about the rhetorical structure of a recipe: you follow the established pattern. Many other subjects have similarly well known rhetorical patterns. These are all examples of structured writing in the rhetorical sense, and it is well known that adhering to sound rhetorical models greatly improves the quality of writing. These rhetorical models are constraints. The tell the writer how the subject should be discussed -- what should be included and what should not -- and how it should be expressed.</p>
<p>This idea of constraints is fundamental to structured writing. Whenever you specify a structure to be followed, you are imposing a constraint. Constraints define what is and is not required or acceptable in a piece of writing. If you have ever been asked to write following a template or a style guide, you have been asked to follow a set of constraints.</p>
<p>However, the term structured writing today generally means more than following a style guide or template. It usually means the use of computer data formats (most commonly XML) to capture written content so that it can be processed by algorithms. These data structures are also constraints. They require the writer to write content to fit into a set of specific data structures.</p>
<p>These mechanical constraints may or may not correspond to the rhetorical constraints of a particular piece of writing. In some cases, the mechanical constraints are there to serve a publishing or content management purpose and may have nothing to do with the rhetorical structure of the wiring. In some cases they may actually interfere with it. However, it is also possible to use mechanical structures like this to help improve the rhetorical structure of content. This is the kind of structured writing that this book is about. From this point on, therefore, I am going to use structured writing to mean writing in data structures. As we go on, I will show how those data structures can give greater and greater support to the literary and rhetorical structure of content, and that this approach can be be hugely beneficial in managing how complexity is distributed in your content creation process.</p>
<p>Just as all writing has at least a basic grammatical structure, all writing on a computer involves creating basic data structures. Thus the only case in which no structured writing techniques are involved in the writing process is when an author writes down their ideas with pen and paper, and gives that paper directly to the reader. In this case, the entire writing process, from an idea in the writer’s head to words on paper takes place in the writer’s head and any constraints that are imposed on the content are captured and imposed by the writer themselves as they inscribe their words with the pen.</p>
<insert item="../graphics/ideas2dotsrecordend.svg" type="image"/>
<p>It is rare for writers to record their ideas directly in the final physical form these days. For instance, the writer may write in a word processor, edit the text on screen, and press <phrase><annotation type="guibutton">Print</annotation></phrase> to sent the content to a printer to create the final form that the reader receives. Or they may press <phrase><annotation type="guibutton">Send</annotation></phrase> and have the final form rendered on someone else’s monitor. Either way, recording the content happens before the final form is created, and the way the content looks when you write may be different from how it looks when the reader sees it in final form. The point at which the content is recorded, in the journey from ideas to dots, has been moved back just a little bit.</p>
<insert item="../graphics/ideas2dotsrecordmid.svg" type="image"/>
<p>Word processing, desktop publishing, and various approaches to structured writing all establish a point between ideas to dots where the content will be recorded, and then provide algorithms to complete the journey from that point to dots on a page.</p>
<insert item="../graphics/ideas2dotsroles.svg" type="image"/>
<p>I’m going to use the word <phrase><annotation type="concept">algorithm</annotation></phrase> a lot in this book. An algorithm is a formalized and consistent way to do something. Basically, if you give an algorithm the same inputs, it should always produce the same outputs every time it is is run. Computer software is an encoding of an algorithm that a computer can execute. But an algorithms is not the same thing as a program. An algorithm is a method. A program describes the algorithm to a computer. You do not need to be a programmer to create an algorithm. Nor do you need a computer to execute an algorithm. Human being can execute algorithms as well.</p>
<p>The reasons I am going to talk about algorithms and not software is that algorithms are fundamental to structured writing. Algorithms and structures work together and you can’t design one without the other. The reason you add structure is to enable algorithms. The heart of this book is a description of the principal structured writing algorithms and the structures that support them. The goal of structured writing is to make content better, and it is the algorithms, not the structures, that do that. The structures exist to support the algorithms.</p>
<p>Constraints play an important role for algorithms. First, they help assure the quality of the data that the algorithms consume by controlling what authors create. Secondly, they constrain the interpretation of the data. In other words, the structures that authors create in the content tell the algorithms what each piece of content means. The more precisely the structures constrain the interpretation of the data, the more the algorithms can do with that data.</p>
<p>This leads us to a working definition of structured writing for purposes of this book:</p>
<blockquote>
<p>Structured writing is writing that follows a set of constraints and records that it has done so.</p>
</blockquote>
<p>For instance, lets say that we have a constraint that every section must start with a title. We can follow this constraint in just about any tool we choose. We could even follow in when writing by hand on paper. But if we choose a structured writing format, such as <phrase><annotation type="language">DocBook</annotation></phrase>, we can not only follow this constraint but record that we have followed it:</p>
<codeblock language="xml">
&lt;section&gt;
    &lt;title&gt;The quick brown fox&lt;/title&gt;
    &lt;para&gt;The quick brown fox jumps over the lazy dog.&lt;/para&gt;
&lt;/section&gt;
</codeblock>
<p>This markup records that we have followed the constraint by identifying the title as the first thing in the section. This constrains the interpretation of the string “The quick brown fox” by algorithms. Algorithms can now do things such as:</p>
<ul>
<li>
<p>Check that all sections start with titles (that is, check that the constraint has been followed)</p>
</li>
<li>
<p>Format all section titles the same way</p>
</li>
<li>
<p>Create a list of all the section titles in the document</p>
</li>
</ul>
<p>All of these redirect tasks away from the author, redistributing those bits of complexity to the algorithms and the people who write them.</p>
<p>Following constraints can make content better, but it is in recording the constraints that we have followed that we constrain the interpretation of the text and therefore make it available to algorithms. And it is in making it available to algorithms that we gain the ability to redistribute the complexity of the content creation process.</p>
<p>Recording the constraint that content follows is key to untangling and partitioning the complexity of content creation because it allows information to be passed reliably from one person or process to another.</p>
<p>Generally speaking, the more we constrain the creation and interpretation of content with structure, the more accessible it becomes to algorithms, and the more opportunities we gain to distribute complexity effectively. This means recording the content at a point nearer to ideas in the head and further from dots on a page. The nearer we are to ideas, the more we know about what the content says as opposed to what a page looks like, and the more effectively we can constrain the creation and interpretation of the text.</p>
<p>We can describe this process of earlier recording in terms of three domains, each domain reflecting a stage in the progress from ideas to dots. The domains are the media domain (which is concerned with lines and dots on paper or screen), the document domain (which is concerned with the expression and organization of documents), and the subject domain (which is concerned with the ideas that we write about).</p>
</section>
<section>
<title>The three domains</title>
<p>Let’s suppose that an author is planning to write a recipe for chicken noodle soup. They start out with the idea of a soup made with chicken and noodles. This is an idea about the subject matter and not yet any form of content.</p>
<insert item="../graphics/3d.png" type="image"/>
<p>They then decide to give the dish the name “Chicken Noodle Soup.” That name is content. They figure out which ingredients they want to use and how they want to make the dish. This is all information about making chicken noodle soup but it is not yet part of a document. It is information in the subject domain.</p>
<insert item="../graphics/3d_name.png" type="image"/>
<p>Then the author decides how they want to present this information to help other people make Chicken Noodle Soup. They decide they want to have a title, a picture, an introduction, a list of ingredients, and a set of preparation steps. They are no longer gathering information; now they are focused on how to present the information they have gathered. These are decision in the document domain. Documents are how we organize and present information.</p>
<insert item="../graphics/3d_title.png" type="image"/>
<p>Then the writer starts to think about how the document will look on screen or on paper. What font will be used for the heading and the body text. How large will the heading and the body be. Will the quantity of the ingredients be flush right? Will the be leading dots? Will the presentation steps be numberer or just presented sequentially?  How big will the picture be? Will the text wrap around it? These are decision in the media domain.</p>
<insert item="../graphics/3d_h1.png" type="image"/>
<p>All content passes through the three domains. Content always begins with the author thinking about subjects in the real world. They then decide to express ideas about those subjects in words. They collect their ideas together and determine an order and structure to express them. Finally, they decide how they will be formatted in a particular media. The question is, where in this process that all content goes through does the author start recording the content.</p>
<p>Do they lay it all out in the formatted version as they write? Then they are working in the media domain.</p>
<p>Do they record the presentation units like lists, heading, and step without associating specific formatting to them? Then they are working in the document domain.</p>
<p>Do they record the raw information as data, for instance, recording each ingredient and its quantity as ingredients and quantities, rather than as list items? They they are working in the subject domain.</p>
<p>If they recorded it in the media domain, it is ready to publish. If they recorded it in the document domain, then it needs to be formatted before it can be published (and could potentially be formatted differently for different media or different publications). If they recorded it in the subject domain, it needs to be organized into a document (and then formatted) before it can be published (but can potentially be organized into different kinds or documents or different collections).</p>
<p>All content must pass through all three domains to get from ideas in a head to dots on a page. But the author can record that content in the media domain, the document domain, or the subject domain. In the next three chapters we will look at what it is like to write in each domain.</p>
</section>
</chapter>
