<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.three-domains">
<title>The Three Domains of Content Structure</title>
<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">hybrid tagging language</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">DITA</annotation></phrase> <phrase><annotation type="language">DocBook</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">HTML</annotation></phrase> <phrase><annotation type="language">XML</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm">conformance algorithm</annotation></phrase> <phrase><annotation type="algorithm">conformance</annotation></phrase> <phrase><annotation type="algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract and merge algorithm</annotation></phrase> <phrase><annotation type="algorithm">extract and merge</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance algorithm</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">Content management systems</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase></p>
</annotations>
<index>
<row>
<type>concept</type>
<value>media domain</value>
</row>
<row>
<type>concept</type>
<value>document domain</value>
</row>
<row>
<type>concept</type>
<value>subject domain</value>
</row>
<row>
<type>concept</type>
<value>structured writing domains</value>
</row>
</index>
<section>
<title>From ideas to dots</title>
<p>The process of creating and delivering content consists of translating ideas (stuff someone thinks or knows) into concrete physical form that can be read (dots or lines of ink on a page, or pixels on screen).</p>
<insert item="../graphics/ideas_dots.png" type="image"/>
<p>The writing and publishing process is all about how we get from ideas in a head to dots on a page.</p>
<p>In the simplest case, an author writes down their ideas with pen and paper, and gives that paper to the reader. This means that recording the content happens at the very end of the process as the final published form is being created. The entire process of going from an idea to the choice of words, the organization and formatting of those words, all takes places in the writer’s head.</p>
<p>It is rare for writers to record their ideas directly in the final physical form these day. For instance, the writer may write in a word processor, edit the text on screen, and press <phrase><annotation type="guibutton">Print</annotation></phrase> to sent the content to a printer to create the final form that the reader receives. Or they may press <phrase><annotation type="guibutton">Send</annotation></phrase> and have the final form rendered on someone else’s monitor. Either way, recording the content happens before the final form is created, and the way the content looks when you create the final form is often different from how the final form looks.</p>
<p>Word processing, desktop publishing software, and various approaches to structured writing all establish a point in this process from ideas to dots where the content will be recorded by the author, and then provide algorithms to complete the movement from that point to dots on a page.</p>
<p>I’m going to use the word <phrase><annotation type="concept">algorithm</annotation></phrase> a lot in this book. An algorithm is a formalized and consistent way to do something. Basically, if you give an algorithm the same inputs, it should always produce the same outputs every time it is is run. Computer software is an encoding of an algorithm that a computer can execute. But an algorithms is not the same thing as a program. An algorithm is a method. A program describes the algorithm to a computer. You do not need to be a programmer to create an algorithm. Nor do you need a computer to execute an algorithm. Human being can execute algorithms as well.</p>
<p>The reasons I am going to talk about algorithms and not software is that algorithms are fundamental to structured writing. Algorithms and structures work together and you can’t design one without the other. Whenever you add more structure, you add more algorithms. And the reason you add structure is to enable more algorithms. The heart of this book is a description of the principal structured writing algorithms and the structures that support them. The goal of structured writing is to make content better, and it is the algorithms, not the structures that do that. The structures exist to support the algorithms.</p>
<p>We use structured writing algorithms to help us with the writing process. We use them either to take over or to support parts of the writing task. This usually involves moving the point at which content is recorded earlier in the process from idea to dots, allowing the algorithms more scope to assist in the process.</p>
<p>We can describe this process of earlier recording in terms of three domains, each domain reflecting a stage in the progress from ideas to dots. The domains are the media domain (which is concerned with lines and dots on paper or screen), the document domain (which is concerned with the expression and organization of documents), and the subject domain (which is concerned with the ideas that we write about.</p>
</section>
<section>
<title>The three domains</title>
<p>Let’s suppose that an author is writing a recipe for chicken noodle soup. They start out with the idea of a soup made with chicken and noodles. This is an idea about the subject matter and not yet any form of content.</p>
<insert item="../graphics/3d.png" type="image"/>
<p>They then decide to give the dish the name “Chicken Noodle Soup.” That name is content. However, it is not yet part of a document. It is a piece of data in the subject domain.</p>
<insert item="../graphics/3d_name.png" type="image"/>
<p>Then the author composes a recipe for Chicken Noodle Soup. They are now composing a document that has structures like a title, a list of ingredients, and a preparation procedure. They use use name of the dish as the title of the recipe. That title is a piece of data in the document domain, but because it is the title of a recipe, it still has a strong association with the subject domain (a recipe is a document with a very specific subject).</p>
<insert item="../graphics/3d_title.png" type="image"/>
<p>As the process continues, some format for publishing the recipe is chosen. This might be HTML. HTML is a markup language in the document domain. That is, it contains markup for typical document structures such as titles, paragraphs, and lists. To express the title of the recipe in HTML, we turn the declaration of the title of the recipe into a declaration about an HTML heading level:</p>
<insert item="../graphics/3d_h1.png" type="image"/>
<p>This breaks the association of the title with the subject domain. At this stage we are recording that “Chicken Noodle Soup” is the title of a web page, not that it is the title of a recipe, and not that it is the name of a dish. However, we have now specified what type of document this is: a web page.</p>
<p>If you follow modern practice, your HTML should not include any specific information about how the document will be rendered -- what fonts will be used, how big the margins will be, etc. These things should be specified by a CSS stylesheet.</p>
<insert item="../graphics/3d_css.png" type="image"/>
<p>Adding the CSS moves the entire package further into the media domain. Notice, however, that in this case, all of the document domain information in the HTML format has been retained. The movement from the subject domain through the document domain into the media domain does not have to mean that information from an earlier domain has to be thrown away as you add information from the later domains. For instance, HTML5 microformats allow you to retain subject domain information all the way into the user’s browser. Traditional publishing techniques tended to throw away subject domain information as the process advanced. Today, that information is more likely to be retained as long as possible. (One of the implications of the term “intelligent content”.)</p>
<p>When the resulting page is loaded into a browser, dots are painted on the screen in the appropriate shape.</p>
<insert item="../graphics/3d_chicken.png" type="image"/>
<p>This process involves translating the document and media domain information in the HTML and CSS into the graphics primitives of the platform on which the content is displayed -- basically lighting up dots on a screen or printing dots on paper. This final step will destroy all document and subject domain information, but since the browser retains the HTML source, any information that has reached that point is available to code running in the browser and to other services running on the Web.</p>
<p>All content passes through the three domains. Content always begins with the author thinking about subjects in the real world. They then decide to express ideas about those subjects in words. They collect their ideas together and determine an order and structure to express them. Finally, they decide how they will be formatted in a particular media. The question is, where in this process that all content goes through does the author start recording the content.</p>
<p>An author can record that content in the media domain, the document domain, or the subject domain. In the next three chapters we will look at what it is like to write in each domain.</p>
</section>
</chapter>
