<?xml version="1.0" encoding="UTF-8"?>
<chapter>
<title>Information Architecture</title>
<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">hybrid tagging language</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">DITA</annotation></phrase> <phrase><annotation type="language">DocBook</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">HTML</annotation></phrase> <phrase><annotation type="language">XML</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">conformance</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase> <phrase><annotation type="algorithm">conformance algorithm</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring algorithm</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">Content management systems</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase></p>
</annotations>
<p>Information architecture is the arrangement of content so that it can be found and navigated. We have always had information architecture. The term is new, but not the need or the concept. In the past, though, information architecture was divided into two pieces. The basic unit of information was the book and the “architecture” of the book was an integral part of the responsibility of the author and editor. Larger sets of information were created by collecting and organizing books and that was the responsibility of the librarian or bookseller. (Libraries and book stores have different information architectures to serve different purposes.)</p>
<p>With the advent of online media, first in the form of large capacity electronic media such as CD-ROMs and then the Internet and the Web, this division of architectural responsibilities was overthrown. The basic unit of information in electronic media is not the book but the page. Thanks to hypertext linking, the relationships between pages in electronic media are much more complex than on paper. Also, the architecture of online media has to account for the ability to add, modify, and delete individual bits of content at any time. It is possible to think of book or library architectures in largely static terms. It is a serious mistake to think of Web architectures in this way.</p>
<p>This leads to the development of architectures of much smaller units with much more complex relationships to a much larger, more diverse, and more rapidly changing set of resources. These architectures include not only text and static graphics but active media: videos, animation, and dynamic feeds and information widgets. Given these factors, the old separation of roles between writer and librarian no longer works.</p>
<p>Authors have to be much more conscious of how their pages interact with other pages in the collection, including those created by others. The scale at which these small pieces of content relate with each other is much greater than the scale at which the pieces of a book related to each other. This calls for a whole new approach to information architecture, and for the appearance of a function and a role that had no equivalent in the paper world. Thus the term “information architecture” was born, not to name something entirely new, but something transformed by our new technology.</p>
<p>Information architecture as a discipline in its own right, as opposed to being an aspect of authorship or librarianship, has arisen to combat the chaos that emerged in many websites as they began to grow, lacking an overall organizing principle or influence. But we should recognize that information architecture is as much part of the book world as it is part of the web world, even if it was  not traditionally a job title in the book world. And if you are producing both web-like content and book-like content, your information architecture has to comprehend both.</p>
<p>Because information architecture involves the organization of large bodies of content it can benefit greatly from structured writing techniques. Structured writing can give works of content a more definite character and identity which makes them easier to organize. By providing <phrase><annotation type="algorithm" specifically="authoring">guidance</annotation></phrase> and <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase> to authors it allows information architects to better communicate and validate requirements. By making the content more accessible to algorithms, it allows the user of algorithms to do information architecture tasks, such as the automated organization and <phrase><annotation type="algorithm">linking</annotation></phrase> of content.</p>
<section>
<title>Top-down vs. bottom-up information architecture</title>
<p>How can structured writing structures and algorithms support information architecture in structured writing?</p>
<p>I’m going to start with making a basic distinction between two types of information architecture: <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> and <phrase><annotation type="concept" specifically="bottom-up information architecture">bottom-up</annotation></phrase>. Top down information architecture deals with navigational aids and organizing systems that stand apart from the content and point to it. A table of contents or a website menu system is a piece of top-down information architecture. Bottom-up information architecture deals with navigation and organization that exists within the content itself. A web site with a consistent approach to hypertext links within it pages is an example of a bottom-up information architecture.</p>
<p>But bottom-up information architecture is not just about linking, it is about the way content is written. A topic in a bottom-up information architecture is designed to be entered via search or links from almost anywhere (as opposed to being designed to be entered exclusively from a previous chapter). It is designed not as a stand-alone entity but as a hub of its local subject space, offering readers may onward vectors according to their needs and interests. I call this approach to information design <phrase><annotation type="concept">Every Page is Page One</annotation></phrase>, and it is described in my book, <phrase><citation type="nameref" value="EPPO-book">Ever Page is Page One: Topic-based Writing for Technical Communication and the Web</citation></phrase>. One of the key principles of Every Page is Page One is that a topic should follow a well defined pattern or type. Structured writing, particularly <phrase><annotation type="concept">subject domain</annotation></phrase> structured writing, is very useful in developing Every Page is Page One content.</p>
<p>Bottom-up and top-down information architectures are not incompatible with each other. In fact almost every information architecture has both top-down and bottom-up elements. (Books, for instance, which are principally top-down, based on a table of contents, may also have internal cross references, which are a bottom up mechanism.)</p>
<p>Structured writing can be used to drive both the <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> and <phrase><annotation type="concept" specifically="bottom-up information architecture">bottom-up</annotation></phrase> aspects of information architecture.</p>
</section>
<section>
<title>Categorization</title>
<p>One of the key elements of top-down information architecture is categorization. And information architect develops categories of content and develops an organizational schema (such as a table of contents) based on those categories. This may include levels of subcategories forming a hierarchical categorization scheme.</p>
<p>Not all categorization is hierarchical, though. In some cases content can be classified on several independent axes, allowing for the development of what is called faceted navigation. The easiest place to see faceted navigation in action is on a use-car site where you can narrow down your selection using any set of criteria that matter to you, such as selecting blue convertibles or all-wheel drive vehicles with manual transmissions.</p>
<p>Categorization may be implemented as part of the <phrase><annotation type="algorithm">content management algorithm</annotation></phrase>, with categories implemented as part of the external metadata that a CMS applies to a content object. This is common practice when dealing with content in the <phrase><annotation type="concept">media domain</annotation></phrase> or the <phrase><annotation type="concept">document domain</annotation></phrase>.</p>
<p>For content in the <phrase><annotation type="concept">subject domain</annotation></phrase>, however, the metadata required to assign a piece of content to a category may be inherent in its subject domain markup. I say that it may be inherent, because it is the nature of the subject domain to describe the subject matter and therefore any markup that describes the subject matter may already contain the fields that other functions need for their purposes. This is one of the attractions of the subject domain: the markup can serve many purposes, which simplifies both markup design and content authoring and often means that you don’t need to create additional structure to support a new algorithm.</p>
<p>If the subject domain information you need is not already there, you may have to add it to the design. But be careful not to reinvent the wheel. Some organizations create complex taxonomies as a basis of categorization, and the terms in the taxonomy may not always match the terms used for the same subjects in the content or the subject domain markup of that content. This does not mean that you need to manually relabel you content. You may well be able to may the two sets of terminology to each other so that you algorithms can find the same subjects under different names. Quite simply, categorization schemes are based on some aspect of reality, and if that corresponds to the aspects of reality captured by the subject domain markup of a piece of content, then categorization can be done algorithmically, even if terms don’t match perfectly.</p>
<p>Relying on the subject domain metadata already in the content, rather than creating a separate metadata record, can be a tremendous advantage, because it makes submission of content to a repository so much easier for authors. But it can also avoid the need for a costly CMS altogether, since it allows the publishing algorithm to categorize content at build time without the need of a separate metadata store or a separate system to manage categorization.</p>
</section>
<section>
<title>Linking</title>
<p>We have covered the <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> already, but linking is at the heart of a bottom up information architecture. In a bottom-up architecture, a page is not simply a leaf on a tree: the price you find at the end of the search. It is a junction point in the exploration of an information space and the quest to understand a subject. In reading a page, a reader may discover new subjects that they need to understand and new options that they need to consider. They may discover that what they thought the knew is wrong, or what they thought they wanted to do was not the right choice. They may find that their search or their traversal of the categorization system has led them to the wrong place, or they may discover whole new worlds they wish to explore. At a more mundane level, they may discover that they need additional information to complete their task, such as reference data.</p>
<p>These are all pointers to some next topic that the reader needs. Even the most prescient writer cannot have chosen all of them as the linear next topic in a linear narrative. To serve the reader they need to pave all of these possible paths for them, and the way you do that is with hypertext links.</p>
<p>This means that linking is not something that happens at arbitrary points where the author feels like adding a link. It is something that is planned for as part of the information architecture. Whether you specify hard links in the <phrase><annotation type="concept">media domain</annotation></phrase> or the <phrase><annotation type="concept">document domain</annotation></phrase>, manage them with keys in the <phrase><annotation type="concept">management domain</annotation></phrase>, or generate them from subject metadata in the subject domain, they should be crated in a disciplined and consistent manner according to a deliberate plan.</p>
</section>
<section>
<title>Tables of Contents</title>
<p>Tables of content can serve various purposes depending on the nature of the work. Some describe a linear reading order for a work, some provide a classification scheme for random access to the content, some are simply a list of chapters that does not necessarily imply an intended reading order.</p>
</section>
</chapter>
