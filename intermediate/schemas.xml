<?xml version="1.0" encoding="UTF-8"?>
<chapter>
<title>Schemas</title>
<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">hybrid tagging language</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">DITA</annotation></phrase> <phrase><annotation type="language">DocBook</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">HTML</annotation></phrase> <phrase><annotation type="language">XML</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">conformance</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase> <phrase><annotation type="algorithm">conformance algorithm</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">extract and merge</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">extract and merge algorithm</annotation></phrase> <phrase><annotation type="algorithm">relevance algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm">exchange</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">Content management systems</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase></p>
</annotations>
<p>How do you establish constraints for content, and how do you validate against those constraints?</p>
<p>For a <phrase><annotation type="concept">concrete markup languages</annotation></phrase> like MarkDown, the constraints are established in the code of the MarkDown processor. They are validated when the processor parses the MarkDown file. (In practice, though, MarkDown does no meaningful validation. Anything it does not recognize as markup, it simply outputs as text.)</p>
<p>For <phrase><annotation type="concept">extensible markup languages</annotation></phrase> like XML you define structures yourself (or use an existing definition). Basic XML syntax is validated by the parser, but the definition of constraints is the business of a schema language. The validation of those constraints is the business of a piece of software called a “validator”.</p>
<p>A schema language is a structured language for defining structured languages. The schema for a markup languages says what structures are allowed and in what order and relationship. Those definitions are constraints. A given document either conforms to those constraints or it does not.</p>
<p>Here is an example of a schema in a schema language called <phrase><annotation type="tool">RelaxNG</annotation></phrase>, which is one of several schema languages available for defining <phrase><annotation type="language">XML</annotation></phrase>-based markup languages:<citation type="citation" value="https://en.wikipedia.org/wiki/RELAX_NG#XML_syntax"/></p>
<codeblock language="RNG">
&lt;element name="book" xmlns="http://relaxng.org/ns/structure/1.0"&gt;
   &lt;oneOrMore&gt;
      &lt;element name="page"&gt;
         &lt;text/&gt;
      &lt;/element&gt;
   &lt;/oneOrMore&gt;
&lt;/element&gt;
</codeblock>
<p>This example defines two elements and three constraints. The first element is called <phrase><annotation type="code">book</annotation></phrase> and the second is called <phrase><annotation type="code">page</annotation></phrase>. The constraints are:</p>
<ul>
<li>
<p>The <phrase><annotation type="code">page</annotation></phrase> element must occur inside the <phrase><annotation type="code">book</annotation></phrase> element. (Because the <phrase><annotation type="code">page</annotation></phrase> element is defined inside the <phrase><annotation type="code">book</annotation></phrase> element structure.)</p>
</li>
<li>
<p>There must be at least one <phrase><annotation type="code">page</annotation></phrase> element inside the <phrase><annotation type="code">book</annotation></phrase> element, and there can be more. (Because the <phrase><annotation type="code">page</annotation></phrase> element is defined inside an RNG <phrase><annotation type="code">oneOrMore</annotation></phrase> element.)</p>
</li>
<li>
<p>Text can occur inside the <phrase><annotation type="code">page</annotation></phrase> element, but not directly inside the <phrase><annotation type="code">book</annotation></phrase> element. (Because the RNG <phrase><annotation type="code">text</annotation></phrase> element occurs inside the definition of the <phrase><annotation type="code">page</annotation></phrase> element, but not as a direct child of the <phrase><annotation type="code">book</annotation></phrase> element definition.)</p>
</li>
</ul>
<p>Thus if an author wrote:</p>
<codeblock language="xml">
&lt;book&gt;Moby Dick
    &lt;page&gt;Call me Ishmael. Some years ago- never mind how long precisely- having little or no money in my purse, and nothing particular to interest me on shore, I thought I would sail about a little and see the watery part of the world.&lt;/page&gt;
&lt;/book&gt;
</codeblock>
<p>the validator would report an error because the words “Moby Dick” are directly inside the book element and text is not allowed in that position.</p>
<p>There are several different schema languages for XML each of which is capable of expressing and enforcing different sets of constraints (with considerable overlap between them). It is not unusual to combine different schema languages to more completely constrain a markup language. In particular, it is not uncommon to use a schema language called <phrase><annotation type="tool">Schematron</annotation></phrase> in concert with other schema languages like <phrase><annotation type="tool" specifically="RelaxNG">RNG</annotation></phrase>. While most schema languages work by modeling the structure of a document, as in the <phrase><annotation type="tool" specifically="RelaxNG">RNG</annotation></phrase> example above, <phrase><annotation type="tool">Schematron</annotation></phrase> works by making assertions about the structure in a language called <phrase><annotation type="tool">XPath</annotation></phrase>. A <phrase><annotation type="tool">Schematron</annotation></phrase> schema would make a lousy guide for authoring, but it can test assertions, and therefore enforce constraints, that no other schema language can.</p>
<p>Here is a simple <phrase><annotation type="tool">Schematron</annotation></phrase> example. It defines one of the constraints listed above, namely that a book element must contain at least one page element.</p>
<codeblock language="schematron">
&lt;schema xmlns="http://purl.oclc.org/dsdl/schematron"  queryBinding="xslt2"&gt;
    &lt;pattern&gt;
        &lt;title&gt;Book constraint&lt;/title&gt;
        &lt;rule context="book"&gt;
            &lt;assert test="page"&gt;A book must contain at least one page.&lt;/assert&gt;
        &lt;/rule&gt;
    &lt;/pattern&gt;
&lt;/schema&gt;
</codeblock>
<p>The rule says that in the context of the element <phrase><annotation type="code">book</annotation></phrase> the assertion that there is an element <phrase><annotation type="code">page</annotation></phrase> must be true. If it is not, the message within the <phrase><annotation type="code">assert</annotation></phrase> element will be displayed.</p>
<p>In the <phrase><annotation type="tool" specifically="RelaxNG">RNG</annotation></phrase> schema example, the schema is essentially a template that models the hierarchy of the document. The constraints are consequences of the structure of that hierarchy. (The <phrase><annotation type="code">book</annotation></phrase> element cannot contain text because there is no place for text in that part of the hierarchy.) Only documents that conform to the template are valid.</p>
<p>In the <phrase><annotation type="tool">Schematron</annotation></phrase> example, the schema is a series of constraint statements. The hierarchy of the document is a consequence of meeting all the constraints. Any document is valid as long as it conforms to all the stated constraints.</p>
</chapter>
