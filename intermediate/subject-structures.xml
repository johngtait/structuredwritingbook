<?xml version="1.0" encoding="UTF-8"?>
<chapter>
<title>Subject structures</title>
<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">hybrid tagging language</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">DITA</annotation></phrase> <phrase><annotation type="language">DocBook</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">HTML</annotation></phrase> <phrase><annotation type="language">XML</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm">conformance algorithm</annotation></phrase> <phrase><annotation type="algorithm">conformance</annotation></phrase> <phrase><annotation type="algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract and merge algorithm</annotation></phrase> <phrase><annotation type="algorithm">extract and merge</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance algorithm</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">Content management systems</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase></p>
</annotations>
<index>
<title>type, term</title>
<p>concept, subject structures</p>
</index>
<p>When you create content in the subject domain, or add subject domain structures to document domain languages, the structures should reflect the subject matter rather than the presentation of the content. How exactly do you make this distinction? It is not always obvious, because even in the subject domain you are still often writing in <phrase><annotation type="concept">document-domain</annotation></phrase> structures like paragraphs and lists. As we have noted, a <phrase><annotation type="concept">subject-domain</annotation></phrase> structured writing language is not an <phrase>ontology</phrase>. It does not attempt to capture the entire semantics of a piece of content as formal data. It merely captures enough to enable the set of structured writing algorithms you are interested in, or to factor out constraints in other domains, or to increase functional lucidity.</p>
<p>This means that border between the <phrase><annotation type="concept">document domain</annotation></phrase> and the <phrase><annotation type="concept">subject domain</annotation></phrase> is somewhat fuzzy. There are <phrase><annotation type="concept">subject domain</annotation></phrase> structures in public document domain languages like <phrase><annotation type="language">DocBook</annotation></phrase>, and there are <phrase><annotation type="concept">document-domain</annotation></phrase> structures in examples of <phrase><annotation type="concept">subject domain</annotation></phrase> languages that we have looked at, like recipes, movie reviews, and API references.</p>
<p>The key indication that you are in the <phrase><annotation type="concept">subject domain</annotation></phrase> is whether or not you could reasonably use the language to write about other subjects. <phrase><annotation type="language">DocBook</annotation></phrase> has a number of <phrase><annotation type="concept">subject domain</annotation></phrase> structures related to software and computers, but you can ignore those structures (none of them are mandatory) and use DocBook to write recipes or movie reviews if you want to. Thus <phrase><annotation type="language">DocBook</annotation></phrase> is a <phrase><annotation type="concept">document domain</annotation></phrase> language. Can you use our recipe markup language to write about software or movies? No. Can you use our API reference markup to write about preparing food? No. Therefore these languages are in the <phrase><annotation type="concept">subject domain</annotation></phrase>.</p>
<p>However, there are document domain languages that are suitable for  only certain document types. <phrase><annotation type="language">DocBook</annotation></phrase>’s <phrase><annotation type="code">article</annotation></phrase> document type and <phrase><annotation type="language">DITA</annotation></phrase>’s task topic are not specific to one subject, but they are specific to one type of document. Similarly, <phrase>MarkDown</phrase> is designed for simple web pages. <phrase><annotation type="language">eLesson Markup Language</annotation></phrase> (eLML) is a format for creating electronic lessons, but it is not restricted to lessons on a particular subject. It is therefore in the document domain. <phrase><annotation type="language">Journal Article Tag Suite</annotation></phrase> (JATS) is a language for scientific journals online. It is <phrase><annotation type="concept">document domain</annotation></phrase> because it is specific to a document type, not a subject.</p>
<p>The development of a subject-domain language generally begins by formalizing the rhetorical structure of a document on that subject . As we have shown, you can write a recipe in a document domain language. It will still follow the template of a recipe: introduction, picture, ingredients, preparation steps. But that template will not be formalized or recorded in the content. So, the first step into the subject domain is to formalize the rhetorical structure:</p>
<codeblock language="sam">
recipe: Hard Boiled Egg
    introduction:
        A hard boiled egg is simple and nutritious. 
        Prep time, 15 minutes. Serves 6.
    ingredients:
        * 12 eggs
        * 2qt water
    preparation:
        1. Place eggs in pan and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
</codeblock>
<p>The next step is to formalize the data structure of any data that is already presented in fields, lists, or tables. (In other words, not in paragraphs.)</p>
<codeblock language="sam">
recipe: Hard Boiled Egg
    introduction:
        A hard boiled egg is simple and nutritious. 
        Prep time, 15 minutes. Serves 6.
    ingredients:: ingredient, quantity, unit
        eggs, 12, each
        water, 2, qt
    preparation:
        step: Place eggs in pan and cover with water.
        step: Bring water to a boil.
        step: Remove from heat and cover for 12 minutes.
        step: Place eggs in cold water to stop cooking.
        step: Peel and serve.
</codeblock>
<p>The next step is to look for data that is consistent worthy of being constrained and made available to algorithms and pull it out of paragraphs and into structured fields, lists, or tables.</p>
<codeblock language="sam">
recipe: Hard Boiled Egg
    introduction:
        A hard boiled egg is simple and nutritious.
    ingredients:: ingredient, quantity, unit
        eggs, 12, each
        water, 2, qt
    preparation:
        1. Place eggs in pan and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
    prep-time: 15 minutes
    serves: 6
</codeblock>
<p>The next step is to think about whether there is additional subject domain or management domain metadata that you need to add to the model. Usually this will be for management or tracking purposes, and may not be part of any current content examples you are looking at. Wait to do this step until you have formalized the field, list, and table data from the content itself, as you may find that that data is usable for management and tracking purposes as well, so you won’t need to add additional fields just for management purposes.</p>
<codeblock language="sam">
recipe: Hard Boiled Egg
    introduction:
        A hard boiled egg is simple and nutritious.
    ingredients:: ingredient, quantity, unit
        eggs, 12, each
        water, 2, qt
    preparation:
        1. Place eggs in pan and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
    prep-time: 15 minutes
    serves: 6
    wine-match: champagne and orange juice
    beverage-match: orange juice
    nutrition:
        serving: 1 large (50 g)
        calories: 78
        total-fat: 5 g
        saturated-fat: 0.7 g
        polyunsaturated-fat: 0.7 g    
        monounsaturated-fat: 2 g    
        cholesterol: 186.5 mg    
        sodium: 62 mg    
        potassium: 63 mg    
        total-carbohydrate: 0.6 g    
        dietary-fiber: 0 g    
        sugar: 0.6 g    
        protein: 6 g    
</codeblock>
<p>The next step is to look through the remaining paragraph data for the mention of significant subjects that should be annotated, and to define the types of those annotations. This could include annotating things that you decided not to pull out of paragraphs into fields. For instance, if you decided not to pull out all mentions of cooking utensils from your recipe to make a list of required tools, you could annotate the mention of tools in recipe steps. (Or you could decide to do both, so you can validate one against the other.)</p>
<codeblock language="sam">
recipe: Hard Boiled Egg
    introduction:
        A hard boiled {egg}(food) is simple and nutritious.
    ingredients:: ingredient, quantity, unit
        eggs, 12, each
        water, 2, qt
    preparation:
        1. Place eggs in (pan){utensil} and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
    prep-time: 15 minutes
    serves: 6
    wine-match: champagne and orange juice
    beverage-match: orange juice
    nutrition:
        serving: 1 large (50 g)
        calories: 78
        total-fat: 5 g
        saturated-fat: 0.7 g
        polyunsaturated-fat: 0.7 g    
        monounsaturated-fat: 2 g    
        cholesterol: 186.5 mg    
        sodium: 62 mg    
        potassium: 63 mg    
        total-carbohydrate: 0.6 g    
        dietary-fiber: 0 g    
        sugar: 0.6 g    
        protein: 6 g    
</codeblock>
<p>Most <phrase><annotation type="concept">subject domain</annotation></phrase> languages are small, simple, and fairly strict in their constraints. This is as it should be. Since you have to design them, and the algorithms that translate them into the <phrase><annotation type="concept">document domain</annotation></phrase> for publishing, you don’t want them to be elaborate or full of different permutations of structure. If you find yourself needing a similar language for a related subject, it is usually better to create a new equally small, equally strict language for that subject rather than trying to make one language cover both.</p>
<p>A subject domain language should communicate with the author in terms that they understand. This means that the names of structures should make sense to them, but it also means that the how the formal structures break things up should make intuitive sense as well. For an author with experience in the field, a subject domain language should be such a good fit that they don’t really feel like they have to learn anything to use it. The vastly increases the <phrase>functional lucidity</phrase> of the language leaving more of the author’s attention free to focus on content, while at the same time providing constraints and guidance that make sure that things are complete and consistent.</p>
<p>It is easy to get carried away with breaking things down into finer and finer pieces to formally describe the subject matter in finer and finer detail. Remember that all of this is wasted unless it enables one of the structured writing algorithms that matter to you. Remember too that <phrase><annotation type="algorithm">authoring</annotation></phrase> and <phrase><annotation type="algorithm">conformance</annotation></phrase> are among the algorithms. Making your markup mysterious, difficult, or tedious to create in the name of more precisely modeling the subject matter does more harm than good if reduces <phrase>functional lucidity</phrase> without creating a compensating increase in quality or efficiency.</p>
<p>Moving your content to the subject domain, in other words, is about doing the simplest thing that works to achieve a given outcome of a given quality. Sometimes <phrase>MarkDown</phrase> is the simplest thing that works, but there are lots of quality, management, and production goals that are hard to meet with <phrase>MarkDown</phrase>. Going to elaborate <phrase><annotation type="concept">document domain</annotation></phrase> languages is often the next step people take in pursuit of those goals, but these are not simple. In many cases, the <phrase><annotation type="concept">subject domain</annotation></phrase> may be the simplest thing that works for these larger goals. But it make it so, you need to make sure that your subject domain languages are as simple as they can be to get the job done.</p>
</chapter>
