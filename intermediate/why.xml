<?xml version="1.0" encoding="UTF-8"?>
<chapter>
<title>Why structure writing?</title>
<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">hybrid markup language</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">DITA</annotation></phrase> <phrase><annotation type="language">DocBook</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">HTML</annotation></phrase> <phrase><annotation type="language">XML</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm">conformance algorithm</annotation></phrase> <phrase><annotation type="algorithm">conformance</annotation></phrase> <phrase><annotation type="algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract and merge algorithm</annotation></phrase> <phrase><annotation type="algorithm">extract and merge</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance algorithm</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">Content management systems</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase></p>
</annotations>
<index>
<row>
<type>concept</type>
<term>structured writing</term>
</row>
<row>
<type>concept</type>
<term>complexity</term>
</row>
</index>
<p>Creating content is a complex business. You have to research your subject matter and your audience. You have to figure out what needs to be said and how to say it to achieve your desired effect. You then have to record the content, manage it, and publish it, potentially to many different audiences and many different media. If you are part of an organization that creates a lot of content, you have to coordinate what you are doing with what everyone else in doing and make sure it all works together and serves the organization’s goals. Each of these things are complex tasks in themselves and they become all the more complex when you have to coordinate them all. Not everyone has the skills or the knowledge to do all these things well, and if too much of the complexity falls on one person’s shoulders, it will limit their ability to perform well or deliver on time. In particular, writing well is an activity that requires the whole of the writer’s attention. Any part of the complexity of the content creation process that divides the writer’s attention makes it more difficult for them to write quality content.</p>
<p>You can’t reduce the fundamental complexity of content creation. All that stuff has to get done, and it is all difficult in one way or another. All you can do is to make sure that the inherent complexity is handled by the people or processes that are best equipped to deal with it. Managing a content creation process is all about partitioning and distributing the complexity of content creation in the right way.</p>
<p>Every content organization practices the partitioning and distribution of content creation. Newspapers do not make reporters drive the delivery trucks. Publishing houses do not let authors design book covers (much as they might want to). Recognizing that spotting your own mistakes is difficult, wise organizations partition the job of editing and proofreading content from the job of writing it.</p>
<p>What happens if the inherent complexity of content creation is not managed properly? Complexity cannot be destroyed, so it has to go somewhere. If no one in the publishing organization handles it, it falls through to the reader. If a piece of content is missing information the reader needs, then the burden of finding the missing information falls on the reader. If the reader can’t understand the terms used, or read the font chosen, or find content to explain an unfamiliar concept, or get the information they need when they need it, or tell current information from outdated, that is complexity falling through the content creation process to land on the reader’s head. The reader must then either handle the complexity themselves or abandon the content.</p>
<p>Another name for this is poor quality content. Poor quality content is the direct result of the complexity of content creation falling through to reader instead of being handled in the organization that produced it. The way for an organization to consistently create quality content is to make sure that every piece of the inherent complexity of content creation is directed to a competent and adequately resourced person or process in the organization itself so that none of it falls through to the reader.</p>
<p>To distribute complexity, you must partition it into separate pieces along clean lines without dropping any of the complexity in the process. For example, the style sheets in a word processor partition the complexity of consistently formatting a document by allowing writers to apply named styles to paragraphs. This partitions the task of designing the look of a document, and defining styles to implement that design, and directs it to the stylesheet designer. The writer is left with the nominally easier job of assigning named styles to paragraphs as they write. (I say nominally because, as we know, styles are rarely used correctly, or at all. Mere technical partitioning often fails because it fails to fully encapsulate the complexity it is attempting to partition.)</p>
<p>Partitioning and redistributing complexity is not just about shifting complexity from one person to another. It is also about shifting complexity from people to algorithms. Most complex tasks have repeatable elements in them. A design question that has been settled once can be implemented over and over again without having to redo the design work. If one piece of content is formatted one way, chances are many other pieces can be formatted the same way. Algorithms are great at doing the same task the same way over and over.</p>
<p>Writing an algorithm to do a repetitive task redistributes complexity from the person who used to do the task to the algorithm, but also to the person who writes and maintains the algorithm. For example, using a CSS stylesheet to format lists redistributes the task of designing list formatting from the writers, whose job is to know what they are talking about and how to say it, to a publications designer, whose job it is to know how to attractively format lists and how to code good CSS.</p>
<p>Using CSS partitions the complexity of formatting a page so that we can distribute the complexity of formatting away from the writer.  Now the writer does not have to know about formatting or design, and the designer does not have to know about writing or the subject matter. This simplifies the writer’s life, allowing them to focus on writing. It also simplifies the designers life, allowing them to concentrate on design. The result is better writing and better, more consistent, design.</p>
<p>CSS does an effective job of partitioning the complexity of formatting, but CSS is itself complex. Introducing CSS in to our process means introducing new complexity.</p>
<p>All tools introduce new complexity into the processes they serve. People have to design the tools and build the tool and learn to use the tool, and maintain the tool. All this is new complexity that did not exist before. We accept this new complexity into our processes because a good tool allows us to distribute our existing complexity more efficiently, so that less of the complexity falls on the people and more on the tools, and so that each person in the system only has to deal with the complexity that they are able to cope with. Managing where the complexity falls is ultimately much more productive than merely minimizing total complexity.</p>
<p>Introducing CSS into your web publishing process increases the total complexity in the system. There is now a new language that someone has to learn, and possibly tools that go with that language. But introducing CSS allows you to better manage how complexity is handled in your organization by directing non-writing-related complexity away from writers and by directing design complexity to designers, who are better qualified to handle it.</p>
<p>Adding complexity to the system in order to distribute complexity better is pervasive today. The complexity of the technology stack that lets you send an email or a text message is staggering, but its directs the complexity of communicating over distance away from the users towards systems and the people who maintain them for a huge net gain in productivity.</p>
<p>The content creation stack is similarly complex. Yet the content creation stack does not do such a good job of partitioning and distributing all of the complexity of content creation, with the result that complexity is pervasively being dumped on the reader in the form of poor quality content.</p>
<p>There is some very elaborate partitioning and distribution going on the content creation stack, in the form of complex content management and publishing systems, as well as new roles for human contributors, such as information architects and content strategists. However, most of the content creation going on in the content stack today is taking place using WYSIWYG authoring interfaces from the desktop publishing era.</p>
<p>In its time, desktop publishing represented an interesting repartitioning and redistribution of the complexity of content creation. At the time, creating a formatted printed document generally meant handing off a manuscript from an author to a typesetter for re-keying, followed by mechanical pasteup by a page-layout artist, the preparation of proofs by a printer, correction of proofs, and the final printing. This was a complex and time consuming process that cost a lot of money and had many points where failure could occur or error be introduced. The various function were well partitioned from each other, but the overhead of passing information from one to another was cumbersome and time consuming.</p>
<p>Desktop publishing eliminated much of that overhead by putting all the tools of document creation -- writing, design, layout, proofing -- in the hands of a single operator. The problem with this model are twofold. First, it put too much of the complexity on one person: the writer. The writer’s attention is divided between multiple tasks, and since attention is a finite resource, this meant the quality of writing, design, layout, and proofing all suffered. The fact that desktop publishing skill became a major hiring criteria for writers (and remains so today) shows hoe the focus was taken off writing and knowledge of subject matter and placed on the ability to manage the complexity of the publishing process.</p>
<p>Secondly, while it removed a lot of complexity of vertical communication between writer, designer, and typesetter, it made every writer into an island, pretty much eliminating and kind of horizontal coordination between writers. Achieving any kind of horizontal coordination in this environment was difficult, complex, and error prone. Everyone worked on their own book as a separate project.</p>
<p>The division of the writer’s attention and the lack of horizontal coordination meant the huge amounts of complexity were going unhandled in large content systems, with the inevitable result that the complexity was dumped on the reader in the form of poor quality content.</p>
<p>Content management system have tried very hard to partition and redirect the complexity of that horizontal coordination, but with results are are, at best, incomplete. Meanwhile, the advent of the Web had brought a new set of challenges. A modern website is not a library of independent volumes but a complex hypertext consisting of many smaller pieces of content related in much more complex ways than paper documents ever were. Search engines and social networks have profoundly changed how reader seek and use content. Meanwhile, many organization are trying to deliver content to both the paper model and the Web model simultaneously. Content creation and delivery has got a lot more complex.</p>
<p>There is a limit to how good a job a WYSIWYG writing and editing process can do at partitioning and distributing the complexity of an organization’s content creation process. So much of the complexity that is overwhelming our processes and people (and thus falling through to our readers) lies in the complexity of the relationship within and among individual pieces of content, and in the demands of modern information design.</p>
<p>To successfully partition and distribute this complexity we need to partition and distribute elements of the information design and writing function themselves. This requires the use of techniques that we have come to call structured writing.</p>
<p>The fundamentals of these techniques are not new. When we use CSS to separate formatting from our HTML content, we are using exactly the same techniques as those we class as structured writing. In fact, HTML is a form of structured writing, as we shall see. It is just not a structured writing format that allows us to partition and distribute all of the complexity of content creation that we may encounter in our organization.</p>
<p>In fact, most of the techniques used in desktop publishing and content management tools are structured writing techniques. They partition and distribute the complexity of content creation by imposing certain structures and constraints on the content system. The systems we called “structured writing” systems today are using the same techniques, but they are partitioning and distributing complexity differently in an attempt to better handle that complexity and produce better content more efficiently.</p>
<p>Alas, not every structured writing system does a good job of distributing complexity appropriately for every organization. Many merely move it from the shoulders of one group to the shoulders of another without regard to whether those shoulders are broad enough to bear the additional burden. Far too often, content management installations are designed and implemented with an eye to solving one part of the content management complexity, rather than with an eye to how content complexity is distributed and handled throughout your whole content system. Tools and systems designed for one purpose are almost always careless about where they deflect the complexity they don’t handle. In many cases, while they take the pressure off one group or function, they add to the total amount of unhandled complexity in the system. This is a big part of why so many content management systems fail and so many organizations hate their content management system.</p>
<p>This book seeks to provide a comprehensive overview of how different structured writing techniques can be used to partition and distribute the complexity of content creation. It does not advocate for any one system. Nor will it tell you exactly which combination of techniques and tools will be right for your organization. Different organizations have different kinds of complexity to deal with and need to distribute it in different ways to maximize the quality of the content they produce. Finding the right combination of techniques for your organization is up to you. Hopefully, though, this book will give your the information you need to figure out what will work best, whether that means adopting or adapting an existing system or building all or parts of a system for yourself.</p>
<p>Hopefully, the book will give you the tools to plan how and where you want to distribute the parts of the content creation process in your organization, which will put you in a much better position to determine how close the features of one system or another come to providing the partitioning and distribution of complexity that is right for your organization.</p>
<p>Most content systems have never  seriously attempted to minimize the amount of complexity they dump on the reader. Quality and process have largely been treated as separate concerns, as if the process and its demands had no influence, for good or bad, on the quality of content that writers produced.</p>
<p>The idea that you can build quality into a process by managing the complexity of the design and production process, though well accepted in other fields, has not been widely considered in content. To a large extent, where we have sought process improvements, they have been in the areas of publishing and content management, not in content itself (despite the fact that most publishing and management problems originate in the content). Where structured writing tools have replaced desktop publishing or word processing tools it has largely been for process goals. But a more holistic view would show that process and quality are intimately related, and the treating them holistically can significantly improve both.</p>
<p>Today there are several compelling reasons to take another look at the relationship between process and content quality:</p>
<ul>
<li>
<p>The importance of design consistency on comprehension and acceptance is perhaps better understood today than ever before. This is the age of user experience, and the user experience of content is a vital concern if we want to get our message across. Research shows that modern readers engage in information foraging behavior rather than systematic research. The cost of each information transaction weight heavily on their decision to abandon the search of look elsewhere. Providing a consistent and effective information foraging experience across a large content set requires a degree of consistency, clarity, and navigability that is hard to achieve with the uncoordinated and unguided activity of many separate authors.</p>
</li>
<li>
<p>While measuring content quality and impact is still far from easy, we now have far more ways to measure its use and impact than we ever have before. Moreover, we have to means to make those measurements meaningful and turn them into concrete action because we can define and test repeatable content patterns. As we have noted (<citation type="nameref" value="chapter.repeatability"/>) repeatability is key to testing. Unless we can test repeatable patterns we are only ever testing individual items and guessing at best to interpret the success of failure of one item or to carry its lessons over to other items.</p>
</li>
<li>
<p>The advent of the Web, which has radically changed our information architectures -- how people access and use our content -- has introduced a new set of complexities into the content process. In particular, it has changed the scale as which content is organized and accessed, so that it is no longer feasible for a single author to own a single discrete deliverable. We are now producing smaller content units that are related to each other in complex ways. Such units are easier to define repeatable testable structures for, while the complexity and scale of their relationships is impossible to manage adequately without algorithmic help.</p>
</li>
<li>
<p>The advent of the Web has also brought new customer expectations. In the paper age, people accepted that research was hard work, something you had to learn to do that the you had to devote considerable energy and resources to if you hope to be successful. Today, people expect to type a query into Google and get an answer. This does not mean all complexity has disappeared from the lives of information seekers, but it does mean that they expect to address that complexity with much simpler tools and processes: mostly by searching and following links. Research shows that people will follow an information scent through content if it keeps getting stronger. But in order to make our readers successful when the seek information in this fashion, we need a very different approach to information design and information architecture. Information seeking does not end with a search result. Readers move trough content to the information they need. We need to build navigability into the content itself. This requires a much more systematic approach to information design, one that is consistent across many contributors to the content set. Only structured writing techniques can achieve this consistency.</p>
</li>
<li>
<p>New tools make a different approach to partitioning and redirecting content complexity possible. Desktop publishing represented a radical repartitioning of the content system that sped up the production process by eliminating expensive hand-offs between different trades, but it did so at the expense of dumping a lot of complexity on writers. It did virtually nothing for the horizontal integration of content, or for any application of process to content quality issue. Each book was designed, written, and produced in separate silo. Content processes, including those using structured writing tools and languages such as <phrase><annotation type="language">DocBook</annotation></phrase> have been dominated by this model of production, which separated quality and integration issues from the publishing process, for decades now. But structured writing tools, along with their ancillary technologies for source control, content management, and automated publishing, do give us the capacity to build content quality controls into the overall content process, as I have shown in the overview of structured writing algorithms in this book.</p>
</li>
</ul>
</chapter>
