<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.publishing">
<title>Publishing</title>
<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">hybrid tagging language</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">DITA</annotation></phrase> <phrase><annotation type="language">DocBook</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">HTML</annotation></phrase> <phrase><annotation type="language">XML</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm">conformance algorithm</annotation></phrase> <phrase><annotation type="algorithm">conformance</annotation></phrase> <phrase><annotation type="algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract and merge algorithm</annotation></phrase> <phrase><annotation type="algorithm">extract and merge</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance algorithm</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">Content management systems</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase></p>
</annotations>
<index>
<row>
<type>concept</type>
<term>publishing algorithm</term>
</row>
</index>
<p>All structured writing must eventually be published. Publishing structured content mean transforming it from the domain in which it was created (<phrase><annotation type="concept">subject domain</annotation></phrase>, <phrase><annotation type="concept">document domain</annotation></phrase>, or the abstract end of the <phrase><annotation type="concept">media domain</annotation></phrase>) to the most concrete end of the media domain spectrum: dots on paper or screen.</p>
<p>In almost all structured writing tools, this process is done in multiple steps. Using multiple steps makes it easier to write and maintain code and to reuse code for multiple purposes.</p>
<p>In this chapter, I am going to describe the publishing process as consisting of four basic algorithms which I have mentioned in passing in earlier chapter: the synthesis, presentation, formatting, and encoding algorithms. These four stages are formalized in the <phrase><annotation type="tool">SPFE architecture</annotation></phrase>, which I will talk about later, but I think they are a fair representation of what goes on in most publishing tool chains, even if those tool chains donâ€™t divide responsibilities exactly as I describe them here, or make such clear separation between them as I do here.</p>
<section>
<title>The Rendering Algorithm</title>
<p>There is actually a fifth algorithm in the publishing chain, which we can call the rendering algorithm. The rendering algorithm is the one responsible for actually placing the right dots on the right surface, be that paper, screen, or a printing plate. But this is a low-level device-specific algorithm and no one in the structured writing business is likely to be involved in writing rendering algorithms. The closest we ever get is the next step up, the encoding algorithm.</p>
<p>The rendering algorithm requires some form of input to tell it where to place the dots. In writing, this usually comes in the form of something called a <phrase><annotation type="tool">page description language</annotation></phrase>. Like it sounds, this is a language for describing what goes where on a page, but in higher level terms that describing where each dot of ink or pixel of light is placed. A page description language deals in things like lines, circles, gradients, margins, and fonts.</p>
<insert item="../graphics/rendering.png" type="image"/>
<p>One example of a page description language is <phrase><annotation type="language">PostScript</annotation></phrase>. Here is the PostScript code for drawing a circle:</p>
<codeblock language="PostScript">
100 100 50 0 360 arc closepath
stroke
</codeblock>
<p>This code is basically moving a virtual pen over a virtual output device; the equivalent of a hand guiding a pen over paper. But it is a much lower-level operation than we need to worry about in structured writing.</p>
</section>
<section>
<title>The Encoding Algorithm</title>
<p>Since most writers are not going to write directly in a page description language, the page descriptions for your publication are almost certainly going to be created by an algorithm. I call this the encoding algorithm since it encodes your content in the page description language.</p>
<p>While it is possible that someone responsible for a highly specialized publishing tool chain may end up writing a specialized encoding algorithm, most encoding algorithms are going to be implemented by existing tools that translate formatting languages into page descriptions languages.</p>
<p>There are several formatting languages that are used in content processing. They are often called typesetting languages as well. <phrase><annotation type="language">XSL-FO</annotation></phrase> (XSL - Formatting Objects) is one of the more commonly used in structured writing projects. <phrase><annotation type="tool">TeX</annotation></phrase> is another.</p>
<insert item="../graphics/encoding.png" type="image"/>
<p>Here is an example of XSL-FO that we looked at in <citation type="nameref" value="chapter.single-sourcing"/>:</p>
<codeblock language="XSL-FO">
&lt;fo:block space-after="4pt"&gt;
   &lt;fo:wrapper font-size="14pt" font-weight="bold"&gt;
     Hard Boiled Eggs
   &lt;/fo:wrapper&gt;
&lt;/fo:block&gt;
</codeblock>
<codeblock>
</codeblock>
<p>You process XSL-FO using an XSL-FO processor such as <phrase><annotation type="tool">Apache FOP</annotation></phrase>. Thus the XSL-FO processor runs the encoding algorithm, producing a page description language such as <phrase><annotation type="language">PostScript</annotation></phrase> or <phrase><annotation type="language">PDF</annotation></phrase> as an output.</p>
<p>Writers are not likely to write in XSL-FO directly, though it is not entirely impossible to do so. In fact some boilerplate content such as front matter for a book does sometimes get written and recorded directly in XSL-FO. (I did this myself on one project.) But when you are constructing a publishing tool chain, you will need to select and integrate the appropriate encoding tools as part of your process.</p>
<p>The job of the encoding algorithm is to take a high level description of a page or a set of pages, their content and their formatting, and turn it into a page description language that lays out each page precisely. For publication on paper, or any other fixed-sized media, this involves a process called <phrase><annotation type="concept">pagination</annotation></phrase>: figuring out exactly what goes on each page, where each line breaks, and when lines should be bumped to the next page.</p>
<p>It is the pagination function, for instance, that figures out how to honor the keep-with-next formatting in an application like Word or FrameMaker. It also has to work out how to deal with complex figures such as tables: how to wrap text in each column, how to break a table across pages, and how to repeat the header rows when a table breaks to a new page. Finally, it has to figure out how to number each page and then fill in the right numbers for any references that include a particular page number.</p>
<p>This is all complex and exacting stuff and depending on your requirements you may have to pay some attention to make sure that you are using a formatting language the is capable of doing all this the way you want it done.</p>
<p>Also, you are going to have to think about just how automatic you want all of this to be. In a high-volume publication environment you want it to be fully automatic, but this could involve accepting some compromises. For example, it is not uncommon for writers and editors to make slight edits to the actual text of a document in order to make pagination work better. This is very easy to do when you are working in the <phrase><annotation type="concept">media domain</annotation></phrase> in an application like <phrase><annotation type="tool" specifically="Microsoft Word">Word</annotation></phrase> or <phrase><annotation type="tool">FrameMaker</annotation></phrase>. If you end up with the last two words of a chapter at the top of a page all by itself, for instance, it is usually possible to find a way to edit the final paragraph to reduce the word count just enough to pull the end of the chapter back to the preceding page. This sort of thing gets much harder to do when you are writing in the <phrase><annotation type="concept">document domain</annotation></phrase> or the <phrase><annotation type="concept">subject domain</annotation></phrase>, particularly if you are <phrase><annotation type="algorithm">single sourcing</annotation></phrase> content to more than one publication or <phrase><annotation type="algorithm" specifically="content reuse">reusing content</annotation></phrase> in many places. An edit that fixes one pagination problem could cause another, and a major reason for writing in those domains it to take formatting concerns off the authorâ€™s plate.</p>
<p>For Web browsers and similar dynamic media viewers, such as E-Book readers or help systems, the whole pagination process takes place dynamically when the content is loaded into the view port, and it can be redone on the fly if the reader resizes their browser or rotates their tablet. This means the publisher has very little opportunity to tweak the pagination process. They can guide it by providing rules such as keep-together instructions through things like <phrase><annotation type="language">CSS</annotation></phrase>, but they obviously cannot hand tweak the text to make it fit better each time the view port is resized.</p>
<p>The formatting language for these kinds of media is typically <phrase><annotation type="tool">Cascading Style Sheets</annotation></phrase> (CSS).</p>
</section>
<section>
<title>The Formatting Algorithm</title>
<p>The job of the formatting algorithm it to generate the formatting language that drives the encoding and pagination process. The formatting algorithm produces the <phrase><annotation type="concept">media domain</annotation></phrase> representation of the content from content in the <phrase><annotation type="concept">document domain</annotation></phrase>.</p>
<insert item="../graphics/formattingpub.png" type="image"/>
<p>In the case of HTML output, the formatting algorithm generates HTML (with connections to the relevant CSS, JavaScript, and other formatting resources). This is the end of the publishing process for the Web, since the browser will perform the encoding algorithm internally. In the case of paper output, the formatting algorithm generates a formatting language such as <phrase><annotation type="tool">TeX</annotation></phrase> or <phrase><annotation type="language">XSL-FO</annotation></phrase> which is then fed to the encoding algorithm as implemented by a TeX or XSL-FO processor.</p>
<p>In some cases, organizations use word processing or desktop publishing applications to tweak the formatting of the output by having the formatting algorithm generate the input format of those applications (typically <phrase><annotation type="language">RTF</annotation></phrase> for Word and <phrase><annotation type="language">MIF</annotation></phrase> for FrameMaker). This allows them to exercise manual control over pagination, but with an obvious loss in process efficiency. In particular, any tweaks made in these applications are not routed back to the source content, so they will have to be done again by hand the next time the content is published.</p>
<p>This algorithm is usually the province of publication designers. One of the most elementary structured writing algorithms is to <phrase>separate content from formatting</phrase> (<citation type="nameref" value="chapter.separating"/>) which means removing formatting as one of the writerâ€™s concerns. Almost every structured writing implementation will involve writing formatting algorithms, however. Even if you use off-the-shelf languages like DITA or DocBook, you will have to write or modify formatting algorithms to get the specific formatting your want.</p>
</section>
<section>
<title>The Presentation Algorithm</title>
<p>The job of the presentation algorithm is to determine exactly how the content is going to be organized as a document. A pure document domain document is a representation of the presentation of the content. The job of the presentation algorithm produces a pure document domain version of the content. This may mean producing the entire presentation from purely subject-domain content, or simply handling the occasional subject-domain structure in a largely document domain file.</p>
<insert item="../graphics/presentation.png" type="image"/>
<p>The organization of content involves several things:</p>
<ll>
<li>
<label>Ordering</label>
<p>At some level, content forms a simple sequence in which one piece of information follows another. Authors writing in the document domain typically order content as they write, but if they are writing in the subject domain, they can choose how they order subject domain information in the document domain.</p>
</li>
<li>
<label>Grouping</label>
<p>At a higher level, content is often organized into groups. This may be groups on a page or groups of pages. Grouping includes breaking content into sections or inserting subheads, inserting tables and graphics, and inserting information as labeled fields. Authors writing in the document domain typically create these groupings as they write, but if they are writing in the subject domain, you may have choices about how you group subject domain information in the document domain.</p>
</li>
<li>
<label>Blocking</label>
<p>On a page, groups may be organized sequentially or laid out in some form of block pattern. Exactly how blocks are to be laid out on the displayed page is a media domain question, and something that may even be  done dynamically. In order to enable the media domain to do this, however, the document domain must clearly delineate the types of blocks in a document in a way that the formatting algorithm can interpret and act on reliably.</p>
</li>
<li>
<label>Labeling</label>
<p>Any grouping of content requires labels to identify the groups. This includes things like titles and labels on data fields. Again, these are typically created by authors in the <phrase><annotation type="concept">document domain</annotation></phrase>, but are almost always factored out when authors write in the <phrase><annotation type="concept">subject domain</annotation></phrase> (most labels indicate the place of content in the subject domain, so inserting them is a necessary part of reversing the factoring out of labels that occurs when you move to the subject domain).</p>
</li>
<li>
<label>Relating</label>
<p>Ordering, grouping, blocking, and labeling cover organization on a two dimensional page or screen. But content can be organized in other dimensions by creating non-linear relationships between pieces of content. This includes hypertext links and cross references.</p>
</li>
</ll>
</section>
<section>
<title>Differential presentation algorithms</title>
<p>As we saw in <citation type="nameref" value="chapter.single-sourcing"/>, the organization of content is an area where the <phrase><annotation type="concept">document domain</annotation></phrase> cannot ignore the differences between different media. Although the fact that a relationship exists is a pure document domain issue, how that relationship is expressed, and even whether it is expressed or not, is affected by the media and its capabilities. Following links in online media is very cheap. Following references to other works in the paper world is expensive, so document design for paper tends to favor linear relationships where document design for the web favors <phrase><annotation type="concept">hypertext</annotation></phrase> relationships. This is an area, therefore, in which you should expect to implement <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> and use different presentation algorithms for different media.</p>
<insert item="../graphics/differential.png" type="image"/>
</section>
<section>
<title>Presentation sub-algorithms</title>
<p>The presentation algorithm may usefully broken down into several  sub-algorithms, each dealing with a different aspect of the presentation process. How you subdivide your publishing algorithm is something you need to decide based on your particular business needs, but the following are some operations that it may well pay to treat as separate algorithms.</p>
<section>
<title>The linking algorithm</title>
<p>How content is linked or cross-referenced is a key part of how it is organized in different media, and a key part of differential single sourcing. We will look at the <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> in detail in <citation type="nameref" value="chapter.linking"/>.</p>
</section>
<section>
<title>The navigation algorithm</title>
<p>Part of the presentation of a document or document set is creating the table of contents, index, and other navigation aids. Creating these is part of the presentation process. Because these algorithms create new resources by extracting information from the rest of the content, it is often easier to run these algorithm in serial after the main presentation algorithm has run. This also makes it easier to change the way a TOC or index is generated without affecting your other algorithms.</p>
</section>
<section>
<title>The public metadata algorithm</title>
<p>Many formats today contain embedded metadata designed to be use by downstream processes to find or manage published content. One of the most prominent of these is <phrase><annotation type="language">HTML microformats</annotation></phrase> which is used to identify content to other services on the web, including search engines. This is a case of subject domain information being included in the output. Just as subject domain metadata allows algorithms to process content in intelligent ways as part of the publishing process, subject domain metadata embedded in the published content allows downstream algorithms (such as search engines) to use the published content in more intelligent ways.</p>
<p>If content is written in document domain structures, public metadata is generally created by writers as annotations on document domain structures. But if content is created in the subject domain, the public metadata is usually based on the existing subject domain structures. In this case the public metadata algorithm may translate subject domain structures in the source to document domain structures with subject domain annotations in the output.</p>
<p>This does not necessarily mean that the public metadata you produce is a direct copy of subject domain metadata you use internally. Internally, subject domain structures and metadata are generally based on your internal terminology and structures that meet your internal needs. Public terminology and categories may differ from the ones that are optimal for your internal use. But because this is subject domain metadata, and thus rooted in the real world, there should be a semantic equivalence between your private metadata and the public metadata (the public usually being more generic and less precise than the private). The job of the public metadata algorithm, therefore, is not merely to insert the metadata but sometimes to translate it to the appropriate public categories and terminology.</p>
</section>
<section>
<title>The document structure normalization algorithm</title>
<p>In many cases, content written in the subject domain will also include many document domain structures. If those document domain structures match the structures in the document domain formats you are creating, all the presentation algorithm needs to do is to copy them to the document domain. In some cases, however, the document domain structures in the input content will not match those required in the output, in which case you will need to translate them to the desired output structures.</p>
</section>
</section>
<section>
<title>The Synthesis Algorithm</title>
<p>The job of the synthesis algorithm is to determine exactly what content will be part of a content set. It passes a complete set of content on to the presentation algorithm to be turned into one or more document presentations.</p>
<p>Among other things, the synthesis domain resolves all management domain structures in the content (unless some are to be retained for downstream post-publication algorithms to work with). This means that it processes all inclusions and evaluates all conditions. The result is document domain or subject domain content with all of the management structures removed and replaced with the appropriate document or subject domain structures and content.</p>
<p>In the case of document domain content, processing the management domain structures yields a document domain structure which may then be a pass-through for the presentation algorithm (that is, the document domain markup may already express the desired presentation).</p>
<p>In the case of the subject domain content, processing management domain structures yields a definitive set of subject domain structures which can be passed to the presentation algorithm for processing to the document domain.</p>
<insert item="../graphics/synthesis.png" type="image"/>
</section>
<section>
<title>Differential synthesis</title>
<p>We noted above that you can use differential presentation to do <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> were two publications contain the same content but organized differently. If you want two publications in different media to have differences in their content, you can do this by doing differential synthesis and including different content in each publication.</p>
<insert item="../graphics/differential-synthesis.png" type="image"/>
</section>
<section>
<title>Synthesis sub-algorithms</title>
<p>The synthesis algorithm can involve a number of sub-algorithms, depending on the kind of content you have and its original source.</p>
<section>
<title>The inclusion algorithm</title>
<p>If your content contains <phrase><annotation type="concept">management domain</annotation></phrase> include instructions, such as we identified in discussing <phrase><annotation type="algorithm" specifically="content reuse">the reuse algorithm</annotation></phrase> these must be resolved and the indicated content found and included in the synthesis.</p>
<p>As we noted in the chapter on <phrase><annotation type="algorithm" specifically="content reuse">the reuse algorithm</annotation></phrase> you can also include content based on subject domain structures, without any <phrase><annotation type="concept">management domain</annotation></phrase> include instructions. Such inclusions are purely algorithmic -- meaning that the author does not specify them in any way. It is the algorithm itself that determines if and when content will be included and where it will be included from. This too is the job of the inclusion algorithm.</p>
</section>
<section>
<title>The filtering algorithm</title>
<p>If your content contains <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">conditional structures</annotation></phrase> (filtering) they must be resolved as part of the synthesis process. In most cases, you will be using the same set of management domain structures across your content set, so maintaining your filtering algorithm separately makes it easier to maintain.</p>
<p>Again note that you may be filtering on <phrase><annotation type="concept">subject domain</annotation></phrase> structures as well (or instead of) on explicit <phrase><annotation type="concept">management domain</annotation></phrase> filtering instructions. Such filtering is, again, purely algorithmic, meaning that the author has no input into it. The filtering algorithm is then wholly responsible for what gets filtered in and out and why.</p>
</section>
<section>
<title>Coordinating inclusion and filtering</title>
<p>It is important to determine the order in which inclusion and filtering are performed. The options are to filter first, to include first, or to include and filter iteratively.</p>
<p>Generally you want the filtering algorithm to run before other algorithms in the synthesis process so that other algorithms do not waste their time processing content that is going to be filtered out. However, if you run the filtering algorithm before you run the include algorithm, any filtering that needs to happen on the included content will not get executed.</p>
<p>Doing inclusion before you filter addresses this problem, but creates a new one. If you include before you filter, you may end up including content based on instructions or subject domain structures that are going to be filtered out, which could then leave you with a set of included content that was not supposed to be there.</p>
<p>The preferred option, therefore, is to run the two algorithms iteratively. Filter your initial source content. When you filter in an include instruction, immediately execute the include and run the filtering algorithm on the included content, processing any further include instructions as they are filtered in.</p>
<p>The <phrase><annotation type="concept" specifically="rules-base processing">rules based approach to content processing</annotation></phrase> that we have looked at in this book makes this kind of iterative processing relatively easy. You simply include both the filtering and inclusion rules in one program file and make sure that you submit any included content for processing by the same rules the moment it is encountered.</p>
<codeblock language="pseudo">
match include
    process content at href
    continue
</codeblock>
</section>
<section>
<title>The extraction algorithm</title>
<p>In some cases you may wish to extract information from external sources to create content. This can include data created for other purposes, such as application code or data created and maintained as a canonical source of information, such as a database of features for different models of a car. We will look at the extraction and merge algorithms in <citation type="nameref" value="chapter.extract"/>.</p>
</section>
<section>
<title>The merge algorithm</title>
<p>In one sense, every structured writing is a merge algorithm. As we saw in <citation type="nameref" value="chapter.processing"/>, most algorithms consist of factoring into content information or metadata that was factored out as we moved the point of recording from the <phrase><annotation type="concept">media domain</annotation></phrase> to the <phrase><annotation type="concept">document domain</annotation></phrase> and the <phrase><annotation type="concept">subject domain</annotation></phrase>. But it is also possible, and often useful, to combine information from different sources to create a new set of content. For instance, if you are creating a reference for any kind of computer code or data, there is almost always a way to <phrase>extract</phrase> a lot of the information you need from the existing definitions of that code or data. Extracting the information from the source is both more economical and more reliable than rewriting it from scratch. But you will almost certainly want to add additional written information as well. So, if you write the additional information in a structured way that identifies the piece of extracted information it corresponds to, you can use a merge algorithm to pull the two together for publication. More about the merge algorithm in <citation type="nameref" value="chapter.merge"/>.</p>
</section>
<section>
<title>The resolve algorithm</title>
<p>When we create authoring formats for content creation, we should do so with the principal goal in mind of making it as easy as possible for authors to create the content we require of them (see <citation type="nameref" value="chapter.authoring"/>). This means communicating with them in terms they understand. This may include various forms of expression that need to be clarified based on context before they can be synthesized with the rest of the content. This is the job of the resolve algorithm. Its output is essentially a set of content in which all names and identifications are in fully explicit form suitable for processing by the rest of the processing chain.</p>
<p>Content written in the subject domain is not always written in a fully realized form. When we create subject domain structures, we put as much emphasis as we can on ease of authoring and correctness of data collection. Both these aims are served by using labels and values that make intuitive sense to authors in their own domain. For example, a programmer writing about an API may mention and markup a method in that API using a simple annotation like this:</p>
<codeblock language="sam">
To write a Hello World program, 
use the {hello}(method) method.
</codeblock>
<p>In your wider documentation set, there may be many APIs. To relate this content correctly in the larger scope you will need to know which API it belongs to. In other words, you need this markup:</p>
<codeblock language="sam">
To write a Hello World program, 
use the {hello}(method (GreetingsAPI)) method.
</codeblock>
<p>The information in the nested parentheses is a namespace identifier. A namespace specifies the scope in which a name is unique. For instance, in most families, we only use first names to refer to each other because our first names are unique in our families. But when we go to school or to work, we often find that there are other people with the same first name. We then add peopleâ€™s last names when referring to them. The last names serves as a namespace identifier. We may need to add more specific namespace identifiers as we deal with larger groups of people (such as their addresses). But we donâ€™t use the full namespace identifiers of our family members at home. We add them as needed when we deal with the wider world.</p>
<p>In this case, the method name <phrase><annotation type="code">hello</annotation></phrase> might occur in more than one API. The namespace specifies that this case of the name refers to the instance in the <phrase><annotation type="code">GreetingsAPI</annotation></phrase>.</p>
</section>
</section>
<section>
<title>Deferred synthesis</title>
<p>For static presentation, all synthesis happens before the material is presented. But if you are presenting content on the web, you can defer parts of the synthesis algorithm to the browser, which can synthesize and present content by making calls to web services or other back-end data source, or by making a request to code running on the server to synthesize and present part of the page.</p>
<!--  more? -->
</section>
<section>
<title>Combining algorithms</title>
<p>As we have seen, structured writing algorithms are usually implemented as sets of rules that operate on structures as they encounter them in the flow of the content. Since each algorithm is implemented as a set of rules, it is possible to run two algorithms in parallel by adding the two sets of rules together to create a single combined set of rules that implements both algorithms at once.</p>
<p>Obviously, care must be taken to avoid clashes between the two sets of rules. If two set of rules act on the same structure, you have to do something to get the two rules that address that structure to work together. (Different tools may provide different ways of doing this.)</p>
<p>In other cases, though, one algorithm needs to work with the output of a previous algorithm, in which case, you need to run them in serial.</p>
<p>In most cases, the major algorithms (synthesis, presentation, formatting, encoding, and rendering) need to be run in serial, since they transform an entire content set from one domain to another (or from one part of a domain to another). In many cases the sub-algorithms of these major algorithms can be run in parallel by combining their rule sets since they operate on different content structures.</p>
</section>
<section>
<title>The consistency challenge</title>
<p>The biggest issue for every algorithm in the publishing chain is consistency. Each step in the publishing chain transforms content from one part of the content spectrum to another, generally in the direction of the media domain.</p>
<p>The more consistent the input content is, the easier it is for the next algorithm in the chain to apply a simple and reliable process to produce consistent output, which in turn makes the next algorithm in the chain simpler and more reliable.</p>
<p>Building in consistency at source is therefore highly desirable for the entire publishing algorithm. This is an interesting problem because good content by it nature tends to be diverse. Content is the way that we convey the information that is by its nature less consistent and more prone to exceptions. It is the stuff that does not fit easily into rows and columns.</p>
<p>One approach to this problem is to write all the content in a single <phrase><annotation type="concept">document domain</annotation></phrase> language such as DocBook. Since all the content is written in a single language it is theoretically completely consistent and therefore should be easy to process for the rest of the tool chain.</p>
<p>The problem with this is that any document domain language that is going to be useful for all the many kinds of documents and document designs that many different organizations may need is going to contain a lot of different structures, some of which will be very complex and most of which will have lots of optional parts. This means that there can be thousands of different permutations of DocBook structures. A single formatting algorithm that tried to cover all the possible permutations could be very large and complex and potentially very hard to maintain.</p>
<p>Another alternative it to have authors write in small simple subject domain structures that are specific to your business and your subject matter. You would then transform these to a document domain language using the presentation algorithm. This document domain language could still be DocBook, but now that you control the DocBook structures that are being created by the presentation algorithms, you donâ€™t have to deal with all the complexities and permutation that an author might create in DocBook, just the structures that you know your presentation algorithm creates.</p>
<p>These subject domain documents would have few structures and few options and therefore few permutations. This would mean that the presentation algorithms for each could be simple, robust, and reliable, as well as easy to write and to maintain. You would also be able to do <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> by writing different presentation algorithms for each media or audience.</p>
<p>The trade-off, of course, is that you have to create and maintain the various subject domain formats you would need and the presentation algorithms that go with them. Itâ€™s a trade-off between several simple structures and algorithms and a few complex ones. This trade-off comes up time and time again in structured writing. We will see it again when we look at other algorithms.</p>
</section>
<section>
<title>Functional lucidity and a layered architecture</title>
<p>A layered publishing architecture can be very valuable in providing functional lucidity to a variety of authors. To build a publishing system that is capable of managing a wide variety of content, it is often necessary to create a lot of abstractions in your document markup. If you ask authors to write content directly in those abstract structures you may find that they struggle with the abstraction, and with the complexity and the range of options that go with a language that is designed to handle so many different source and publication types. Providing a set of separate authoring languages in the document or subject domain, can deliver functionally lucid authoring to different types of authors, greatly improving the authoring process.</p>
<p>At the same time, the simplicity of these special-purpose languages can allow you to be much clearer about what the names and labels mean in the context of that language. Providing and agreeing on precise meanings for terms is much easier the smaller the group of people you are dealing with and the smaller the range of subject matter you are addressing. We have relatively limited vocabularies and we reuse words and phrases between different domain of discourse all the time. Agreeing on what a term means across all domains of discourse is virtually impossible. Agreeing on what it means in a limited domain with a limited audience is much easier.</p>
<p>For purposes of rolling up content from many domains into one larger content set, you will definitely have situations in which the same names and labels are used to mean different things. But this is not a problem as long as you know which domain each piece of content comes from. In other words, every tagging language defines a set of names and labels for content in the context of a particular namespace.</p>
<p>Placing names into namespaces does not magically resolve all disagreements about what to call things in a wider information space. But it does allow for an <phrase><annotation type="role">information architect</annotation></phrase> to choose an definitive mapping of names from each namespace into the enterprise namespace. The results may still be disputable, but at least they will be consistent. And if they are disputed, and a different mapping is accepted, only the mapping has to change to put the new system into effect. As long as each pieces of content is tagged correctly according to the rules of its local namespace, it does not have to change just because the rules of the enterprise namespace change.</p>
<p>Achieving agreement (and, what is really more important, functional lucidity) within a local domain is easier in some domains than others. The <phrase><annotation type="concept">media domain</annotation></phrase> is highly concrete, so there really is not much room for disagreement there. Styles, though, are often given names from the document domain, as they are really a step into the document domain, and this can lead to disagreements because of the more abstract nature of the document domain.</p>
<p>The <phrase><annotation type="concept">document domain</annotation></phrase> is the most difficult place to achieve either agreement or functional lucidity. (By functional lucidity, I mean that the language seems easy to use and obvious when you are actually writing as opposed to when you are attempting to hammer out agreement in a committee room.) The document domain is inherently an abstract place, and there are always different ways to abstract from the concrete reality of web pages and books, particularly because of how different hypertext media domains are from paper media domains and the difficulty of truly abstracting beyond those differences. Thus you will frequently hear argument between the proponents of various document domain languages about the correctness and usability of their choices. For instance, partisans of Markdown may praise its functional lucidity (it is very easy to write in) which partisans of ReStructuredText may praise its greater abstraction and range of application.</p>
<p>The <phrase><annotation type="concept">management domain</annotation></phrase> is quite concrete, like the <phrase><annotation type="concept">media domain</annotation></phrase>, but more arbitrary. It consists either of commands or of management metadata, both of which are particular to a specific management system. Difficulties here are likely to be more about the management processes to be implemented rather than the correct naming of things.</p>
</section>
</chapter>
