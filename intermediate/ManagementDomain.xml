<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.management-domain">
<title>The Management Domain: an Intrusion</title>
<index>
<row>
<type>concept</type>
<value>management domain</value>
</row>
</index>
<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">hybrid tagging language</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">DITA</annotation></phrase> <phrase><annotation type="language">DocBook</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">HTML</annotation></phrase> <phrase><annotation type="language">XML</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm">conformance algorithm</annotation></phrase> <phrase><annotation type="algorithm">conformance</annotation></phrase> <phrase><annotation type="algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract and merge algorithm</annotation></phrase> <phrase><annotation type="algorithm">extract and merge</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance algorithm</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">Content management systems</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase></p>
</annotations>
<p>So far I have talked about three domains that content passes through and in which it can be recorded: the <phrase><annotation type="concept">media domain</annotation></phrase>, the <phrase><annotation type="concept">document domain</annotation></phrase>, and the <phrase><annotation type="concept">subject domain</annotation></phrase>. But there is a forth domain that intrudes into this picture: the management domain.</p>
<p>Why do I call the management domain an intrusion? Because while the subject, document, and media domains are all about recording the content itself, the management domain is not about the content, but about the process of managing it. Here is the example we looked at in <citation type="nameref" value="chapter.subject-domain"/>:</p>
<codeblock language="xml">
&lt;section publication="Wine Weenie"&gt;
    &lt;title&gt;Wine match&lt;/title&gt;
    &lt;p&gt;Pinot Noir&lt;/p&gt;
&lt;/section&gt;
&lt;section publication="The Teetotaler's Trumpet"&gt;
    &lt;title&gt;Suggested beverage&lt;/title&gt;
    &lt;p&gt;Lemonade&lt;/p&gt;
&lt;/section&gt;
</codeblock>
<p>Here the <phrase><annotation type="code">publication</annotation></phrase> attribute on the <phrase><annotation type="code">section</annotation></phrase> element is management domain metadata. It does not specify the formatting or organization of the document or the subject matter of the content. It specifies which publication the content should appear in, which is a management matter.</p>
<p>This idea of placing management metadata in the content itself is something that is unique to structured writing. When you manage unstructured content, the content file contains just the content.<citation type="idref" value="1"/> Any management <phrase><annotation type="concept">metadata</annotation></phrase> related to the content is contained in a separate file or a so kind of <phrase><annotation type="tool">content management system</annotation></phrase>. But this approach limits how fine-grained your management of the content can be. You can only manage content at the file level. Because structured writing makes it possible to address, and therefore manage, individual content structures within a file, you can extend management structures and management metadata into the content itself.</p>
<footnote id="1">
<p>As we noted in <citation type="nameref" value="chapter.definition"/>, all content is structured. What matters is, what purpose is it structured for. So “unstructured” here means unstructured relative to your requirements. If you don’t create or choose a format that supports the management metadata you need at the content level, you can only manage that content at the file level.</p>
</footnote>
<section>
<title>Example: Including boilerplate content</title>
<p>For example, let’s say you have a standard warning statement that you are required to include in a document wherever you have a dangerous procedure. Structured writing is all about factoring out invariants, and the invariant here is that this warning statement must appear whenever you describe a dangerous procedure.</p>
<p>Just as we extracted formatting information into a separate file when we moved content from the media domain to the document domain, we now extract the invariant warning from the document and place it in a separate file. Any place we want this warning to occur, we insert an instruction to include the contents of the file at that location.</p>
<codeblock language="sam">
procedure: Blow stuff up
    &gt;&gt;&gt;(files/shared/admonitions/danger)
    step: Plant dynamite.
    step: Insert detonator.
    step: Run away.
    step: Press the big red button.
</codeblock>
<p>In the SAM markup above the <phrase><annotation type="code">&gt;&gt;&gt;</annotation></phrase> is an insert command. It inserts the content of the file located at <phrase><annotation type="code">files/shared/admonitions/danger</annotation></phrase>.</p>
<!-- The sample above is not valid SAM because the type of the insert is not given -->
<!-- Using SAM would be confusing. Could use 'file' but that is not standard. -->
<p>Why is this operation part of the management domain, rather than the document domain? Because it deals with a system operation: Locating a file in the system and loading its contents. If we were purely in the document domain, the author would be the one performing this operation: finding the file with the warning in it, opening it, and copying the contents into the document. The insertion instruction is just that: an instruction. It is not a declaration about the subject matter or structure of a document, such as we find in subject domain or document domain markup. It is either an instruction to a machine to perform an operation. The management domain consists of instructions or the declaration of data required to perform a management function.</p>
<p>Different structured writing systems have different instruction sets for handling the situation described above. In <phrase><annotation type="tool">DITA</annotation></phrase>, for instance, this use case is handled using something called a <phrase><annotation type="structure" namespace="DITA">conref</annotation></phrase> or a <phrase><annotation type="structure" namespace="DITA">conkeyref</annotation></phrase>. In Docbook it can be handled using a generic XML facility called <phrase><annotation type="tool">XInclude</annotation></phrase>. We will examine this case in greater detail in <citation type="nameref" value="chapter.reuse"/>.</p>
</section>
<section>
<title>An alternative approach in the subject domain</title>
<p>There is another way to handle this situation, this time using the subject domain. As we saw in <phrase><citation type="nameref" value="subject_domain">the previous chapter</citation></phrase>, factoring out invariant text is a feature of the subject domain. To understand the subject domain approach to this problem, remember what the invariant rule is here: A dangerous procedure must have a standard warning.</p>
<p>The management domain approach to this is to allow authors to insert the standard warning so that it is only stored once instead of being repeated in every procedure (something that is often called <phrase><annotation type="concept">content reuse</annotation></phrase>). Notice that the management domain markup does not encapsulate our invariant rule that dangerous procedures must have a standard warning. It just provides a generic mechanism for inserting content as a reference to a file rather than copying and pasting. It leaves it entirely up to the author to remember and enforce the rule about dangerous procedures.</p>
<p>The subject domain approach, on the other hand, is all about the invariant rule itself. Specifically, it expresses the aspect of the subject domain that triggers the rule: whether a procedure is dangerous or not:</p>
<codeblock language="sam">
procedure: Blow stuff up
    is-it-dangerous: yes
    step: Plant dynamite.
    step: Insert detonator.
    step: Run away.
    step: Press the big red button.
</codeblock>
<p>This markup simply records that this procedure is dangerous. This retains the information on which our invariant rule is based, but factors out the action to be taken. Rather than asking authors to remember to include the file (and how to included it, and how to find it) we delegate that responsibility to the <phrase><annotation type="concept">presentation algorithm</annotation></phrase>. It is now the algorithm, not the writer, that needs to remember to include the material in <phrase><annotation type="code">files/shared/admonitions/danger</annotation></phrase> whenever the <phrase><annotation type="code">is-it-dangerous</annotation></phrase> field of a <phrase><annotation type="code">procedure</annotation></phrase> structure is set to “yes”. This is the sort of task that algorithms are much better at than humans.</p>
<p>Of course, the human writer does still have a job to do here. They have to remember set <phrase><annotation type="code">is-it-dangerous</annotation></phrase> to “yes”. But we can make remembering to do this much easier if we make <phrase><annotation type="code">is-it-dangerous</annotation></phrase> a required field in the procedure structure. In other words, we set up our structured writing language in such a way that an error will occur if <phrase><annotation type="code">is-it-dangerous</annotation></phrase> is not specified. Now the writer is forced to answer the question “yes” or “no” for every procedure they write.</p>
<p>This approach makes the writer’s job much easier because they not only get reminded of the need to address the question of danger with every procedure, they are also asked it in a way that does not require them to know anything about how the content management system works, what warning text is required, or were it is located. They are recording a fact, not giving an instruction.</p>
<p>One the other hand, this approach only factors out the reuse of one particular piece of content -- the warning for dangerous procedures. If you had multiple such invariant rules about different kinds of subject matter you would need separate subject domain structures for each of them, whereas a single management domain include instructions would let authors handle them all.</p>
<p>On the other other hand, if you have many such invariant rules, and you expect all of them to be enforced by authors from memory, your are going to limit your pool of authors to a few highly trained individuals, and even then they are still likely to miss some instances. The cost of ensuring full compliance with all these rules without subject domain markup to enforce the constraints could be quite high.</p>
</section>
<section>
<title>Hybrid approaches</title>
<p>It is not always an either/or decision to use pure <phrase><annotation type="concept">management domain</annotation></phrase> or pure <phrase><annotation type="concept">subject domain</annotation></phrase> approaches. Management domain structures tend to be used in generic document domain languages, since such languages are not designed to be specific to any particular subject matter. Nonetheless, such languages often have roots in particular fields and sometimes include subject-domain structures from those fields. Both DocBook and DITA, for instance, originated in the field of software documentation and both include structures related to the subject of software, such as code blocks and elements for describing user interface elements.</p>
<p>In some cases, such languages can mix subject domain elements into their management structures. One example is the <phrase><annotation type="structure" specifically="@product" namespace="DITA">product</annotation></phrase> attribute, which is part of DITA’s conditional text processing system.</p>
<p>In DITA, you can add the <phrase><annotation type="structure" specifically="@product" namespace="DITA">product</annotation></phrase> attribute to a wide variety of elements. You can then set a value for products in the build systems and any element with the <phrase><annotation type="structure" specifically="@product" namespace="DITA">product</annotation></phrase> attribute will only be included in the final output if it matches one of the product values specified in the build.</p>
<codeblock language="DITA">
&lt;p&gt;The car seats &lt;ph product="CX-5"&gt;5&lt;/ph&gt;&lt;ph product="CX-9"&gt;7&lt;/ph&gt;&lt;/p&gt;
</codeblock>
<p>DITA can afford to use this bit of subject domain markup for products because product variations are an extremely common reason for using conditional text processing in technical communication, the area for which DITA was created. (Through a process called “<phrase><annotation type="concept">specialization</annotation></phrase>”, DITA can add other subject domain attributes for conditional processing in other subject areas.)</p>
<p>The reason I call this a hybrid approach is that the DITA product attribute does not exist merely to declare that a piece of text applies to a particular product. It is specifically a conditional processing attribute. That is, it is an instruction, even though it is phrased as a subject domain declaration.</p>
<p>To appreciate the difference, consider that there is another approach to documenting multiple versions of a product. Rather than generating a separate document for each product variant, you could create a single document that covered all product variants and highlighted the differences between them. A pure subject domain approach would support either approach by simply recording the data for each variant:</p>
<codeblock language="sam">
seats:
    cx-5: 5
    cx-9: 7
</codeblock>
<p>That is not something that the product attribute supports:</p>
<codeblock language="DITA">
&lt;p&gt;The car seats &lt;ph product="CX-5"&gt;5&lt;/ph&gt;&lt;ph product="CX-9"&gt;7&lt;/ph&gt;&lt;/p&gt;
</codeblock>
<p>This markup is only designed to produce a CX-5 or CX-9 specific document. It is not designed to support the production of a document that covers both cars at once because it does not specify that the values 5 and 7 are numbers of seats. That information is in the text, but not in a form that a publishing algorithm could reliably locate and act on.</p>
<p>Also, creating a single document covering both cars is not the expectation that goes with creating the markup. It is not what the author is told the markup means. The markup is not a simple declaration of facts about each car. It is conditional text markup, and therefore an instruction.</p>
<p>Really, is it a contraction of the more explicitly imperative form (not actually used in DITA):</p>
<codeblock language="xml">
&lt;ph condition="product=CX-5"&gt;5&lt;/ph&gt;
</codeblock>
<p>While the introduction of subject domain names into management domain structures is an appropriate bit of semantic sugar for authors, this hybrid approach really remains firmly in the management domain.</p>
</section>
<section>
<title>Ad hoc management decisions</title>
<p>So far we have contrasted management domain and subject domain approaches to handling invariant rules. Sometimes the management decisions are being made ad hoc by writers as they write, not based on any invariant properties of the subject matter or document structure, and if the decisions affect only part of the content in a file, then the only way to record those decisions so that the publishing algorithms can act on them is to include management domain metadata in the content.</p>
<p>An example of this is content reuse. The safety warning example was a case of an invariant rule for including a fixed piece of content, which was, therefore, being reused. But there are other situations in which the same text, or substantially the same text, may appear in different places for ad hoc reasons, or for reasons where any rule would apply to so few cases that it would not be worth defining and modeling.</p>
<p>The obvious and traditional way of handling such cases is either to write the text again (if you are not aware that other instances exist, of where they are) or to cut and paste the text. The downside of this is that the text now exists in multiple places, which creates management headaches if you ever need to change it. It also costs more to research and write the same content over and over again.</p>
<p>If you do ad hoc reuse, by using some form of management domain include instruction, you partially solve these management problem because you can change the content in one place and it will automatically appear in its changed form the next time any of the documents that reuse it are republished. The content does not have to be researched, written, or edited multiple times.</p>
<!--  Move this to the reuse chapter? -->
<p>I say “partially solves”, because when reuse is not based on an invariant rule (and even when it is, if that rule is not encapsulated in subject domain markup), then it is up to the author to discover if a piece of content they are about to write already exists, locate it, and use it. The more potentially reusable content you have, the more difficult this search becomes, because there is more to search through. And unless the author remembers what all the pieces of reusable content are, they constantly have to ask themselves if the content they are about to write has already been written. This means they will end up searching for reusable content even when there isn’t any, but that search also takes time. Mistakes and omissions are inevitable, which means that when changes occur, you still have to search for duplicate instances of the content, and the time saved by not researching and writing the content again can be chewed up in all the processes around reusing content.</p>
<p>Successful reuse strategies, therefore, require a high level of discipline and management, whether or not that is provided by subject domain markup.</p>
<p>The management domain is used for other things besides reuse. We will look at some of these later in the book when we consider the various algorithms and structures found in structured writing.</p>
</section>
<section>
<title>The management domain and content management</title>
<p>So far I have talked about the management domain as in intrusion into structured writing. But it is worth looking at where that intrusion comes from. Management domain structures in structured writing are in intrusion from the <phrase><annotation type="algorithm">content management</annotation></phrase> process.</p>
<p>So far in this book I have talked about structured writing as a way to make content better. In other words, I have talked about it having a fundamentally rhetorical purpose: it is there to improve the text. And since we now live in a world of dynamic content delivery options, it is there to help us build better rhetorical structures that might be difficult to build and manage by hand.</p>
<p>The world of content management, on the other hand, exists mainly to manage the vast collection of content that many organizations own today, and the process by which it is created. Content management is a significant business problem quite apart from the rhetorical properties of the content. Many organizations adopt structured writing not for any rhetorical purpose, but as an enabler of content management processes.</p>
<p>Many content management processes involve finding, identifying, combining and publishing content from diverse sources. These processes often require that content meets certain constraints, which means that structured writing -- the application of constraints to writing -- is a useful content management tool.</p>
<p>Tools and processes that are designed primarily to tackle the content management problem, rather than the rhetorical problem, almost invariably use document domain structures with a significant injection of the management domain, though in these cases is might be more accurate to say that the document domain structures are being used as an extension of the management domain.</p>
<p>The focus of this book is the use of structured writing as a tool for rhetoric -- for making content better. As such, it will talk a lot more about the subject domain than would a text focused on content management. Nonetheless, as shown briefly here, the subject domain can have powerful content management features as well. I will look more at this in later chapters.</p>
</section>
</chapter>
