<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.document-domain">
<title>Writing in the Document Domain</title>
<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">hybrid tagging language</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">DITA</annotation></phrase> <phrase><annotation type="language">DocBook</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">HTML</annotation></phrase> <phrase><annotation type="language">XML</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm">conformance algorithm</annotation></phrase> <phrase><annotation type="algorithm">conformance</annotation></phrase> <phrase><annotation type="algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract and merge algorithm</annotation></phrase> <phrase><annotation type="algorithm">extract and merge</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance algorithm</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">Content management systems</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase></p>
</annotations>
<index>
<row>
<type>concept</type>
<term>media domain</term>
</row>
<row>
<type>concept</type>
<term>document domain</term>
</row>
<row>
<type>concept</type>
<term>subject domain</term>
</row>
</index>
<p>As we saw in <phrase><annotation type="concept" specifically="media domain">our examination of the media domain</annotation></phrase>, word processors and desktop publishing applications tend to straddle the divide between the media domain and the document domain. While they are built on a basic set of document domain objects -- pages, paragraphs, tables, etc. -- they use a WYSIWYG display to keep the author working and thinking mostly in terms of styles and formatting -- the concerns of the media domain. This makes it difficult to apply meaningful document domain constraints to the author’s work, or to record which constraints the author has followed. For that we need to move to the document domain.</p>
<p>The simplest reason for moving to the document domain is actually to enforce media domain constraints that are hard to enforce in the media domain itself. (In fact, the reason for moving to the next domain is often to enforce -- or factor out -- constraints in the previous domain. This is one of the consistent patterns we find in structured writing.)</p>
<p>Consider a list. You may want to impose a constraint that the spacing above the first item of a list must be different from the spacing between other items of the list. This is a media domain constraint -- it is about formatting, not the structure of the document -- but it is hard to enforce in the media domain. Most media domain applications create lists by applying styles to ordinary paragraphs. The usual way to apply the extra space above the first item is to create two different styles, which we can call first-item-of-list style, and following-item-of-list style. The first-item-of-list style is defined with more spacing above.</p>
<p>This creates a constraint that the author is required to follow. They are required to apply first-item-of-list style to the first item of a list and following-item-of-list style to the rest. Nothing in the word processor enforces this constraint. The author simply has to remember it. This creates two problems:</p>
<ol>
<li>
<p>It makes authoring a little bit harder (and all the little bits add up).</p>
</li>
<li>
<p>The author can get it wrong without anyone noticing. They may forget to apply first-item-of-list style or they may add a new first item to the list and not realize that the second item in the list now has first-item-of-list style.</p>
</li>
</ol>
<p>As we noted before, structured writing works by factoring out invariants. Most constraints are invariants -- that is, they are rules that apply to all instances of the same content structure (such as all lists must have extra space before the first item). The easiest way to enforce a constraint is not to enforce it on the author, but to factor it out altogether.</p>
<p>To do this, we create a list structure -- not a styled paragraph, but an structure that is specifically a list. The word processor version of a list is structured like this, as a flat list of styled paragraphs:</p>
<codeblock>
p{first-item-of-list}: Carrots
p{following-item-of-list}: Celery
p{following-item-of-list}: Onions
</codeblock>
<p>An explicit list structure looks like this:</p>
<codeblock language="SAM">
list:
    list-item: Carrots
    list-item: Celery
    list-item: Onions
</codeblock>
<p>List structures like this belong to the <phrase><annotation type="concept">document domain</annotation></phrase> because they are a common rhetorical tool that is not specific to any one subject area (<phrase><annotation type="concept">subject domain</annotation></phrase>) and can be formatted in a wide variety of ways (<phrase><annotation type="concept">media domain</annotation></phrase>).</p>
<p>Once we have a list object, we can create rules -- in a separate file -- about how lists are formatted. We are familiar with this from <phrase><annotation type="language">HTML</annotation></phrase>. Here’s that same structure in <phrase><annotation type="language">HTML</annotation></phrase> (actually, this is a slightly more specific structure, but we’ll get to that):</p>
<codeblock language="HTML">
&lt;ol&gt;
    &lt;li&gt;Carrots&lt;/li&gt;
    &lt;li&gt;Celery&lt;/li&gt;
    &lt;li&gt;Onions&lt;/li&gt;
&lt;/ol&gt;
</codeblock>
<p>Now we have a distinct list object, we can factor out our invariant list formatting rule into a separate file that contains list formatting rules. For HTML, this is usually done with a CSS stylesheet:</p>
<codeblock language="CSS">
li:first-child 
{
    padding-top: 5pt;
}
</codeblock>
<p>Now the correct spacing above lists is not something the author has to think about. In fact, it is not something they can manipulate even if they want to. Authors just create document domain list objects. Media domain list formatting rules have been factored out of the author’s world. The media domain constraint about spacing above a list will now be followed automatically and reliably by algorithms. Authoring gets a little bit simpler again (the author is already thinking “list” as the write) and the possibility of error is removed.</p>
<p>But wait! That’s fine if all lists are formatted exactly the same way, but we know that is not true. At very least, some lists are bulleted and some are numbered. And then there are nested lists, which are formatted differently from their parents, and specialized lists, like lists of ingredients, definitions, or function parameters. If we are going to create list structures in the <phrase><annotation type="concept">document domain</annotation></phrase> rather than applying list styles in the <phrase><annotation type="concept">media domain</annotation></phrase>, how do we make sure each of these types of lists gets formatted appropriately?</p>
<section>
<title>Extensibility</title>
<p>At this point it is worth looking at a very important feature of all structured writing systems -- extensibility. In media-domain word processing and desktop publishing programs, authors may need many different styles to format their documents, and these applications do not attempt to anticipate or provide all the styles every author might need. Some, like Word, come with a basic set of styles that may meet some basic needs, but all these programs let authors define new styles as well. The set of document domain objects in these programs is small and fixed, but the set of media domain styles is extensible -- you can create as many as you need.</p>
<p>A word processor or desktop publishing application that supports the definition of styles is essentially creating an extensible media domain environment. Styles are media domain structures that abstract out a set of style metadata that you can attach to a block of text to specify how it will be displayed. Every time you create a new style you are extending your set of media domain structures.</p>
<p>This need for extensibility is another common pattern in structured writing. If you are working in the media domain, you may need to extend your set of styles. If you are working in the document domain, you may need to extend your set of document structures.</p>
<p>If we need more than one type of list structure in the <phrase><annotation type="concept">document domain</annotation></phrase>, we need to extend our document domain language with new lists types. But how many types do we need?</p>
<p>One obvious formatting difference between lists is that some are numbered and some are bulleted. How does a formatting algorithm tell whether to use bullets or numbers to format a given list? One way would be to add a style attribute to specify bullets or numbers, but then the author would be working in the media domain again. To keep the author in the document domain, we need to create document domain structures that contain the metadata we need to make those decisions at the formatting stage.</p>
<p>The common way to handle bullets vs numbers is to create two different list structures, the ordered list and the unordered list. Different markup languages call them by different names -- <phrase><annotation type="structure" namespace="HTML">ol</annotation></phrase> and <phrase><annotation type="structure" namespace="HTML">ul</annotation></phrase> in HTML, <phrase><annotation type="structure" namespace="DocBook">orderedlist</annotation></phrase> and <phrase><annotation type="structure" namespace="DocBook">itemized-list</annotation></phrase> in DocBook, for example -- but they are conceptually the same thing. Thus the HTML example above is a little more specific than just being a list structure. It is an ordered list structure.</p>
<p>The choice of the terms “unordered” and “ordered” is important, because it focuses on the <phrase><annotation type="concept">document-domain</annotation></phrase> properties of a list -- whether its order matters -- rather than on its <phrase><annotation type="concept">media domain</annotation></phrase> properties -- bullets or numbers. Whether an ordered list should be formatted with numbers or letters or Roman numerals, belongs entirely to the <phrase><annotation type="concept">media domain</annotation></phrase>. It has been factored out of the <phrase><annotation type="concept">document domain</annotation></phrase> structures.</p>
</section>
<section>
<title>Context and Structure</title>
<p>Does the need for separate ordered and unordered list objects imply that we will need a separate document domain list structure for every possible way a list could be formatted in the media domain? No. In fact, that would really just be working in the media domain by proxy. When we work in the document domain we are specifically thinking in terms of document structures, not formatting, and so each document domain object we create needs to make sense in document domain terms, not media domain terms.</p>
<p>For example, consider nested lists. Items in a nested list are formatted differently, from the list that contains them. At minimum they are indented more and usually they have different number and bullet styles as well. In the <phrase><annotation type="concept">media domain</annotation></phrase>, we would need a different style for each level. However, we don’t need a separate nested list structure in the <phrase><annotation type="concept">document domain</annotation></phrase>. Instead, we express the fact that a list is nested by actually nesting it inside its parent list. For instance, we can nest one ordered list inside another ordered list:</p>
<codeblock language="HTML">
&lt;ol&gt;
    &lt;li&gt;
        &lt;p&gt;Dogs&lt;/p&gt;
        &lt;ol&gt;
            &lt;li&gt;Spot&lt;/li&gt;
            &lt;li&gt;Rover&lt;/li&gt;
            &lt;li&gt;Fang&lt;/li&gt;
            &lt;li&gt;Fluffy&lt;/li&gt;
        &lt;/ol&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;p&gt;Cats&lt;/p&gt;
        &lt;ol&gt;
            &lt;li&gt;Mittens&lt;/li&gt;
            &lt;li&gt;Tobermory&lt;/li&gt;
        &lt;/ol&gt;
    &lt;/li&gt;
&lt;/ol&gt;
</codeblock>
<p>In the <phrase><annotation type="concept">document domain</annotation></phrase> the inner and outer list are both identical <phrase><annotation type="code">ol</annotation></phrase>/<phrase><annotation type="code">li</annotation></phrase> structures. In the <phrase><annotation type="concept">media domain</annotation></phrase>, one will be formatted with Arabic numerals and the other with letters.</p>
<figure>
<title>One document domain object, two media domain styles</title>
<insert item="../graphics/nested-list.png" type="image"/>
<caption>
<p>Both the inner and outer lists are ordered list items in the document domain, but in the media domain they are formatted differently based on context.</p>
</caption>
</figure>
<p>In this case, the algorithm that formats the page distinguishes the inner and outer lists by looking at their parentage. For instance in CSS:</p>
<codeblock language="css">
ol&gt;li&gt;ol&gt;li
{
    list-style-type: lower-alpha;
}
</codeblock>
<p>This ability to distinguish structures by context is vital to structured writing. It enables us to reduce the number of structures we need to fully describe our content, particularly in the document and subject domains. It also allows us to name structures more logically and intuitively, since we can name them for what they are, not how they are to be formatted or for where they reside in the hierarchy of the document as a whole.</p>
<p>It also points out another important difference between the way media domain and document domain writing is usually implemented. The media domain almost always uses a flat structure with paragraphs, tables, etc. following one after the other in sequence. For instance, a nested list in Word is constructed as a flat sequence of paragraphs with different styles. Inner and outer lists are expressed purely by the indent applied to the paragraphs. (Word tries to maintain auto-numbering across such listed nest structured, but does not always get it right.)</p>
<p>In the document domain, document structures are usually implemented hierarchically. List items are <phrase><annotation type="italic">inside</annotation></phrase> lists. Nested lists are <phrase><annotation type="italic">inside</annotation></phrase> list items. Sections are <phrase><annotation type="italic">inside</annotation></phrase> chapters. Subsections are <phrase><annotation type="italic">inside</annotation></phrase> sections. Where the media domain typically only has before and after relationships (except in tables), the document domain typically adds inside/outside relationships to the mix. This use of nested, rather than flat, structures helps to create context, which helps to reduce the number of different structures you need.</p>
<p>Some <phrase><annotation type="concept">document domain</annotation></phrase> languages are more hierarchical than others. <phrase><annotation type="language">HTML</annotation></phrase> is relatively flat in structure. It has six different heading styles <phrase><annotation type="structure" namespace="HTML">H1</annotation></phrase> through <phrase><annotation type="structure" namespace="HTML">H6</annotation></phrase>. <phrase>Docbook</phrase>, a widely used <phrase><annotation type="concept">document domain</annotation></phrase> structured writing language, is much more hierarchical in structure and has only one element for the same purpose: <phrase><annotation type="structure" namespace="DocBook">title</annotation></phrase>. But DocBook’s <phrase><annotation type="structure" namespace="DocBook">title</annotation></phrase> element can occur inside 84 different elements, and therefore can potentially be formatted in 84 different ways based on context. In fact, it can potentially be formatted in more ways than that, since some of the elements that contain it can also be nested in other elements, creating even more contexts.</p>
<p>There is a balance to be struck here, however. Nested structures are harder to create and can be harder to understand. Often they require the writer to find just the right place in a hierarchical structure to insert a new piece of content, which is more difficult that simply starting a new paragraph in a word processor.</p>
<p>These considerations one another reason why there is more than one document domain language available in the world, and why extensibility is important. A single document domain language that captured all the document domain structures that anyone might want would be very large and very complex.</p>
<p>Writing an algorithm to transform a large unconstrained document domain language into the media domain would also be a daunting task, since it would need to have a rule to format every single combination of document domain structures that could occur in that language. With a large number of elements and few constraints on how they can be nested, the number of combinations would grow exponentially, making it impossible to handle them all correctly.</p>
<p>Worse, a universal document domain language would not express the individual and specialized document domain constraints that individual organizations need to manage the critical parts of their content creation and management processes. Much of the virtue of going to the document domain lies in the ability to impose such constraints, which means that the world needs many document domain languages.</p>
</section>
<section>
<title>Constraining structure</title>
<p>There are other reasons for working in the document domain beside abstracting out formatting rules. One of the main ones is to constrain how documents are structured. For example, lets say that you want to make sure that all graphics inserted into your documents have a figure number, a title, and a caption. This is a document domain constraint rather than a media domain constraint. The requirement for a graphic to have a figure number, title, and caption is one of document structure and organization and does not say anything about how the title or caption should be formatted, (which is a <phrase><annotation type="concept">media domain</annotation></phrase> concern).</p>
<p>In the media domain, you can make styles available for figure-numbers, titles, and captions, but you can’t enforce a rule that says all graphics must have these elements (which is, buy its very nature, a <phrase><annotation type="concept">document domain</annotation></phrase> rule). In the document domain, you can express these constraints. You can literally make sure that the only way to include a graphic is to make it a figure and give it a title and a caption by making it illegal to place an image element anywhere else in the document structure. A structure that implemented this constraint might look like this:</p>
<codeblock language="SAM">
figure:
    title: Cute kitty
    caption: This is a cute kitten.
    image: images/cute.jpg
</codeblock>
<p>If the only way to include an image is to use the image element, and the only place where the image element is allowed is inside the figure element, and if the title and the caption elements are required and must have content, then there is no way for an author to add a graphic without a figure, title, and caption. A document that lacked these elements would be rejected by the <phrase><annotation type="algorithm">conformance algorithm</annotation></phrase> (see [#chapter.conformance).</p>
<p>This is an example of a constraint being enforced rather than factored out. With the list formatting we could factor out the formatting constraint completely by separating the formatting information from the list structure. Here we enforce the image constraint by providing a specific structure that must be followed to insert images.</p>
<p>(The figure number would be generated automatically, of course, just like the numbers in an ordered list. That constraint has been factored out rather than enforced.)</p>
<p>This raises an important aspect of document domain languages, and one of the reasons that they tend to have hierarchical rather than flat structures: constraining document structures.</p>
<p>In a typical <phrase><annotation type="concept">media domain</annotation></phrase> application, there is no restrictions on the order in which paragraph styles can be applied. If you want to put a level two heading between two steps in a procedure, nothing other than common sense will stand in the way of your doing so. In a document domain language, however, that kind of thing will usually not be allowed.</p>
<p>Instead, the <phrase><annotation type="concept">document domain</annotation></phrase> language will have a set of constraints on how procedures are structured. Procedure structures will have step structures nested within them. Step structures will only be allowed to appear inside procedure structures. Only certain text elements -- such as paragraphs, lists, or code blocks -- will be allowed to occur inside a step. There will be no way to place a second level heading inside a procedure.</p>
<p>Constraints like these are important to document domain languages. If you want to control how procedure are written, or how graphics are labeled, you need to create specific document domain structures for these things, and to constrain them to avoid them being misused. Without such constraints, it is easy for a language to slip back into the media domain, something that has happened to HTML.</p>
</section>
<section>
<title>Backsliding into the media domain</title>
<p>HTML was originally designed for sharing scientific papers. It was not designed to strictly control the organization and presentation of scientific papers -- it was designed more to accommodate requirements than to constrain them -- but it does have features that betray its origins. One example is definition lists. Definition lists are a common feature of scientific papers, which need to precisely define how they will use key terms. But as HTML has come to be adopted as generic language of web pages, the definition list (<phrase><annotation type="structure" namespace="HTML">dl</annotation></phrase>) structure has come to be treated as a generic labeled list structure, used for all kinds of things other than definition lists.</p>
<p>This highlights one of the challenges of structured writing, which is to make sure that structures do not get used for purposes other than what they were intended for. This often happens when people look for an easy way to create an effect in the media domain. If the writer wants a piece of text formatted in a particular way, but the only document domain structure that formats that way is intended for something different, it is easy for them to use the structure incorrectly to get the formatting effect they are after.</p>
<p>But this means that the document domain structure that is being misused no longer expresses the constraints it was designed to express. This means you loose functionality. For instance, you can’t find all the definitions in a set of HTML documents by looking for all the <phrase><annotation type="structure" namespace="HTML">dl</annotation></phrase> elements. You will get all kinds of things that are not definitions. You might also miss a lot of definitions that were not created using the <phrase><annotation type="structure" namespace="HTML">dl</annotation></phrase> structure.</p>
<p>This highlights something that is clearly true about HTML, and that can potentially affect any document domain language. It can slip back into the media domain if people start using it for the media domain effects produced the default transformation algorithms rather than adhering to its document domain structures. Today, structured writing advocates often dismiss HTML as an unstructured language. They will point to other languages, such as DocBook or DITA, as being structured by contrast, despite the fact that all three languages are document domain languages at heart with many similar structures between them.</p>
<p>And while it was not always so, HTML has largely become a set of basic document domain structures that authors can hang styles on (using CSS). In other words, it has come to be used much like traditional media-domain word processing and desktop publishing applications. When people write in HTML, they largely do so in WYSIWYG environments, using style-oriented tools that mimic traditional word processing very closely. The result is often an HTML document that formats more or less correctly, but that is coded very inconsistently from the point of view of the document domain, and which is thus very hard to work with -- either to edit by hand or manipulate with algorithms.</p>
</section>
<section>
<title>Reversing the backsliding</title>
<p>One way to get back to writing in the document domain has emerged recently in the form of a new syntax called <phrase><annotation type="language">MarkDown</annotation></phrase>. The idea behind MarkDown it to represent the major document domain structures of HTML using the kind of formatting people use in text-only email messages. This approach removes the difficulties associated with typing raw HTML. Here’s a sample of Markdown (courtesy of Wikipedia):</p>
<codeblock language="markdown">
Heading
=======

Sub-heading
-----------
 
### Another deeper heading
 
Paragraphs are separated
by a blank line.

Leave 2 spaces at the end of a line to do a  
line break

Text attributes *italic*, **bold**, 
`monospace`, ~~strikethrough~~ .

A [link](http://example.com).
[28]

Shopping list:

  * apples
  * oranges
  * pears

Numbered list:

  1. apples
  2. oranges
  3. pears

The rain---not the reign---in
Spain.
</codeblock>
<p>It translates into the following HTML (again, courtesy of Wikipedia):</p>
<codeblock language="HTML">
&lt;h1&gt;Heading&lt;/h1&gt;

&lt;h2&gt;Sub-heading&lt;/h2&gt;

&lt;h3&gt;Another deeper heading&lt;/h3&gt;

&lt;p&gt;Paragraphs are separated
by a blank line.&lt;/p&gt;

&lt;p&gt;Leave 2 spaces at the end of a line to do a&lt;br /&gt;
line break&lt;/p&gt;

&lt;p&gt;Text attributes &lt;em&gt;italic&lt;/em&gt;, &lt;strong&gt;bold&lt;/strong&gt;,
&lt;code&gt;monospace&lt;/code&gt;, &lt;s&gt;strikethrough&lt;/s&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;a href="http://example.com"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Shopping list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;apples&lt;/li&gt;
&lt;li&gt;oranges&lt;/li&gt;
&lt;li&gt;pears&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Numbered list:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;apples&lt;/li&gt;
&lt;li&gt;oranges&lt;/li&gt;
&lt;li&gt;pears&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The rain&amp;mdash;not the
reign&amp;mdash;in Spain.&lt;/p&gt;
</codeblock>
<p>Markdown was not designed to be a pure document domain language. It was simply designed to let you write HTML quickly in a text editor. But the effect of using Markdown is that it gets you out of working in a WYSIWYG view and lets you see the structure of the document you are creating.</p>
<p>Many markdown editors use a split screen view that shows the formatted version in one pane as the writer writes markdown syntax in the other. But even here, the writer is still working in the document domain because they still see the structure in the view they are working on. A Markdown editor is never going to produce the kind of messy HTML that a pure WYSIWYG HTML editor can produce.</p>
<figure name="markdown-edit">
<title>Markdown Editor</title>
<insert item="../graphics/markdownedit.png" type="image"/>
<caption>
<p>A detail of the Dillinger Markdown editor showing the Markdown and browser views side by side.</p>
</caption>
</figure>
<p>Something else interesting is at work here. A list in markdown is just a sequence of paragraphs that start with asterisk characters. On the face of it, this is just like a word processor creating lists by styling paragraphs. But if you look at the resulting HTML, you will see that it creates a proper list wrapper element around the list. The markdown interpreter is inferring the hierarchical structure of the document domain from the essentially flat Markdown syntax.</p>
<p>The author is working in something that looks and feels quite like the media domain, thought they have no actual styles and cannot change the formatting at all. But they use abstract formatting notation (underlines for headings, asterisks for unordered lists) to create document domain objects. The beauty of this is that the document domain constraints are preserved, while the author can work in a simple format that is easy to type, and reasonably easy to read.</p>
<p>This is an important reminder that <phrase><annotation type="language">XML</annotation></phrase> and languages based on it are not the only route to structured writing. In fact, there are many other ways to create structured texts that obey the appropriate constraints for a particular use case. We will look at some of them in later chapters.</p>
</section>
<section>
<title>Extending the document domain</title>
<p>Another factor in HTML’s slide into the media domain is that it provides only a fairly basic set of document domain structures. As we have seen, enforcing or factoring out media domain constraints requires specific document domain structures. But the possible list of such structures is quite large. There are a few basic features that are common to all documents, such as paragraph, lists, and titles. But these structures alone are not enough to hang meaningful and useful document domain constraints on, which is why, as we noted above, extensibility is an important part of all structured writing domains.</p>
<p>For example, think about a bibliography. A bibliography is a document structure for listing works cited in or recommended by a document. It generally consists of a heading “Bibliography” followed by a set of paragraphs listing the cited works. In the media domain, it is not a particularly complicated structure to create. It is just a sequence of paragraphs with some bold and italic formatting for author names, book titles, etc.</p>
<p>In your media domain stylesheet, you may have some character styles defined that arguably belong to the document or subject domains, such as author-name or book-title. You may even have a specific paragraph style for bibliography entries, but it is unlikely to be more complicated than that.</p>
<p>But these few media domain styles don’t really cover all the rules for creating bibliographies that your institution or publisher is likely to insist on. There are rules for the presentation of a bibliography entry which go into detail about how each work and its authors are listed and how the listings are presented. These are constraints on the writing of the bibliography that the author has to follow, but which are not modeled by the media domain styles they are working with. The authors have to learn and follow these constraints for themselves, and when they have finished writing, these constraints will not be explicit in the content in a machine-readable way. If the constraints are not machine readable, you won’t be able to write an algorithm to pull information out of bibliography entries because all the algorithm can see is a bunch of paragraphs with some bold and italic formatting.</p>
<p>If your want to control how bibliographic information is presented, and enable algorithms to find and extract data from bibliographic entries, you need a document domain structure for a bibliography. <phrase><annotation type="language">DocBook</annotation></phrase> has one:</p>
<codeblock language="docbook">
&lt;biblioentry id="bib.xsltrec"&gt;
  &lt;abbrev id="bib.xsltrec.abbrev"&gt;REC-XSLT&lt;/abbrev&gt;   &lt;editor&gt;&lt;firstname&gt;James&lt;/firstname&gt;&lt;surname&gt;Clark&lt;/surname&gt;&lt;/editor&gt;
  &lt;title&gt;&lt;ulink url="http://www.w3.org/TR/xslt"&gt;XSL Transformations
    (XSLT) Version 1.0&lt;/ulink&gt;&lt;/title&gt;
  &lt;publishername&gt;W3C Recommendation&lt;/publishername&gt;
  &lt;pubdate&gt;16 November 1999&lt;/pubdate&gt;
&lt;/biblioentry&gt;
</codeblock>
<p>The example is in XML, which can be hard to read, so here is the same structure in a simpler notation that it easier for humans to read. (I’ve used this notation for earlier examples, and I’ll talk more about it later.):</p>
<codeblock language="SAM">
biblioentry:(#bib.xslttrec)
    abbrev:(#bib.xsltrec.abbrev) REC-XSLT
    editor:
        firstname: James 
        surname: Clark
    title: XSL Transformations (XSLT) Version 1.0
    publishername: W3C Recommendation
    pubdate: 16 November 1999
</codeblock>
<p>This structure does not just constrain how bibliography entires are presented and formatted, it actually factors out many of those constraints by breaking down the components of a bibliography entry into separate labeled fields. Given a <phrase><annotation type="structure" namespace="DocBook">biblioentry</annotation></phrase> structure like this, you could create an algorithm to present and format a bibliography entry almost any way you wanted to. Not only that, you could write an algorithm to extract bibliography information from a document by looking for <phrase><annotation type="structure" namespace="DocBook">biblioentry</annotation></phrase> structures and selecting the desired information from them. For instance, if you want to build a list of authors cited in the document, you could do so by searching the <phrase><annotation type="structure" namespace="DocBook">biblioentry</annotation></phrase> records and extracting the author name structures.</p>
<p>This is another important way in which we can cut down the number of document domain structures we need. If we capture the individual pieces of information that make up a bibliography entry, we only need one bibliography entry structure even if we want to present bibliography entries differently in different publications (organize them differently, that is, as opposed to formatting them differently).</p>
</section>
</chapter>
