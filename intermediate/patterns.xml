<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.patterns">
<title>Patterns</title>
<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">hybrid tagging language</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">DITA</annotation></phrase> <phrase><annotation type="language">DocBook</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">HTML</annotation></phrase> <phrase><annotation type="language">XML</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm">conformance algorithm</annotation></phrase> <phrase><annotation type="algorithm">conformance</annotation></phrase> <phrase><annotation type="algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract and merge algorithm</annotation></phrase> <phrase><annotation type="algorithm">extract and merge</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance algorithm</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">Content management systems</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase></p>
</annotations>
<p>We noted that lightweight markup languages like <phrase><annotation type="language">Markdown</annotation></phrase> rely on patterns in the text rather than explicit markup characters to delineate basic structures like paragraphs and lists. XML, on the other hand, makes a strict distinction between what is markup and what is text. Markup is always recognized explicitly by markup sequences that cannot occur as normal text in any part of the document. (If you want to enter those sequences as text, you either have to escape the markup characters with character entities or use CDATA marked sections.)</p>
<p>All the same, even XML markup is defined by patterns. If you look at the <phrase><annotation type="standard">XML spec</annotation></phrase> you will see that XML is defined by a series of patterns which are described using a pattern notation called <phrase><annotation type="language">EBNF</annotation></phrase>. The difference between XML syntax and Markdown syntax is that in XML, patterns are defined absolutely, so that a markup start character is a markup start character no matter where is occurs, whereas in Markdown, the patterns are defined in context, so that a <phrase><annotation type="code">*</annotation></phrase> character starts a list item only at the beginning of a line, not the end.</p>
<p>Since markup is all about patterns, we are not confined only to the patterns defined by the markup language itself. There are lots of patterns that occur naturally in content and we can recognize those patterns in our content and act on them even if they are not formally marked up in our markup language.</p>
<p>A common example of this is the pattern of a URL. In most Web-based editors, if you enter a URL as plain text (no markup identifying it as a URL), the editor will recognize the pattern and will turn the URL into a clickable link in the HTML output.</p>
<p>Recognizing patterns rather than forcing the author to mark them up explicitly can make authoring a lot easier. Consider something as simple as a date. A date is a complex piece of data consisting of at least three elements, the year, month, and day. (It gets more complex if you include the day of the week or the time.) If you need those individual components of a date for processing purposes, you might be tempted to require dates to be marked up like this.</p>
<codeblock language="sam">
date: {2016}(year)-{08}(month)-{25}(day)
</codeblock>
<p>or</p>
<codeblock language="sam">
date:
    year: 2016
    month: 08
    day: 25
</codeblock>
<p>This is an example of what we might call fully explicit markup. Whether markup should be fully explicit in this way is a debate in data representation circles. For structured writing, however, it is a practical question of whether such markup has <phrase><annotation type="concept">functional lucidity</annotation></phrase>, which clearly it does not.</p>
<p>The fact is, a data in the format <phrase><annotation type="code">2016-08-25</annotation></phrase> is already a piece of structured markup. In fact, it is a standardized piece of structured markup defined by the international standard <phrase><annotation type="standard">ISO 8601</annotation></phrase>. The only problem in identifying a date as such is that in another context <phrase><annotation type="code">2016-08-25</annotation></phrase> could be a mathematical expression. But we can eliminate this potential confusion if use our markup language to isolate the context so that we can recognize when an <phrase><annotation type="standard">ISO 8601</annotation></phrase> date is being used, and then use the <phrase><annotation type="standard">ISO 8601</annotation></phrase> format specification to isolate the year month and day components of that data. In other words, all we need to do is this:</p>
<codeblock language="sam">
{1941-12-07}(date) is a day that will live in infamy. 
</codeblock>
<p>It also means that if the author wants to enter the date in another format, we can annotate it with the <phrase><annotation type="standard">ISO 8601</annotation></phrase> format to make the meaning clear to algorithms.</p>
<codeblock language="sam">
{December 7, 1941}(date "1941-12-07") is a day that will live in infamy. 
</codeblock>
<p>Of course, a sufficiently clever algorithm could recognize <phrase><annotation type="code"> December 7, 1941</annotation></phrase> as a date as well, because that too is a fully predictable pattern. One of the defining features of patterns is that your can recognize the semantic equivalence between two patterns that express the same information. You can increase the <phrase><annotation type="concept">functional lucidity</annotation></phrase> of your markup by recognizing a wider variety of semantically equivalent patterns in content without having to impose uniform syntax on authors.</p>
<p>XML recognizes the value of patterns. The XML data types standard define a number of common patterns, and <phrase>XSD</phrase> schemas allow you to define patterns for use in your own markup. It calls these patterns “simple types” (as opposed to “complex types”, which are composed of multiple nested elements). Thus you can specify in <phrase>XSD</phrase> that a date field is of the simple type <phrase><annotation type="code">xs:date</annotation></phrase>. The <phrase><annotation type="code">xs:date</annotation></phrase> data type is pattern that is based on <phrase><annotation type="standard">ISO 8601</annotation></phrase>, so you can do following in XML (as long as the schema define the type of the <phrase><annotation type="code">date</annotation></phrase> element as <phrase><annotation type="code">xs:date</annotation></phrase>):</p>
<codeblock language="xml">
&lt;date&gt;1941-12-07&lt;/date&gt; is a day that will live in infamy. 
</codeblock>
<p>It is important to understand what this does. If the type of element <phrase><annotation type="code">date</annotation></phrase> in your XML tagging language is defined as <phrase><annotation type="code">xs:date</annotation></phrase> then an XSD <phrase><annotation type="tool">schema validator</annotation></phrase> will validate <phrase><annotation type="code">1941-12-07</annotation></phrase> as a valid date but will reject `&lt;date&gt;last Thursday&lt;/date&gt; as invalid. It will not break the date down into its separate year, month, and day formats. If you need that, you will have to get your algorithm to do that for itself. But you algorithm can do that reliably if you know for certain that you are dealing with date in <phrase><annotation type="standard">ISO 8601</annotation></phrase> format.</p>
<p>Most programming languages will have library functions that know how to manipulate <phrase><annotation type="standard">ISO 8601</annotation></phrase> dates, so you probably don’t have to do any work yourself to get the year, month, and day components of a date.</p>
<!--  Python or XSLT example of data library dissecting a date. -->
<p>For other patterns, most programming languages have a library called “regular expressions” which you can use to rip a pattern apart and get at the pieces. (XSD actually lets you define new patterns by specifying a regular expression for the pattern you want to match.) <phrase><annotation type="tool">Regular expressions</annotation></phrase> will let your algorithms decode any sufficiently well defined and contextualized pattern in your content, removing the need to ask authors to explicitly break down many types of information into separate fields.</p>
<!--  Example if using RE to break apart a date -->
<p>Essentially, any expression that we commonly use in text which follows a well defined patterns is already structured text, and we don’t need to structured it again to treat it as structured. All we need to do is to use structure to place it into context so that we can recognize it reliably. Avoiding unnecessary markup of already recognizable patterns both simplifies our markup design and increase the functional lucidity of our markup languages.</p>
<!--  Need other pattern examples -->
</chapter>
