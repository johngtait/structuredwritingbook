<?xml version="1.0" encoding="UTF-8"?>
<chapter name="chapter.conformance">
<title>Conformance</title>
<annotations>
<p>Concepts</p>
<p><phrase><annotation type="concept">subject domain</annotation></phrase> <phrase><annotation type="concept">media domain</annotation></phrase> <phrase><annotation type="concept">document domain</annotation></phrase> <phrase><annotation type="concept">management domain</annotation></phrase> <phrase><annotation type="concept">subject-domain</annotation></phrase> <phrase><annotation type="concept">media-domain</annotation></phrase> <phrase><annotation type="concept">document-domain</annotation></phrase> <phrase><annotation type="concept">management-domain</annotation></phrase> <phrase><annotation type="concept">hybrid tagging language</annotation></phrase> <phrase><annotation type="concept">Every Page is Page One</annotation></phrase> <phrase><annotation type="concept">abstract language</annotation></phrase> <phrase><annotation type="concept">information architecture</annotation></phrase> <phrase><annotation type="concept" specifically="top-down information architecture">top-down</annotation></phrase> <phrase><annotation type="concept">metadata</annotation></phrase></p>
<p>Languages</p>
<p><phrase><annotation type="language">SAM</annotation></phrase> <phrase><annotation type="language">DITA</annotation></phrase> <phrase><annotation type="language">DocBook</annotation></phrase> <phrase><annotation type="language">Markdown</annotation></phrase> <phrase><annotation type="language">HTML</annotation></phrase> <phrase><annotation type="language">XML</annotation></phrase></p>
<p>Algorithms</p>
<p><phrase><annotation type="algorithm">authoring algorithm</annotation></phrase> <phrase><annotation type="algorithm">authoring</annotation></phrase> <phrase><annotation type="algorithm" specifically="composition">composability</annotation></phrase> <phrase><annotation type="algorithm">composition algorithm</annotation></phrase> <phrase><annotation type="algorithm">composition</annotation></phrase> <phrase><annotation type="algorithm">conformance algorithm</annotation></phrase> <phrase><annotation type="algorithm">conformance</annotation></phrase> <phrase><annotation type="algorithm">content management algorithm</annotation></phrase> <phrase><annotation type="algorithm">content management</annotation></phrase> <phrase><annotation type="algorithm">content reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">content reuse</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">differential single sourcing</annotation></phrase> <phrase><annotation type="algorithm">encoding algorithm</annotation></phrase> <phrase><annotation type="algorithm">encoding</annotation></phrase> <phrase><annotation type="algorithm">exchange algorithm</annotation></phrase> <phrase><annotation type="algorithm">exchange</annotation></phrase> <phrase><annotation type="algorithm">extract and merge algorithm</annotation></phrase> <phrase><annotation type="algorithm">extract and merge</annotation></phrase> <phrase><annotation type="algorithm">formatting algorithm</annotation></phrase> <phrase><annotation type="algorithm">formatting</annotation></phrase> <phrase><annotation type="algorithm">linking algorithm</annotation></phrase> <phrase><annotation type="algorithm">linking</annotation></phrase> <phrase><annotation type="algorithm">presentation algorithm</annotation></phrase> <phrase><annotation type="algorithm">presentation</annotation></phrase> <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> <phrase><annotation type="algorithm">publishing</annotation></phrase> <phrase><annotation type="algorithm">quality algorithm</annotation></phrase> <phrase><annotation type="algorithm">quality</annotation></phrase> <phrase><annotation type="algorithm">relevance algorithm</annotation></phrase> <phrase><annotation type="algorithm">relevance</annotation></phrase> <phrase><annotation type="algorithm">rendering algorithm</annotation></phrase> <phrase><annotation type="algorithm">rendering</annotation></phrase> <phrase><annotation type="algorithm">reuse algorithm</annotation></phrase> <phrase><annotation type="algorithm">reuse</annotation></phrase> <phrase><annotation type="algorithm">separating content from formatting</annotation></phrase> <phrase><annotation type="algorithm">single source of truth algorithm</annotation></phrase> <phrase><annotation type="algorithm">single source of truth</annotation></phrase> <phrase><annotation type="algorithm">single sourcing algorithm</annotation></phrase> <phrase><annotation type="algorithm">single sourcing</annotation></phrase> <phrase><annotation type="algorithm">synthesis algorithm</annotation></phrase> <phrase><annotation type="algorithm">synthesis</annotation></phrase> <phrase><annotation type="algorithm" specifically="conformance">validation</annotation></phrase></p>
<p>Tools</p>
<p><phrase><annotation type="tool">content management system</annotation></phrase> <phrase><annotation type="tool">Content management systems</annotation></phrase></p>
<p>Roles</p>
<p><phrase><annotation type="role">information architect</annotation></phrase></p>
</annotations>
<p>Structured writing is about constraints. Texts that meet appropriate constraints will be of higher quality and greater consistency and will be easier to manage. Texts that record the constraints they conform to can be reliably processed with algorithms. The key to any structured writing systems, therefore, it the ability to assure conformance with the desired constraints.</p>
<p>Constraints have always been part of the authoring process. Style guides and grammatical reference works express constraints that content is expected to follow. Editorial guidelines tell writers what kind of content a publisher is looking for, at what length, and in what format. These are content constraints. If a publisher says that manuscripts must be delivered in <phrase><annotation type="language">DocBook</annotation></phrase> or <phrase><annotation type="tool">Word</annotation></phrase> format, that is a technical constraint intended to make the production process flow more smoothly. When the government say that you must submit your online tax return in a particular file format, that is semantic constraint intended to make sure the the government’s computers can successfully read and process your tax information.</p>
<p>Some of the constraints described above are merely statements of requirements. Authors are not given any assistance in following them nor is there any verification mechanism to tell them if they have followed them or not (other than perhaps an email from an irate editor). Others are highly mechanical. Good tax preparation software will guide you all the way in filling out your tax forms and will run all kinds of checks to make sure that you did it correctly. It will also factor out many of the complexities of the tax code and ask you for information in a way you can understand.</p>
<p>This higher level of conformance checking helps make the process easier and the results more reliable. Structured writing is really all about improving conformance to enable automation and improve quality. The conformance algorithm is thus the linchpin of structured writing. Without it, none of the other algorithms will work reliably.</p>
<p>How many constraints you need to place on your content depends on your quality and process goals. The larger your content set becomes, the more frequent and dynamic your outputs, and the more of your processes rely on algorithms, the more constraints you need and the more pressing the issue of conformance becomes. <phrase><annotation type="algorithm">Content reuse</annotation></phrase>, for example, relies on conformance to the constraints for writing content that fits when reused, and on conformance to the constraints on what can be reused where. If you want to do any kind of <phrase><annotation type="concept">real-time publishing</annotation></phrase> of content, meaning there is no time to do quality assurance on the output of the algorithm, then reliable content is key, and compliance is how you ensure that content is reliable.</p>
<p>One of the ways in which structured writing project can get into trouble is by introducing new constraints to meet management or publishing automation goals without considering how conformance to those constraints will be achieved. In some cases, this results in a highly imperative approach to conformance, in which writers are trained to implement the constraints, but where the structures they are creating provide no guidance or validation of those constraints. The system constraints, in other words, are not reflected in the content structures. If you are creating complex structures and also creating complex constraints that are not reflected or implemented in those structures, you are going to have a twofold conformance problem: conformance will be expensive, and it will be inconsistent.</p>
<p>The first and best way to ensure conformance with a constraint is to factor out the constraint. If the constraint is that the titles of works should always be formatted in a certain way, you can factor out this constraint by moving to the <phrase><annotation type="concept">document domain</annotation></phrase> and using something like <phrase><annotation type="language">DocBook</annotation></phrase>’s <phrase><annotation type="code">citetitle</annotation></phrase> element to mark up the names of works. Now it is the <phrase><annotation type="algorithm">publishing algorithm</annotation></phrase> that is responsible for the formatting. The formatting constraint has been factored out of the content.</p>
<p>When we move content creation from the media domain to the document domain we are factoring out all of the formatting constraints of the document. When we move content from the document domain to the subject domain we are factoring out many of the document or management constraints.</p>
<p>But while we factor out one set of constraints when we do this, we also create a new set of constraint in the new domain. When we factored out the formatting constraint for the titles of works, we introduced a new constraint, which is to markup the title of works using <phrase><annotation type="code">citetitle</annotation></phrase>. Factoring one constraint into another is useful if it makes the constraint easier to conform to or easier to validate. A constraint may be easier to conform to if it is simpler, easier to remember, or does not require knowledge that is outside the writer’s concerns. For instance, the <phrase><annotation type="code">citetitle</annotation></phrase> tag is a single tag, not a set of formatting instructions, and the author knows when they are citing the title of a work. It may be easier to validate if it has fewer components or can be limited to a narrower scope. For instance, the set of things that are titles is smaller than the set of things that are formatted in italic, so validating the <phrase><annotation type="code">citetitle</annotation></phrase> constraint requires looking at a smaller and more homogeneous set.</p>
<p>If the constraint you are introducing is not easier to conform to or easier to validate, you probably should not do it. There are certainly cases where moving content to a more formal document domain model introduces more constraints than it eliminates without making those constraints easier to comply with or validate. On the other hand, sometimes those additional constraints are required for algorithms. Inevitably, authors have to make some concessions to the needs of algorithms, but we don’t want algorithms to impose such a burden on authors that we distract them from doing good research and quality writing. So if the structures you are created for the sake of algorithms prove complex for authors to conform to or difficult to validate, it is wise to ask if you could refactor those constraints again (perhaps to the <phrase><annotation type="concept">subject domain</annotation></phrase> so that you get both the precision and detail that the algorithm needs and the ease of use and validation that the writer needs.</p>
<section>
<title>Completeness</title>
<p>Completeness is an obvious aspect of content quality. Unfortunately, lack of completeness is often hard for writers and reviewers to spot. The omission of information they already know is hard to see unless there is an obvious hole in a predefined and explicit document structure. Defining structures that highlight information requirements can significantly improve completeness.</p>
<p>In the <phrase><citation type="nameref" value="chapter.subject-domain">subject domain chapter</citation></phrase> we saw how calling out the preparation time and number of servings for a recipe help ensure that the author always remembers to include that information, whether or not we decide to present it in fields or as part of a paragraph.</p>
<p>But this is not the only way that subject domain structured writing helps ensure completeness. By specifically calling out the subjects that are mentioned in every topic you write, you build a list of subjects that are important to your business. You can use this list to make sure that all the subjects you need to cover are actually covered.</p>
<p>For example, structured writing allows you to annotate you text to call out the types of certain phrases such as functions names, feature names, or stock symbols.</p>
<codeblock language="sam">
When installing widgets, use a {left-handed widget wrench}(tool) to tighten them to the recommended torque for your device.
</codeblock>
<p>This sample annotates the phrase “left-handed widget wrench” and records that these words describe a tool. If all mentions of tools are annotated this way, you can then compile a list of all the tools you mention in all your topics and make sure that you have suitable documentation for each of them. We will look at annotations, and the ways you can use them, in later articles.</p>
<p>And yes, this is the same markup that I have been using in earlier chapters, and I will explain it eventually.</p>
</section>
<section>
<title>Consistency</title>
<p>Similarly to completeness, consistency can make a big difference to readers, but lack of consistency is hard to spot if the structure of the content is not explicit in all the ways we want it to be consistent. Consistency can apply to many aspects of the content, such as structure and vocabulary.</p>
<p>We have described structured writing as applying constraints to writing in <citation type="nameref" value="chapter.definition"/>. Being consistent simply means abiding by constraints. As we have seen, this can take the form of either enforcing the constraint through required structure or, preferably, factoring out the constraint so that it is handled by algorithms rather than people. We have looked at how you can factor out constraints in both the <phrase><annotation type="concept">document domain</annotation></phrase> and the <phrase><annotation type="concept">subject domain</annotation></phrase>.</p>
<p>If you annotate the important things in your content set, such as tools in the example above, you can use the annotations to check for consistency of names. Suppose a writer accidentally writes “spanner” rather than “wrench” in the name of the tool:</p>
<codeblock language="sam">
When installing widgets, use a {left-handed widget spanner}(tool) to tighten them to the recommended torque for your device.
</codeblock>
<p>Since you can now generate a list of tools mentioned in the text, you can check each mention against a list of approved tool names. This can reveal both incorrect names (consistency) and tools that may be missing from the official list (completeness).</p>
<p>The same would apply to values in fields, such as the wine match field in the recipe example. With the wine match in a separate field you can compile a list of wines mentioned or check each mention against an approved list.</p>
</section>
<section>
<title>Accuracy</title>
<p>Accuracy problems too are often hard to spot. Typos, using old names for things, or giving deprecated examples are all hard for writers and reviewers to see. But there are structured writing techniques than can catch many of these kinds of problems.</p>
<p>For example, if you were documenting an API, you could annotate each mention of a function.</p>
<codeblock language="sam">
Always check the return value of the {rotateWidget()}(function) to ensure the correct orientation was achieved. 
</codeblock>
<p>API function names can be quite tricky to remember sometimes and small typos and be difficult to spot. But with this annotation, you can validate all mentions of functions against the API reference or the code base. This technique not only catches misspellings. I have seen it catch the use of deprecated functions in examples, for instance.</p>
</section>
<section>
<title>Timeliness</title>
<p>Information tends to change quickly these days, and readers no longer have any patience with outdated content. But there are many difficulties in ensuring that content is always timely. How do you detect when content is out of date? How do you push updated content quickly? How do make sure updates in one place don’t break other content? Structured writing provides ways to address all of these questions.</p>
<p>By improving validate and automating publishing, structured writing can allow you to release content much more quickly. By changing the way content is organized and linked, it can allow you to add and remove individual pages from a content set without fear of breaking things. We will look at these techniques in more detail in later chapters.</p>
</section>
<section>
<title>Semantic constraints</title>
<p>We can usefully divide constraints into two types: structural constraints and semantic constraints. Structural constraints deal with the the relationship of various text structures. Semantic constraints deal with the meaning of the content.</p>
<p>For instance, consider this structure:</p>
<codeblock language="xml">
&lt;person&gt;
    &lt;name&gt;John Smith&lt;/name&gt;
    &lt;age&gt;middle&lt;/age&gt;
    &lt;date-of-birth&gt;Christmas Day&lt;/date-of-birth&gt;
&lt;/person&gt;
</codeblock>
<p>Some people certainly describe themselves as middle aged, and Christmas Day is certainly a date of birth, if an incomplete one. The author has complied with the structure of the document. But the creator of this markup language was probably looking for more precise information, probably in a format that an algorithm could read. What they wanted was:</p>
<codeblock language="xml">
&lt;person&gt;
    &lt;name&gt;John Smith&lt;/name&gt;
    &lt;age&gt;46&lt;/age&gt;
    &lt;date-of-birth&gt;1970-12-25&lt;/date-of-birth&gt;
&lt;/person&gt;
</codeblock>
<p>Some schema languages, such as <phrase><annotation type="tool">XML Schema</annotation></phrase>, let you specify the data type<citation type="idref" value="data-type"/> of an element. You could specify that the type of the age field must be whole number between 0 and 150 and that the date-of-birth field must be a recognizable date format. Here’s what the schema for these constraints might look like:</p>
<footnote id="data-type">
<p>The data types referred to in the example above are not data types are they are commonly understood in programming terms (which refers to how they are stored in memory). In XML, as in all major markup languages, the data is all strings. What a data type really is in a schema is a pattern. There is a language for describing patterns in text that is called <phrase><annotation type="tool">regular expressions</annotation></phrase>. Regular expressions are a bit cryptic and take some getting used to but they are incredibly powerful at describing patterns in text. XML schema lets you define types for elements using regular expressions, so there is a huge amount you can do to constrain the content of elements in your documents.</p>
</footnote>
<codeblock language="xsd">
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"&gt;

    &lt;xs:element name="person"&gt;
        &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
                &lt;xs:element name="name" type="xs:string"/&gt;
                &lt;xs:element name="age" type="age-range"/&gt;                
                &lt;xs:element name="date-of-birth" type="xs:date"/&gt;
            &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
    &lt;/xs:element&gt;
    
    &lt;xs:simpleType name="age-range"&gt;
        &lt;xs:restriction base="xs:int"&gt;
            &lt;xs:minInclusive value="0"/&gt;
            &lt;xs:maxInclusive value="150"/&gt;
        &lt;/xs:restriction&gt;
    &lt;/xs:simpleType&gt;
&lt;/xs:schema&gt;
</codeblock>
<p>This schema uses the built in types <phrase><annotation type="code">xs:string</annotation></phrase> and <phrase><annotation type="code">xs:date</annotation></phrase> for the <phrase><annotation type="code">name</annotation></phrase> and <phrase><annotation type="code">date-of-birth</annotation></phrase> elements and defines a new type called <phrase><annotation type="code">age-range</annotation></phrase> for the age element. Using this schema, the example above would now fail to validate with type errors reported for the age and date-of-birth fields.</p>
<p>Applying these kinds of semantic constraints to content is not going to work if most of your text is in free form paragraphs. It is hard to define useful patterns for long passages of text. If you want to exercise fine grained control over your content, therefore, you must first break information down into individual fields and then apply type constraints to those fields.</p>
<p>In some cases, we create text structures purely for the purpose of being able to apply semantic constraints to their content. We use structural constraints to isolating semantic constraints so that they are testable and enforceable.</p>
<p>This can be particularly effective when you are creating content in the subject domain since you don’t have to specify information in sentences, even if you intend to publish it that way. You can break the content out into separate structures and define the data type of those structures to ensure you get complete and accurate information, and to ensure that you can operate on that information using algorithms.</p>
<p>The recipe text that we have used before is a good example of how content that could be expressed entirely in free-form paragraphs if we choose can be broken down in a fine-grained way that allows us to impose a variety of structural and semantic constraints.</p>
<codeblock language="sam">
recipe: Hard Boiled Egg
    introduction:
        A hard boiled egg is simple and nutritious.
    ingredients:: ingredient, quantity
        eggs, 12
        water, 2qt
    preparation:
        1. Place eggs in pan and cover with water.
        2. Bring water to a boil.
        3. Remove from heat and cover for 12 minutes.
        4. Place eggs in cold water to stop cooking.
        5. Peel and serve.
    prep-time: 15 minutes
    serves: 6
    wine-match: champagne and orange juice
    beverage-match: orange juice
    nutrition:
        serving: 1 large (50 g)
        calories: 78
        total-fat: 5 g
        saturated-fat: 0.7 g
        polyunsaturated-fat: 0.7 g    
        monounsaturated-fat: 2 g    
        cholesterol: 186.5 mg    
        sodium: 62 mg    
        potassium: 63 mg    
        total-carbohydrate: 0.6 g    
        dietary-fiber: 0 g    
        sugar: 0.6 g    
        protein: 6 g    
</codeblock>
<p>This entire recipe could be presented free form. But when structured like this we can enforce detailed constraints like ensuring that there is always a wine match listed or calories are always given as a whole number. The publishing algorithms could actually stitch all this content into paragraphs again if that was how you wanted to publish it. But when it is created in this format the author is provided with a huge amount of guidance about the information you want, and you are able to manipulate and publish the content in many different ways. Reader’s will benefit because all the recipes will conform to what you know reader’s need and want in a recipe.</p>
</section>
<section>
<title>Entry validation constraints</title>
<p>The ability of algorithms to read the data in your structures can have another conformance benefit because it allows you to check one piece of information against another. For instance, if you have date of birth and age you can calculate current age from the date of birth and compare it against the value of the age field. If the values don’t match, you know the author made an error and you can report it. Here is a Schematron assertion that tests this constraint (in a slightly imprecise fashion: date arithmetic is surprisingly hard):</p>
<!--  Come up with another example? The difficulties of data arithmetic make -->
<!--  this example confusing. -->
<codeblock language="schematron">
&lt;schema xmlns="http://purl.oclc.org/dsdl/schematron"  queryBinding="xslt2"&gt;
    &lt;pattern&gt;
        &lt;title&gt;Age constraint&lt;/title&gt;
        &lt;rule context="person"&gt;
            &lt;assert test="age = xs:int(days-from-duration(current-date() - xs:date('1970-12-25')) div 365.25)"&gt;Age does not match the given date-of-birth.&lt;/assert&gt;
        &lt;/rule&gt;
    &lt;/pattern&gt;
&lt;/schema&gt;
</codeblock>
</section>
<section>
<title>Referential integrity constraints</title>
<p>In the management domain, there are a set of constraints that we could call referential integrity constraints. Referential integrity simply means that if you make a reference to something, that something should exist. In the management domain, we often give IDs to structures and use those IDs to refer to those structures for purposes such as <phrase><annotation type="algorithm">content reuse</annotation></phrase>.</p>
<p>If you are going to reuse a piece of content by referring to its ID, there is an obvious constraint that a piece of content with that ID must exist. This constraint is important enough that the XML specification actually builds in direct support for it. XML itself requires that if an attribute is defined as having the type IDREF, then there must be an element with an attribute of type ID with the same value in the same document. This can be useful for checking things like a footnote reference in a document actually corresponds to a footnote somewhere in the document.</p>
<p>Many management domain algorithms, however, require referential integrity not only within a single document but between documents. The conformance of a document to these referential integrity constraints can sometimes only be judged by the publishing algorithm when it is published in a particular combination. In fact, it is possible for a document to have referential integrity when published in one collection and to lack it when published in another.</p>
<p>Since it is always better to validate a constraint as early as possible, a content management system that is aware of the referential integrity constraints of a system (such as a DITA CMS, for example) may validate the referential integrity of content in all its potential combinations without the need to actually publish it.</p>
<p>Needless to say, however, referential integrity constraints of this complexity still present a management and authoring headache, even with content management system support. It is worth considering if there is a way to factor them out. One example of how this can be done is found in the various approaches to the <phrase><annotation type="algorithm">linking algorithm</annotation></phrase>.</p>
</section>
<section>
<title>Conformance to external sources</title>
<p>Referential integrity constraints can span multiple documents. So can semantic constraints. For example, you may want values in your document to match values in databases or in other documents. For instance, a technical writer documenting an API may produce an API reference, much of which may be extracted from the program source code, and also a programmers guide, which they will write from scratch. The programmer’s guide will obviously mention the functions in the API many times. There is the possibility that the writer may misspell one of the names, or that the API may be changed after parts of the document are written, or that a function the writer has mentioned no longer exists.</p>
<p>It is clearly a semantic constraint on the programmer’s guide that all the API calls it mentions should actually be present in the API. Since the API reference is generated from the source code, we can express this constrain as: functions mentioned in the programmers guide must be listed in the API reference.</p>
<p>This is an important constraint. When we implemented this constraint on one project I worked on, it revealed a number of errors:</p>
<ul>
<li>
<p>Misspelled function names in the programmer’s guide.</p>
</li>
<li>
<p>The inclusion in the programmer’s guide of material related to a private API that was never released to the public.</p>
</li>
<li>
<p>The failure of the API guide to include an important section of the API due to incorrect markup in the source code.</p>
</li>
<li>
<p>A section of the programmer’s guide that discussed how to do things using a deprecated API and failed to discuss how to do them with the new API.</p>
</li>
</ul>
<p>All these errors were present in the programmer’s guide despite several thorough reviews by multiple people over multiple software release. These are all the kinds of errors that human being have a hard time spotting in review. But they all have significant impact on users who are trying to actually use the API.</p>
<p>As part of the conformance algorithm for the programmer’s guide, we added a check that looked up each reference to an API call, including those in code blocks, in the source files for the API reference and reported an error if they did not match. None of the errors listed above would have been detected without this check.</p>
<p>Of course, for this check to be possible, the algorithm that did the checking had to be able to identify every time the programmer’s guide mentioned an API call, and it had to be able to find all the API call names in the API reference. For this to be possible, both documents had to be written in a specific structured format that made the function names accessible to the algorithm. Here is a simplified example. First, a code sample from a programmer’s guide:</p>
<codeblock language="sam">
code-sample: Hello World
    
    The Hello World sample uses {print}(function) to output the text "Hello World"
    
    ```(python)
        print("Hello World.")
</codeblock>
<p>Next a function reference listing from the API reference:</p>
<codeblock language="sam">
function: print
    return-value: none
    parameters:
        parameter: string
            required: yes
            description:
                The string to print.
        parameter: end
            required: no
            default: '\n'
            description:
                The characters to output after the {string}(parameter).
</codeblock>
<p>Because the API reference labels “print” as a function name and the code-sample annotates “print” as the name of a function, we can look up “print” in the API reference to validate the annotated text in the programmer’s guide.</p>
<p>By adding these structures and annotations to the content, we isolated the semantics of the function call names so that we could apply semantic conformance checks to them.</p>
</section>
<section>
<title>Conformance and change</title>
<p>Requiring conformance to outside sources means that a document’s conformance is neither static nor absolute. A document that was conforming may stop being conforming because of outside events. But this reflects reality. One of the most difficult aspects of content management, in fact, is detecting when a document ceases to be conforming because of a change in the reality that it describes. Using structured writing techniques to validate the conformance of a document against an external source can go a long way to addressing this class of problem.</p>
</section>
<section>
<title>Design for conformance</title>
<p>So much for the mechanical aspects of conformance. But conformance is fundamentally a human activity and we may need humans to conform to constraints that we cannot easily express or validate in purely mechanical terms.</p>
<p>While schemas and downstream algorithms can do a great deal to check and enforce conformance, there is also a great deal that they cannot check and enforce, and if the schema and the algorithms are making the writer’s live hard with restrictions and errors that the writer does not understand or that get in the way of their creating good content, you are not going to get good conformance.</p>
<p>How do you know if you are meeting constraints -- in any activity? Feedback. With any activity, we need a way to know when we are done and when we have done it correctly. In the <citation type="citation" value="media domain"/><annotation type="concept"/>, there is one form of feedback: how the document looks. With a true WYSIWYG display, if it looks right on the screen, it will render correctly on paper, or whatever media you are targeting as you write. That is the writer’s signal that they are done, and done correctly.</p>
<p>The real key to achieving conformance it to create structures that are easy to conform to. For most content, conformance is not about trying to catch evil doers. The authors are on side and trying to produce good content. Authors who understand structured content may seek to impose constraints as an aid to their own work, just as a carpenter, for instance, might design a jig to guide their saw. Constraints are a tool for writers, not a defense against them. Constraints may force a lazy writer to pull up their socks and do some more research. They may force an inattentive writer to recast their first draft into a more consistent format. But they should never prevent a good and diligent writer from doing good work.</p>
<p>The real core of compliance in structured writing, therefore, is not enforcement, but creating structures that:</p>
<ul>
<li>
<p>Are clearly and specifically appropriate to the subject matter and the audience being addressed.</p>
</li>
<li>
<p>Clearly and specifically address the need of the user to accomplish a clear and specific goal.</p>
</li>
<li>
<p>Clearly communicate to authors what is expected of them in terms they understand.</p>
</li>
<li>
<p>Either remind authors of what is required or factor it out.</p>
<!-- These are subject domain specific. What about doc domain? -->
</li>
</ul>
<p>Writers may disagree, of course, about what goals should be addressed, what information readers need to achieve those goals, or how best to express information to that audience. Where we have many authors contributing to a common information set, it is important that these differences be addressed and resolved professionally and that all authors involved are on board with the plan going forward. It is at that point that well-thought-out content structures can capture the decisions made and make sure that everyone stays on track and is consistent.</p>
<p>Auditing and enforcement still have a role to play, not because authors are hostile to the system, but because they a human. But auditing and enforcement are secondary to the main aim of conformance-friendly design. And in that spirit, auditing and conformance should be seen as part of a feedback loop that is constantly seeking to improve the design. If you keep finding the same mistakes over and over again, that is not a training problem or a human resources problem, it is a design problem.</p>
</section>
</chapter>
