chapter:(#chapter.subject-domain) Writing in the Subject Domain

    <<<(annotations.sam)
    
    index: type, term
        concept, subject domain

    Structured writing in the {subject domain} means creating structures that are specific to the subject matter being discussed. Sometimes the use of the subject domain is a minor part of a primarily {document domain} language. For example, {DocBook} includes subject domain tags like {GUILabel}(structure(DocBook)) for references to part of a computer display. Sometimes it takes the form of a document type that is specific to one subject such as a recipe, a used car review, a tide table, or a travel itinerary. 
    
    When a document type is specific to one subject, it may be either rhetorically focused or data-focused. If the document type is designed to constrain the way the information on a particular subject is presented, it is rhetorically focused. A rhetorically-focused subject domain document type is still mainly concerned with document-domain structures, but it specifies exactly which document domain structures are supposed to be used in which order in order to present a specific subject. 
    
    Alternatively, a subject-domain document type may choose to factor out the presentation details and just capture the pieces of information required to cover a subject. This makes it possible to apply different different rhetorical strategies when presenting the document to the reader.  
    
    A recipe is a useful example for examining these differences. Notice that the word recipe itself has two meanings. It can mean the formula for a dish. It can also mean the document that records that dish. Recording the formula for a dish is a data oriented approach. Recording the desired presentation of a recipe is the rhetorical approach. We will examine this distinction in this chapter. To begin with, though, we will look at what a recipe looks like in a generic {document domain} language (one this is not specific to the subject of food preparation). 

    Here is a recipe written in {reStructuredText}(language), a lightweight general purpose markup language:
  
    figure:
        
        ```(reStructuredText)
            Hard Boiled Eggs
            ================
            A hard boiled egg is simple and nutritious. 
            Prep time, 15 minutes. Serves 6.

            Ingredients
            -----------
                ======  ========
                Item    Quantity
                ======  ========
                eggs    12
                water   2qt
                ======  ========
                
            Preparation
            -----------
                1. Place eggs in pan and cover with water.
                2. Bring water to a boil.
                3. Remove from heat and cover for 12 minutes.
                4. Place eggs in cold water to stop cooking.
                5. Peel and serve.
    
    In {reStructuredText}, a line underlined with equals signs is a major heading and one underlined with dashes is a minor heading. A table is created by using equals signs to mark the beginning and end of the table and the boundary between the table head and the table body. Rows are separated by new lines and columns by spaces in the rows of equals signs. Numbered lists are created by putting numbers in front of lines of text. The equivalent HTML document would look like this:

    ```(HTML)
        <html>
            <h1>Hard Boiled Eggs</h1>
            
            <p>A hard boiled egg is simple and nutritious. 
            Prep time, 15 minutes. Serves 6.</p>
            
            <h2>Ingredients</h2>
            <table>
                <thead>
                    <tr>
                        <th>Item</th>
                        <th>Quantity</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>eggs</td>
                        <td>12</td>
                    </tr>
                    <tr>
                        <td>water</td>
                        <td>2qt</td>
                    </tr>
                </tbody>
            </table>
            <h2>Preparation</h2>
            <ol>
                <li>Place eggs in pan and cover with water.</li>
                <li>Bring water to a boil.</li>
                <li>Remove from heat and cover for 12 minutes.</li>
                <li>Place eggs in cold water to stop cooking.</li>
                <li>Peel and serve.</li>
            </ol>
        </html>
    
    This document follows the normal rhetorical pattern of a recipe. That is, it has the things a recipe normally has, in the order they normally occur in a recipe: introduction, list of ingredients, preparation steps. However, it does not record the fact that it follows this rhetorical pattern. There is nothing in the markup to say that this is not a novel, a car manual, or knitting pattern. Nor would the markup constrain an author to follow the normal rhetorical pattern of a recipe while writing.
    
     Moving this document to the subject domain would allow us to impose these rhetorical constraints, and to record that we have done so. Neither {reStructuredText} nor {HTML} give us a way to do that, so we will need a different markup language. Here's what that might look like:    

    ```(sam)
        recipe: Hard Boiled Egg
            introduction:
                A hard boiled egg is simple and nutritious. 
                Prep time, 15 minutes. Serves 6.
            ingredients:
                * 12 eggs
                * 2qt water
            preparation:
                1. Place eggs in pan and cover with water.
                2. Bring water to a boil.
                3. Remove from heat and cover for 12 minutes.
                4. Place eggs in cold water to stop cooking.
                5. Peel and serve.

    This structure breaks the document up into a collection of named structures. Those structures are "introduction", "ingredients", and "preparation" and they are contained in an overall structures called "recipe". This is the basic rhetorical structure of a recipe. This markup make it explicit that this is a recipe (not a novel, a car manual, or a knitting pattern). The author is explicitly guided to follow this pattern. They are also constrained to present the ingredients as an unordered list and the preparation as a numbered list. ([#chapter.conformance] will look at how such constraints are expressed and enforced.)
                
    One of the common patterns of structured writing is the factoring out of invariants. One of the invariants of the recipe pattern is that it has sections titled "Ingredients" and "Preparation" (or words to that effect). Notice that these titles been factored out here. The titles are part of the rhetorical structure of a recipe, and since the markup now models the rhetorical structures, we can factor out the titles themselves by creating structures called `ingredients` and `preparation`. Since we need those sections to record the rhetorical pattern we have followed, the titles are redundant in our source and can be factored out and added back into the content by an algorithm at publishing time. 
    
    By factoring out titles, we factor out the constraint on what those titles must be. An author no longer has to remember the standard titles to use, and a whimsical author can no longer decide to title these sections "Stuff you need" and "Stuff your do", or any other variant of the standard that the organization has chosen.
        
    If your organization publishes a lot of recipes, you probably have a lot more constraints on the rhetorical structure of your recipes. For instance, you might have a constraint that every recipe must state its preparation time and the number of people it serves. In our subject domain markup, we can enforce and record that constraint by moving the information from the introduction section to separate fields:

    ```(sam)
        recipe: Hard Boiled Egg
            introduction:
                A hard boiled egg is simple and nutritious.
            ingredients:
                * 12 eggs
                * 2qt water
            preparation:
                1. Place eggs in pan and cover with water.
                2. Bring water to a boil.
                3. Remove from heat and cover for 12 minutes.
                4. Place eggs in cold water to stop cooking.
                5. Peel and serve.
            prep-time: 15 minutes
            serves: 1


    Does this mean that the preparation time will now be displayed as separate fields in the output, rather than in-line? Not necessarily. It might be a good idea to call it out in separate fields so that readers can find the information more easily, but if you really wanted that information at the end of the introduction in every recipe, it would be a simple matter for the {presentation  algorithm} (see [#chapter.publishing]) to construct the sentences "Prep time, 15 minutes. Serves 6." from the `prep-time` and `serves` field values. 
    
    You will always have a rhetorical constraint about how this information is to be presented, but the markup does not enforce the how or the where. It merely enforces that the information must be captured, leaving it to the presentation algorithm to implement the current governing constraint on how it is to be presented. 
    
    So, something interesting has happened here. In order to enforce a rhetorical constraint -- that prep time and number of servings must be specified -- we have actually moved away from markup that specifies presentation to markup that merely records data. In other words, `prep-time` and `serves` are data-oriented {subject domain} structures that do not specify presentation at all. 
    
    This is a recurring pattern in structured writing, and one of the most important things to understand about how structured writing works. It is almost always better to factor out a constrain than to enforce it. This can be a difficult idea to adjust to. If we have a particular form of presentation we want to achieve, our first instinct naturally is to specify it in detail. But this is not always easy to do, especially if you want to specify that a paragraph should always contain certain pieces of information. Nor is it flexible if you want to vary the presentation fro any reason (we will look at some reasons why you might in [#chapter.single-sourcing]). It is important to condition yourself so that when you look at these kinds of problem the first question you ask yourself is, is there a way I can factor out this constraint. Only resort to trying to impose a constraint if it is not possible to factor it out.  
    
    By the way, using data-oriented {subject-domain} markup like this also offers some interesting publishing possibilities. For instance, with this markup in place, you could easily query your set of recipes to create a cookbook of recipes you can make in 30 minutes or less because you can query your set of recipes and pull out just those in which the `prep-time` field has a value of 30 minutes or less.

    Are there other elements of presentation that we can factor out of the recipe structure? As we noted, the reStructuredText version above specify a table presentation for the ingredients. Our recipe structure currently specifies a simple list. The block that contains it is labeled "ingredients", but the contents of the block is just an ordinary unordered list. 
     
    There is a relevant constraint here, one which authors need to follow, but one that our markup does not yet impose or record: how to express ingredients. The specification of ingredients in a recipe generally requires three pieces of information, the name of the ingredient, the quantity, and the unit of measure used to express this quantity. These can be presented as a list or a table. To factor out the presentation choice, we can create an ingredient structure that calls out each piece of information separately:

    ```(sam)
        ingredients:
            ingredient: 
                name: eggs
                quantity: 12
                unit: each
            ingredient:
                name: water
                quantity: 2
                unit: qt


    There are some shortcuts we can take to make this markup less verbose. (This is a markup syntax named SAM that I will talk about later):

    ```(sam)
        ingredients:: ingredient, quantity, unit
            eggs, 12, each
            water, 2, qt

    By adding and recording these constraints, we get similar benefits as before. We can better enforce any constraints we have about how ingredient lists are structured and formatted, and we gain access to the specific data involved, meaning, for example, that we could write an algorithm to convert our units from imperial to metric for publication in markets where metric units are preferred.
    
    section: A key difference between subject and document domains

        At this point we can see that with subject domain markup, we have a lot of choices about how documents are constructed. This highlights an important difference between document domain and subject domain markup. A document domain markup language specifies the content and order of a document. We expect that the document domain markup will specify exactly what content is to appear on the page and in what order. This is necessary in the document domain because the document domain does not record any information about the specific subject matter of individual pieces of text. We can't write an algorithm to publish certain pieces of a document domain file, because the markup does not record which are which. (More on this in the next chapter.)
        
        In pure document domain structured writing, the structures created when writing express the author's intent about the rhetorical presentation of the content. But if the author was complying with any specific rhetorical constraints, they did so without any guidance or constraint from the document domain language. The language may have imposed general rhetorical constraints, like how to structure a procedure, but noting specific to the subject matter.  
        
        When we move to rhetorically-focused subject domain structure, the a specific rhetorical approach to the subject matter is enforced on the author and expressed by the structures they create. With these subject-specific rhetorical structure in place, you could begin to select different blocks of content to be included or excluded. As we factor out more of the presentation, we can do more and more to manipulate the presentation algorithmically. The recorded content no longer specifies exactly what content is to appear on the eventual rendered page and in what order. Rather it is a collection of identifiable pieces of content that you can select from or reorder for publication. 

        Let's suppose we run a publishing company that publishes a number of magazines. We want to create a common store of recipes for use in all the magazines. But different magazines have different requirements. _Wine Weenie_ magazine needs to have a wine match with every recipe. _The Teetotaler's Trumpet_, naturally, wants a non-alcoholic suggestion. 

        Here is how that might be handled in the document domain:

        ```(xml)
            <section publication="Wine Weenie">
                <title>Wine match</title>
                <p>Pinot Noir</p>
            </section>
            <section publication="The Teetotaler's Trumpet">
                <title>Suggested beverage</title>
                <p>Lemonade</p>
            </section>
        

        This is an example of what we call {conditional text}(algorithm). The `publication` attribute on the `section` element says, display this text only in this publication. (This makes it {management metadata}(concept), which we will talk about in [#chapter.management].)

        By contrast, this is how this might be handled in the data-oriented subject domain structures:

        ```(xml)
            <wine-match>Pinot Noir</wine-match>
            <beverage-match>Lemonade</beverage-match>

        This markup says nothing about which documents should contain either of these pieces of information. Nor does it contain the subheadings what would introduce either of them in the appropriate publication. All these decisions are now left to algorithms. This allows us to do far more things with this content without having to rewrite the source files in any way. 

    section: Using subjects to establish context

        In [#chapter.document-domain], we noted that we can use context to identify the role that certain structures play in a document, which allows us to get away with fewer structures. For instance, we can use a single `title` tag for all titles because we can tell what kind of title each one is from the context in which it occurs. The same is true with subject domain structures. They can provide context that allows us to treat basic text structures differently. 
            
        Consider our markup language for recipes:

        ```(sam)
            recipe: Hard Boiled Egg
                introduction:
                    A hard boiled egg is simple and nutritious.
                ingredients:: ingredient, quantity, unit
                    eggs, 12, each
                    water, 2, qt
                preparation:
                    1. Place eggs in pan and cover with water.
                    2. Bring water to a boil.
                    3. Remove from heat and cover for 12 minutes.
                    4. Place eggs in cold water to stop cooking.
                    5. Peel and serve.
                prep-time: 15 minutes
                serves: 6
        
        With the ingredients, we saw that we needed to add additional structure to factor out whether the ingredients would be presented as a list or a table. For the preparation, the steps are currently marked up as a numbered list.  Suppose we want to present the steps as steps, rather than just as a generic numbered list (for instance, by labeling them as *Step 1.*, etc, rather than just *1.*). Do we need to create an additional `step` structure to do this? Not necessarily. In this case we can can tell the difference between an ordinary ordered list and a set of preparation steps based on context. We can write a rule in the {presentation algorithm} that creates special formatting just for ordered lists that are the children of `preparation` elements that are children of `recipe` elements (just as we could create rules to format a nested list differently from its parent list based on its context in [#chapter.document-domain]).
                
            
