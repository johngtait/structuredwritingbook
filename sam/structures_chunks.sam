chapter:(#chapter.blocks) Blocks, fragments, paragraphs, and phrases

    <<<(annotations.sam)

    I said that the structure of a structured writing document is made up of nested blocks. The question is, how do I design a content structure as a set of nested blocks. To begin we should look at the different types of blocks you might create, their purpose, and how they relate to each other. While most markup systems don't make a high-level distinction between different types of blocks (in XML, they are all elements, for instance), from a language design point of view it is useful to break down blocks into different types, each of which requires a different kind of design focus.  
    
    section: Semantic blocks
    
        If we asked a writer to describe the things that make up a document, they would probably name things like paragraphs, tables, and lists. If we asked about a particular type of document, such as a recipe, they would probably say things like introduction, ingredients, and preparation procedure. A structured writing language will typically be much more fine grained than this. A table, for instance, may be made up of dozens of smaller structures like rows, cells, and cell contents. But tables, procedures, and list are the units that have meaning to writers independent of how they are constructed internally. Without knowing anything about the mechanics of structured writing, a writer could design the rhetorical structure of a piece of content as a set of such blocks. They might say, for instance, that a recipe consists of an three main blocks: introduction, ingredients, and preparation, without thinking about markup languages at all.
    
        At the risk of adding further burden to an already overloaded term, I am going to call these recognizable objects "{semantic blocks}(concept)" because they are blocks that mean something in whichever domain they belong to. Higher level markup design is essentially a matter of defining semantic blocks and the ways they go together. 
        
        An easy example of a semantic block is a list. (Note that I am not using "semantic" to mean subject domain; blocks have semantics in all domains.) A list is a semantic block because "list" is an idea with meaning in the document domain independent of its exact internal structure. A writer can say to themselves, "I want a list here", independent of any specifics of markup. If a structure has a name like this in the real world, the block that implements it (in the terminology I am coining for this purpose) is a semantic block. 
        
        Semantic blocks generally contain other blocks that we might not talk about independently if we did not need to describe the detailed construction of a semantic block. I will call these "structural blocks". Structural blocks are the construction details of a structured document. By analogy, if a window were a semantic block in architectural terms, the lintel, sash, and jamb are structural blocks.
        
        Don't think of the distinction between a semantic block and a structural block as being hard and fast. The distinction has more to do with design intent that any concrete characteristic. The main point of making the distinction is to encourage you to think of markup design first in terms of semantic blocks. Blocks, with whatever internal structure you require, that will capture the structure of something that is real and meaningful to you. Don't get bogged down in the precise structure of semantic blocks until you figure out which semantic blocks you need.    
        
        Different markup languages often construct the same semantic block differently. {DITA}, {DocBook}, and {HTML} all define lists, and each of them defines the internals of a list differently. Nonetheless we recognize that each of them is an implementation of the idea of a list and for most purposes you could markup your content with any one of them without any loss of functionality. 

        A list is made up of structural blocks that build the shape of a list. I'll illustrate this with XML since it makes the blocks explicit:
        
        ```(xml)
            <ol>
                <li>
                    <p>This is the first item.</p>
                </li>
                <li>
                    <p>This is the second item.</p>
                </li>
            </ol>
            
        Here the semantic block is the ordered list bounded by the `ol` tags. The `li` and `p` tags inside are structural blocks that together implement the structure of an ordered list. (Since we would tend to regard paragraphs as semantic blocks, albeit relatively simple ones, this illustrates that a semantic block can also be a structural block for a larger semantic structure.)
            
        Other {document domain} examples of semantic blocks include {tables}(structure) and {procedures}(structure). (Again you will find that DocBook, DITA, and HTML, not to mention S1000D, and {reStructuredtext}, all have tables, all with different internal structures, and that both DocBook and DITA have procedures, again internally different. It is possible to disagree greatly about how to structure a semantic block while still recognizing different implementations as examples of the same semantic block. 

        In the subject domain, examples of semantic blocks would include the ingredients list from the recipe example we have been using:
        
        ```(sam)
            ingredients:: ingredient, quantity, unit
                eggs, 3, each
                salt, 1, tsp
                butter, .5, cup

        and the parameter description from an API reference:
        
        ```(sam)
            parameter: string
                required: yes
                description:
                    The string to print.

        One characteristic of semantic blocks is that they often tend to repeat as a unit, as this example does in an API reference entry:

        ```(sam)
            function: print
                return-value: none
                parameters:
                    parameter: string
                        required: yes
                        description:
                            The string to print.
                    parameter: end
                        required: no
                        default: '\n'
                        description:
                            The characters to output after the {string}(parameter).
        
        They may also be used as a unit in different places in a markup language, or in different markup languages. For instance, the ordered list semantic block may be allowed in more than one place in a document domain language, such as in a section or in a table cell. 
        
        In fact, if you have multiple markup languages in your content system, particularly multiple subject domain languages, then it makes a lot of sense to define a common set of semantic blocks for use across all of these languages. Thus if you have five subject-domain languages that all require lists, you use the same list structure across all five of those languages.

        This means that you can define the structure of a list once, and define all of the algorithms that work on lists once, and reuse them for all of the subject-domain languages that share those structures. It also means that your authors only have to learn one definition for each semantic structure, which makes it much easier for them to learn several different subject domain languages, since many of the details are the same. 

        This means that each subject domain language only has to define, and provide processing algorithms for, those structures that are unique to the subject matter. All the other structures you need to create content in your environment are already defined, tested, and ready to use. This makes it much quicker and simpler to design and implement a new subject domain language when you need one.         

        Designing in terms of semantic blocks not only helps keep markup design and processing simpler, it also improves {functional lucidity}. Present the markup language to the writer as a set of familiar objects like lists or tables, or logical structures like ingredient list or parameter description, rather than a sea of tags, and the task becomes easier to understand (and the tags easier to remember).  
        
        Semantic blocks also make things easier for tools. An XML editor that implements a WYSIWYG interface to XML authoring may provide tool bar buttons for inserting semantic blocks such as list or tables. This allows the author to enter these blocks as complete structures rather than having to enter all the tags that comprise them separately. 

        The structure of a semantic block can be strict or loose. A strict semantic block has one basic structure with few options. A loose one allows a much wider variety of structure inside, sometimes to the point that it acts more as a semantic wrapper than a defined semantic block. 

        {DocBook} is an example of a language with very loose semantic blocks. DocBook has the same high-level semantic blocks as any other generalized document domain tagging language, but so many tags are allowed in so many places that none of these objects are simple and easy to understand. This supports DocBook's goal of being able to describe almost any document structure you might want to create, but at the expense of simplicity and constraint.

        How do you balance flexibility with functional lucidity and constraint in creating semantic blocks? Sometimes it is best to have more than one implementation of a particular semantic block. For instance, both DITA and DocBook have two tables model, as simple model and a more complex one based on the CALS table model. 
        
    section: Information typing blocks

        We have looked at examples of {semantic blocks} whose semantics are in the {document domain} (lists and tables) and in the {subject domain} (ingredients list and parameter description). There is another way in which some structured writing systems divide content into blocks, which is according to the type of information they contain. I'm going to call these information typing block, since the practice of dividing content into such blocks is commonly called "information typing" (though this is obviously not the only thing the words "information typing" could refer to, since all structured writing assigns information to types). 
        
        An information typing block is a type of semantic block, but information typing blocks introduce a degree of abstraction not found with most semantic blocks. Unless they have been trained in an information typing system such as Information Mapping or DITA, most writers are not going to naturally describe the rhetorical structure of their content in terms of information typing blocks. 
        
        {Information Mapping}(tool) is a structured writing system which views all content as being made up of just six types of information block: Procedure, Process, Principle, Concept, Structure, and Fact. These are information typing blocks. They don't directly describe a physical or logical element of document structure (except for procedure), nor are they specific to any one subject. They describe the kind of idea that the content conveys -- they are actually based on a theory about how humans receive information. 

        Which structured writing domain do information typing blocks belong to? Clearly they are not {media}, {subject}, or {management domain} structures. Are they a kind of {document domain} structure or something else again? I believe it is more useful to regard them as document domain structures than to invent another domain. Information mapping is a theory about the construction of documents to make them more effective. It regards a document as a mapping of information typing blocks, so Information Mapping's information typing blocks are components of documents, and therefore in the document domain.       
        
        {DITA} also adopted this idea of documents being made up of information typing blocks. In DITA's case, these blocks are named topics, which leads to some confusion since the word topic can be used to refer to both information typing block, and also to a complete document (as in a "help topic" for instance). 
        
        DITA has popularized the idea that all content (or all technical content, at least) is made up of just three information typing blocks: concept, task, and reference.[*1] (DITA actually defines more topic types than this today.) This idea is appealing because it is simple and it is easy to see a correspondence between these three types and the reader activities of learning (concept), doing (task), and looking stuff up (reference). The question is whether it provides adequate or appropriate constraints for your content, and whether it is useful for partitioning the complexity of your content system.
        
        footnote:(*1)
        
            There is evidence that DITA is moving away from this vision of information typing. In DITA 1.3, the technical committee puts the emphasis on topic and map as the core types, rather than concept, task and reference.  
            
            """[http://docs.oasis-open.org/dita/dita-1.3-why-three-editions/v1.0/cn01/dita-1.3-why-three-editions-v1.0-cn01.html#focus-of-dita]
                The DITA Technical Committee wants to emphasize that topic and map are the base document types in the architecture.

                Because DITA was originally developed within IBM as a solution for technical documentation, early information about DITA stressed the importance of the concept, task, and reference topics.

                Many regarded the topic document type as nothing more than a specialization base for concept, task, and reference.

                While this perspective might still be valid for technical content, times have changed. DITA now is used in many other contexts, and people developing content for these other contexts need new specializations. For example, nurses who develop evidence-based care sheets might need a topic specialization that has sections for evidence, impact on current practices, and bibliographic references.
                
            The fact that the example of evidence-based care sheets clearly would include information from more than one of the abstract types, and that it is proposed as a specialization of topic rather than of concept, task, or reference, suggests a significant shift in thinking on this point, and that may indicate a shift away from abstract information typing towards a more concrete subject-domain approach.

        
        This simple triptych is also appealing because it promises (though it does not necessarily deliver) easy {composability} for {content reuse}. Some people also maintain that it makes content easier to access for readers, though others (myself included) criticizes it on the ground that it tends to break content down too finely for be useful and robs content of its narrative thread. Also, since neither Information Mapping nor DITA provide any mechanism for constraining how information typing blocks go together to form document, they do not provide much support of creating and maintaining repeatable rhetorical structures. (This does not mean that authors can't create such structures, but the complexity of doing so falls entirely on them, with the added complexity of having to construct the rhetorical structure out of jigsaw puzzle of abstract information typing blocks.) DITA, however, does allow you to create much more specific content types. See [#chapter.extensible] for more details.

        This abstract information typing is entirely distinct from the subject-based information typing of the subject domain. {DITA} and {Information Mapping}’s approaches are broad and analytical, trying to find commonalities across many different kinds of information. The subject domain is very much specific and synthetic, concerned which how specific pieces go together to successfully describe a particular subject. Both approaches break content up into blocks, and the subject-specific blocks of the subject domain can probably be categorized according to the information typology of either {DITA} or {Information Mapping}. 

        From a design point of view, the question is whether is is easier to arrive at a concrete structure for describing a particular subject by simply observing in concrete terms the particular pieces of information that are required to describe that subject, or by first identifying its abstract type and then deriving a specific type by extension or specialization of the abstract type. This is probably an area in which it depends on the designer's habits of mind. For me, defining specific types in concrete terms based on observed information needs is simple and more straightforward, but the result matters more than the process in these things and you should take which ever approach works for you.       
        
    section: Rhetorical blocks
    
        Neither semantic blocks not information typing blocks constitute a complete piece of content suitable for the reader to read. That unit is the unit that is rhetorically complete: that accomplishes the information transfer to the reader. I will call it the rhetorical block. Rhetorical structure is the structure of the rhetorical block. The structure of a rhetorical block is made of up smaller semantic and structural blocks, but it is the structural of the rhetorical block that provides control over the completeness and repeatability of a content type.
    
        The rhetorical block obviously comes in different sizes.  It could be a help topic, a web page, a chapter, an article in an encyclopedia, or a recipe in a cook book. Obviously too, the smaller and more specific the rhetorical block is, the more clearly defined and tightly constrained it can be. 
        
        The case for constraining the rhetorical block depends both on the nature of the material and information architecture you have chosen. For a discursive narrative book like this one, there is little practical you can do to constrain the rhetorical block that is the whole book, or the sub-rhetorical blocks that are the chapters. In a cookbook, on the other hand, the collection represented by the book as a whole is not a rhetorical block at all and it makes a great deal of sense to constrain the rhetorical block that is the recipe. 
        
        Constraining the recipe as a rhetorical block makes sense not only in terms of achieving repeatability in the optimal presentation of recipes. It also enables all kinds of other algorithms to work on the content. Yet all of the constraints that we have places on the source format for recipes, in order to achieve both differential single sourcing and content reuse goals, have been consistent with its rhetorical structure. When we require both a wine match and a non-alcoholic beverage match, even though we do not intend to present both together in any one publications, we are simply asking the author to provide two variants on the rhetorical structure of the output within the rhetorical structure of the output. We have, in other words, merged two slightly different rhetorical structures into one rhetorical source format. 
        
        
        It is probably fair to say that the rhetorical block is the largest unit of content to which we can usefully assign significant constraints. Or rather, the constraints that we impose on larger collections of content are of a different type and implemented in different ways from the constraints we impose on writing using structured writing techniques. 

        The rhetorical block differs also between the paper world and the hypertext world of the Web. On paper, a book consists of a basically linear series of chapters. On the Web, a site consists of a linked set of pages. But on the Web, pages are not restricted to linking to other pages on the same site, and search engines, which generate dynamic ad hoc links to pages rather than sites so that it is fair to say that the Web consists directly of linked pages, meaning that a narrative unit of hypertext relates itself to other content in a very different way from a narrative unit on paper.

        Increasingly, though by no means universally, the term  is used for the narrative block in structured writing terms is "topic". There is some confusion caused by DITA's use of the word topic for its information typing blocks, and some confusion in the DITA world too about whether Concept, Task, and Reference units should be presented as narrative blocks or not. 
        
        While both DITA and Information Mapping define documents as made up of information typing blocks, neither of them offer any constraint on how information typing blocks (or any other type of semantic blocks) go together to create narrative blocks. These systems do nothing, therefore, to handle or to partition and redirect any complexity related to the design and construction of narrative blocks. 

    section: Fragments
    
        Another division of content that can occur, mostly in relationship to the management domain, is the fragment. By fragment I mean a chunk of text that is not either a semantic block, a rhetorical block, or a narrative block, but is a block that you want to manage independently of the surrounding text. 
        
        For example, in a {content reuse} scenario, you might want to make a items in a list conditional based on which of the list items applies to different versions of a product. 
        
        Individual list items are not semantic blocks. They are just structural blocks of a list. When you make list items conditional, what you are actually doing is creating multiple separate lists with some items in common, and recording them as a single list. You might be able to attach reasonably informative metadata to any one of those lists as a whole, but there is not a lot you can say about list items individually. They are fragments of a list. When you apply conditions to them, then, you are applying those conditions to fragments. 
        
        In some {reuse} systems, including DITA and DocBook, it is possible to apply conditions to arbitrary bits of text -- three words in sentence for instance. The block that sets off those three words in a fragment. 
        
        Some reuse systems also allow you to reuse arbitrary bits of text from other parts of the content set, simply because the text is the same in each case. Those bits of text would be fragments. 
        
        In some cases, you turn an existing structural block into a fragment by attaching {management domain} metadata to it. In other cases, you have to introduce additional markup into the document to delineate the fragment. 
        
        Fragments definitely solve some problems. They are also inherently unstructured and unconstrained. It is very easy to get into trouble with fragments. It is easy to create relationships and dependencies that are hard to manage because they don't follow any structural logic. You should approach their use with great caution and restraint. 
    
        
    section: Paragraphs and phrases
    
        Paragraphs are the thing that make structured writing the most different from other computable data sets. This is not really because of the paragraph structure per se, but because of the phrases within the paragraphs that we want to annotate. It is rare in any other data set to see a structure floating within the value of another structure. But that is exactly what happens when we annotate phrases in a paragraph. 
        
        ```(sam)
            In {Rio Bravo}(movie), {the Duke}(actor "John Wayne") 
            plays an ex-Union colonel.

        In this examples, the annotation on the phrases "Rio Bravo" and "the Duke" float in the middle of the paragraph block. Here is the same thing in XML:
        
        ```(xml)
            <p>In <movie>Rio Bravo</movie>, 
            <actor name="John Wayne">the Duke</actor> 
            plays an ex-Union colonel.</p>

        Here the `movie` and `actor` elements float in the content of the `p` element. In XML parlance, this is called mixed content. If fact, XML breaks the structure of elements down into three kinds:
        
        |element content| Elements that contain only other elements. 
        
        |data content| Elements that contain only text data.
        
        |Mixed content| Elements that contain both text data and elements. 
        
        Mixed content is the reason that most traditional data format are not a good fit for content. They may be able to model element content and data content, but they lack an elegant way to model mixed content. 
        
        Even conventional programming languages have trouble with mixed content. In fact most libraries for XML processing invent an additional wrapper around each string of characters in a mixed content element, effectively representing it as if it were written like this (without mixed content):
        
        ```(xml)
            <p><text>In </text><movie>Rio Bravo</movie><text>, 
            </text><actor name="John Wayne">the Duke</actor><text> 
            plays an ex-Union colonel.</text></p>
        
        But while this makes the content palatable to conventional languages, it is clearly false to the actual structure of the document. Structured writing is essentially about reflecting the structure of thought or presentation in a narrative, and narratives have a structure that is not shared with other data. Indeed, we might say that all other data formats exist as an attempt to extract information from the narrative format to make it easier to process. 
        
        Thus we are taught in school that if we are presented a problem in this format:
            
        """
            John had 4 apples and Mary had 5 apples. They place their apples in a basket. Bill eats 2 apples. How many apples are left in the basket?
            
        You solve it by first extracting the data from the narrative:
        
        ```
            4 + 5 - 2 =
            
        But in content processing, we cannot extract the data from the narrative because narrative is the output we are creating. Thus we have to call out the data (to make it processable by structured writing algorithms) while leaving the narrative intact. 
        
        When you move content to the subject domain, you will, in some cases, break down paragraphs and isolate the data. This may be done with the intention of recreating paragraphs algorithmically on output, or of switching from a narrative to a data-oriented reporting of the subject matter. Either way, it makes the data easier for algorithms to handle, and thus makes most of the structured writing algorithms work better. (You may have noticed that the subject domain provides the most constrained and elegant solution to many structured writing algorithms.)
        
        Even so, it is rarely possible to do a complete breakdown of all paragraphs in refactoring content to the subject domain. Most subject domain markup languages make considerable use of paragraphs and other basic text structures, and annotate phrases within the paragraphs were necessary. Only narrative is capable of expressing the full variety and subtlety of the real world relationships between things, and only narrative is capable of conveying these things effectively to most human readers. (We noted in [#chapter.metadata] that data is created by metadata and that metadata can only every finally be defined by narrative.) Even things that can be fully described to algorithms with fielded data must be described to most audiences with narrative, and even though companies like {Narrative Science} are working on how to turn data into narrative, they are far from producing a general solution -- and it is hard to see how you would get one if all data is created by metadata and all metadata is defined, ultimately, by narrative. 

        {Subject-domain} structured writing extends the reach of more conventional algorithms into the world of narrative to enable specific structured writing algorithms and to provide constraints to improve the quality of the writing. Unlike {ontologies}(concept), subject domain structured writing does not attempt to capture the whole semantics of a narrative, just to discipline and structure narrative to achieve specific content creation objectives.
        
        Every domain needs to annotate phrases. {Media domain} structured writing needs to annotate phrases to describe formatting. The {document domain} needs to annotate phrases to describe their role in the document. The {management domain} needs to annotate phrases to assign conditions or extract content for reuse. The {subject domain} needs to annotate phrases to describe the subject the phrase refers to. 
        
        In planning your markup structures, therefore, it is important to think about which structures in your language need to be mixed content and which do not. Finding ways to avoid mixed content without violating the spirit of the essentially narrative nature of writing can pay dividends in an improved ability to express constraints and to execute virtually all the structured writing algorithms.
        
        On the other hand, some of the most important subject matter that you need to model and make available to algorithms cannot effectively be factored out of paragraphs, particularly while maintaining {functional lucidity}. Be prepared, therefore, to think seriously about the types of phrases that you will need to annotate below the paragraph level and exactly which domain those annotations should be in. 
        
        