chapter: Choosing

    <<<(annotations.sam)
    
    index:: type, term
        task, choosing 
        
    The information creation and delivery process ends when a reader receives a clear idea which enables or persuades them to act successfully. Part of the complexity of that process lies with the reader themselves. Readers do not always have a clear idea of what information they are seeking, or even what goal they are trying to achieve. They often lack the vocabulary of the domain of discourse in which experts in the field communicate. They often have to learn a lot of background before they can form their question correctly or understand its answer fully. In many cases, their goals change as their understanding grows. If your content is persuasive, they often need to seek confirmation or additional information before they decide to act.  
    
    It is an entirely proper goal for the writer to want to help the reader deal with their part of the complexity of information retrieval as much as they can, but there are limits to what they can know about the reader, their goals, and their background, and there are limits to how much it is possible for an outside party to influence the development of understanding in the reader. 

    In short, there is no Nurnberg Funnel. The Nurberg funnel is a myth used by {John Carroll}(author) in his book of the same name[*Carroll] to illustrate the difficulty of conveying information. The funnel was a device used to pour information directly into the head of a person. The point of Carrol's book is that content is not such a device. Remembered words are not actionable knowledge. Knowledge must be consolidated by action and experience.  Worse, the limit of what we can hope to do for the reader is fuzzy, and different for different readers. This makes it impossible to define perfection for an information delivery system. You cannot achieve perfection is the perfect state cannot be precisely defined.
    
    footnote:(*Carroll)
        {John M. Carroll}(author), {The Nurnberg Funnel: Designing Minimalist Instruction for Practical Computer Skill}, MIT Press, 1990.
        

    If the goal of structured writing is to help manage the complexity of the content system in such a way that no person or process in the system is ever faced with more complexity than they can handle, it is impossible either to define or achieve a perfect structured writing system, or, more broadly, a perfect content management system, or, more broadly still, a perfect content system. Complexity enters the system from both ends and in unpredictable ways.
    
    It is very difficult to measure the amount of complexity the reader is dealing with. Not only is it different for each reader, it is hard to measure the difficulties even one reader is facing. Worse still, it is hard to measure the economic consequences of the amount of complexity that the reader is facing in dealing with the complexity of information seeking, and it is hard to estimate the economic benefits that can be reaped by lessening that complexity. 
    
    

    Since we cannot remove all complexity from the reader, and since we cannot precisely define the minimum of complexity we can leave to the reader, and since, even if we could, we cannot effectively measure how much complexity the reader is actually dealing with, most content systems have never really seriously attempted to minimize the amount of complexity they dump on the reader. Quality and process have largely been treated as separate concerns, as if the process and its demands had no influence, for good or bad, on the quality of content that writers produced. The idea that you can build quality into the process by managing the complexity of the design and production process has not been widely considered. Where structured writing tools have replace desktop publishing or word processing tools it has largely been for process goals. But a more holistic view would show that process and quality are intimately related, and the treating them holistically can significantly improve both. This is not about dropping a new tool into place to replace an old one in the same process. It is about redefining your process to bring aspects of its complexity under control that have never been properly managed in the past.  
        
    section: Complexity
    
        Unless you are writing directly on paper, chiseling into stone, or drawing letters by hand in a paint program, you are using structured writing techniques to create content. You are using tools that have been designed to partition and distribute some part of the complexity of content creation in some particular way, and you are observing a discipline, a set of constraints, imposed by that partitioning. The question is, is that partitioning ensuring that all the complexity in your content creation process is being handled by a person or process with the skills, resources, and time required, or is complexity going unhandled in your system and getting dumped on the reader?
        
        If not all of your complexity is being appropriately handled, if complexity is falling through to your readers in the form of quality problems, then the question becomes, how do you change your approach to structured writing to handle complexity better. It is important not to approach this problem piecemeal. Complexity cannot be destroyed, only redirected, and every tool you introduce introduces new complexity which must also be partitioned and redirected. Attacking one piece of complexity in isolation usually results in complexity being directed away from the area you attack, but if you don't think about where that complexity is going, and how it will be handled, you can easily end up with more unhandled complexity that you started with.
        
        The very fact the structured writing has the ability to move the complexity around the system, imposing it on one role at the expense of another, makes the task of choosing a structured writing approach all the more complex. For instance, there has been a long history of IT departments choosing content management system on the basis that they were easy for the IT department to install and administer, only to have them be deeply unpopular with users because they pushed complexity out to authors and other users. On the other hand, some groups of authors want to write in uber-simple formats like Markdown, despite the difficulties that its limited structure and capabilities create for an overall publishing process. 
        
        Inconsistency, duplication, delay, error, and failure are escape valves for the complexity the no part of the organization is willing to accept. Traditionally, a style guide has become the dumping ground for complexity. Every new rule and requirement gets written into an ever growing style guide. 
        
        The growth in unhandled complexity will often be interpreted (especially by the advocates of the system you have just installed) as a change management problem or a training problem. But while change management and training are both necessary any time you change how you do things, the most likely cause of problems after the installation of a new system is design problems, specifically a system design that redirects complexity away from itself without consideration for how it is going to be handled. 
        
        Change management is another scapegoat for complexity that no one will own. It is very common to blame the failure of structured writing systems on unwillingness of writers to change. The cure, the backers of the system assure us, is more training and more generalization of the change. But what is usually going on in these cases is that the system design has dumped new and unmanageable complexity on whatever group is rebelling -- almost always the writers, either the full time writers or the occasional contributors. 
        
        Here is the inescapable fact: complexity is irreducible. It can be moved, not destroyed. The only way to remove complexity from a process is to stop doing something. Otherwise, when you simplify one processes, you add complexity somewhere else in the system. This is fine is all the complexity is handled by an appropriate person or algorithm, but it is all too easy to get caught up in the gains you expect from removing complexity from A and forget to pay attention to what the effect will be of the complexity you have added to B. The right way to design a structured writing system, therefore, is not to focus solely on where you can create simplicity, be were you can move complexity to, so that it can be handled efficiently and reliably. That means either distributing tasks between people with different skills sets or resources or transferring tasks to algorithms, and the people who build and maintain algorithms, or a combination of both. 
        
     

    section: Complexity mapping
    
        We should not assume either that the correct response to this problem is a new project to address each of those pieces of redirected complexity. A better solution will often be to rethink the approach to the original problem you attacked to see if a different partitioning and redistribution of complexity may produce less harmful side-effects -- if any complexity it directs away from itself, as opposed to handling internally, is calculated to be something that an external process and easily and reasonably handle. 
        
        Track the complexity of your system. 
        
        Look for hidden complexity. What is not being handled? Where have you surrendered to the limits of your current tools? Do a regression analysis on you known content problems. They all arise from unhandled complexity? Where did that complexity arise and why was it not handled? 

        Map journey of complexity through system. Compare to value stream mapping.    

    

        Principle\: partition and direct toward expertise. If the expertise is distributed, direct it outwards. If it is centralized, direct it inwards. Bottom up taxonomy, for instance, partitions language choices towards writers while allowing discovery and conformance to flow back to taxonomists. 
        
        
        
        Complexity is by no mean the same thing as effort. Structured writing systems that are well designed to support appropriate algorithms can reduce overall effort considerably, which significantly improving quality. But where they place complexity matters. Even if a task requires less effort, adding complexity to it changes how the person assigned to that task works, and how they need to be qualified and trained. It is important to appreciate how the distribution of complexity and effort in the system you choose affects the dynamics and composition of your team. 
        
        As is no doubt apparent to you by this point, I am a strong believer in distributing the complexity of a structured writing system away from writers. The reason for this is simple. When structured writing systems distribute complexity toward writers, they don't merely add a new and complex task that must be learned, they impose that complexity directly on the activity of writing itself. It is not really possible for the writer to segment the writing process from the process of creating structure. They are too bound up with each other. The whole point of structured writing is that they should be bound up with each other. Yet writing is an activity requiring the whole of ones attention. Any unavoidable division of that attention directly detracts from the quality of writing. 
        
        Any avoidable complexity should be purged from the writing process itself. Not all markup represents an addition of complexity, however. Effective subject domain markup can work to direct the writers attention into the appropriate channels, distributing design complexity away from the writing task and leaving more attention available for the task of writing itself. (This is the basis on which we use forms for all the things we use forms for.)

        Communication overhead is a source of complexity. There is a huge benefit to developing interfaces that reduce the need for communication between collaborators. 
        
        If the writer is thinking visually then giving them the tools to execute their visual removes the need for communicating with a designer and a layout artist. This was the DTP approach to this partitioning problem. The document domain approach is to try to get the writer to think in terms of abstract document structures rather than formatting. Again, this remove the need for communication with the designer and layout artist.
        
                
        
        Quality, change management, linking, etc can all be great sources of efficiency without recourse to the complexity and quality problems that plague many reuse schemes. Repeatability may save you far more money than reuse. It is reuse of design. Besides, reuse without repeatability is a recipe for poor quality and content management breakdown. 

        section: The transition to hypertext
        
            Many structured writing decisions are driven by short term desired to solve immediate problems like content reuse. But the world in in the middle of a transition from paper to hypertext. Almost every organization currently has to produce both, but most are not doing both well. And while specific requirements for paper may always exist, most information requirements in the future are likely to be met through hypertext. Our transition to a networked world is by no means complete. But the ongoing proliferation of networks and devices, the capacity to deliver content hands free through heads-up displays, the ability to build context sensitive devices that can bring up content relevant to what the user is looking at, and ongoing improvement in security, and a gradual shift in habits and regulations are moving us more and more into the hypertext world. 
            
            Reuse is a technique largely of the paper world. Single sourcing, and differential single sourcing in particular, belong largely to the transition period. Linking and the techniques of a bottom-up information architecture belong to the hypertext world. If you choose your tools and your structures primarily on the basis of the needs of the paper world or the transition period, you are likely to find yourself going through a similar upheaval in just a few years. As I have attempted to show, however, the subject domain supports all algorithms equally. Using your subject domain structures to drive reuse and differential single sourcing today and to drive linking and bottom-up information architecture tomorrow does not require a great upheval of tools and structures. 
            

        section: Indivisible complexity    
                    
            There are complex tasks which by their very nature have to be done by one mind. But there are also many tasks which have to be dome by one mind only because to partition them requires a transfer of information between one mind and another that we lack the means to perform. 
            
            
            Because attention is a limited resource, there is value in partitioning and distributing tasks even when you perform all of the tasks yourself. Partitioning the tasks allows you to give your full attention to each individual task and thus perform better than you could if your tried to divide your attention between them while performing both at once. 
            
            
            Additionally, partitioning complexity allows you to distribute parts of it to people with other skills sets who do not have the interest, attention, or skills to do the whole thing, but who can do parts of it adequately, or even superbly.
            
           
            In some cases, we reduce the complexity that falls on each contributor by gathering a particular complex operation from the many and distributing it to one uniquely qualified or equipped person. (Example, formatting.) In other cases, we do so by taking a complex operation currently being performed by a single person and distribute it out to many contributors. (Example, maintaining a Wiki.)
            
            
            The problem is, content, in its natural state, is not in a format that allows us to partition the complexity of writing from the complexity of formatting. If we are going to redistribute some aspects of complexity from writers to algorithms, we have to get the content into a form that algorithms can read. This, of course, introduces new complexity into the writing process. 

        
        
    section: Choosing domains
    
        Ideally, you should not really be choosing between structured writing domains. The decision to work in one domain or another should simply fall out of your decisions about how to partition and direct the complexity of your content system for maximum efficiency and quality. But in reality, each structured writing domain represents a major step outside of the comfort zone for everyone involved in the project. We are used to working largely at the more structured end of the media domain, and the steps into the full document domain and into the subject domain represent major changes of how you thing and work and how information and complexity flows through you system. These changes are disruptive, and disruption is a source of complexity in itself. Choosing to step into a new domain, therefore, has implications beyond the logic of how it partitions and distributes complexity in your system. 
    
        While individual circumstances can vary greatly, there are general patterns in how the use of different domains to implement algorithms distribute complexity within a system. Media domain systems are simple for small things, but provide no help for any kind of management or single sourcing algorithm, distributing all the complexity of those functions to the author and content manager. (Which results in complex content management systems.) They simplify ad hoc formatting of individual items but distribute all the complexity of conformance and consistency to authors. In short, they are simple in themselves but do nothing to alleviate the complexity of any other part of the publishing process. 

        The document domain distributes formatting complexity away from authors to the creators of publishing routines. However, a different kind of complexity can easily take its place if the number of document domain structures that people have to remember and use grows in order to support complex output requirements. If single sourcing is required, the document domain again distributes some of the complexity away from authors to the creators of publishing algorithm, with the limits we have noted in regard to {differential single sourcing}. By itself, the document domain, like the media domain, does little to alleviate other parts of the publishing process. 
        
        The management domain, in concert with the document domain, enables a range of content management features that would otherwise be either tedious or impossible. Content reuse is probably the prime example of this. Content reuse in pure media-domain or pure document-domain content is generally so complex that it would not be attempted without the introduction of management domain structures. However, management domain structures distribute a huge amount of complexity to authors, effectively shutting out contributors without specialized training and tools. 
        
        The subject domain distributes a huge amount of complexity away from authors, and, by making so many of the structured writing algorithms more reliable, it also distributes a lot of complexity and effort away from content mangers. However it distributes that complexity to the information architects and tools people who design the subject domain languages and write the algorithms that process them.  
        
        The subject domain has four  preeminent virtues:
        
        1. It does the most complete job of enabling most of the structured writing algorithms. 
        
        2. It does the best job of directing complexity, particularly management complexity, away from authors, allowing them to focus on content quality.
        
        3. Unlike the other domains, the same subject domain structures enable all the structured writing algorithms that use them. You don't generally have to add new structures to support new algorithms, a consideration that goes a long way to offset the initial expense of developing subject domain structures and algorithms.
        
        4. Because subject domain metadata only expresses truths about the content, it is by far the most future-proof format. Generally content only has to be changed if the subject matter it describes changes. 
        
        5. It empowers bottom up information architectures and bottom-up content management in ways no other domain can match. 
        
        
        
        
        Every time you move your content further towards ideas in a head and further from dots on a page, you add another layer of algorithms to your content system. This can seem daunting, when you can buy an off-the-shelf document domain system with its main algorithms already written. But such systems are highly complex, require a lot of management, and still require a fair amount of algorithm development, if only to get the output formatted the way you want. 
        
        But more to the point, such systems often do not do a good job of the total partitioning of complexity in your content system. In particular they often dump more complexity on your authors than they remove, and that added complexity can make more demands on the attention of authors than they care sustain, resulting in that complexity being dumped downstream again and ending up in the reader's lap. 
        
        The subject domain is probably more foreign to your current experience than the document domain, and the thought of developing and maintaining the information architecture and content engineering skill sets necessary to implement it may be daunting. But the subject domain is fundamentally simpler and more robust than complex document domain solutions, and handles the partitioning and distribution of complexity better than either simple or complex document domain solutions. As I have pointed out many times, in the document domain, a new set of structures are required for each algorithm you want to apply, whereas in the subject domain the same set of structures inform all algorithms. This can provide an enormous cost saving and makes you content much less prone to the gradual degradation of content quality and integrity than can plague document domain and subject domain systems. 


    section: Choosing tools
    
        How do you choose the right structured writing approach for your organization. Quite simply, you figure out how you want to partition and distribute complexity in your content system, and then you choose the languages, systems, and tools that allow you to implement that partitioning most efficiently. You may be able to do this will off the shelf tools, by customizing tools or frameworks, or by developing certain elements of your solution in house (or having a consultant do it for you). 
    
        Developing custom structures and algorithms and maintaining them is, of course, part of the complexity that tools always add to your content system, and so such development much be taken into account when you work out how to partition and distribute content complexity in your organization. But you should realize and accept that in some cases, without some degree of custom development it will be impossible to fully partition and direct complexity to people with the right skills, knowledge, and resources, without dropping any of that complexity and letting it fall through to your customers. 
        
        Unfortunately, structured writing systems are often designed with other priorities in mind. In particular, they are often designed with content management priorities in mind. Structures a designed to support content management algorithms with little attention paid to how those structures distribute complexity towards authors. 

        In the end, the question of where complexity is distributed in your system is at least as important, if not more so, than the question of how much effort is avoided. The wrong distribution of complexity can not only undermine quality, it can also undermine the attempt to reduce effort. Complexity in the wrong place not only undermines the productivity of those saddled with it, it also undermines the reliability of every other algorithm, thus undermining the attempt to reduce effort and cost in those algorithms.     

        The economics of this decision are clearly complex. You may decide that the cost of creating and maintaining the most appropriate algorithms and structures in not worth the cost or quality improvements they promise. But hopefully that decision can be made with a full appreciation of the benefits that those algorithms are capable of delivering. But whatever you decide, make sure you understand how complexity is being distributed in the systems that you implement, and very conscious of the ability of those you are distributing it to to handle it, and the effect it will have on their productivity and the reliability of their work.     


        Many tools are designed to attack one form of complexity or another  and are careless about where the complexity they create, or the existing complexity that they create, falls. Many DTP and structured writing tools, in particular, sought to solve publishing or content management problems by dumping complexity on writers, effectively shutting out many people in the organization out of the content system, or forcing them to set up separate rival content systems that they could manage. And since even the trained authors were often having more complexity dumped on them than their attention could manage, a lot of the complexity got dumped on the reader as well. 

        section: Scale
        
            The question of whether it is worthwhile to transfer complexity from one part of a process to another often depends on scale. Transferring complexity from a human to an algorithm, for instance, creates a complex task of writing, testing, and maintaining the algorithm. But algorithms don't cost any more to write, test, and maintain based on the amount of content you process with them. You have to pay a human every time they do the task by hand. You only have to pay them once to write and algorithm to do it automatically. 
        
            All of the algorithms we have discussed so far can be carried out either by humans or by algorithms. Algorithms are much faster than humans, but algorithms have to be designed, written, and maintained, and they don't have the same capacity as humans to adapt on the fly when conditions warrant it. They also require much more precisely structured inputs than humans, meaning that they require more work from human writers, at least for original content creation. (They may save writers work in all sorts of other ways, as we have seen.)

            How do you determine when it is worth the investment to design structures and algorithms and have your writers write structured documents, rather than having them just execute all the algorithms themselves. Issues of consistency and quality are important considerations here. There are also some information designs that are very costly to develop without the aid of algorithms. However, one of the key factors in making this decision is scale. 
            
            The issue of scale applies to many systems and many activities. A home kitchen does not work like a restaurant kitchen. The restaurant kitchen has multiple work stations as divides the work up among multiple cooks. They prepare ingredients in advance so that when an order comes in, they can prepare it very quickly. All the equipment, planning, and preparation costs money, but it pays off when you have to process a lot of food orders during a busy dinner shift. By contrast, a cook in a home kitchen starts with basic ingredients and does all the steps themselves to prepare a single meal for themselves or a small group. 
            
            The restaurant could not possibly keep up with orders if it worked the way a home kitchen worked. That method of preparation does not scale up to the throughput of a restaurant. Equally, though, the approach of a restaurant kitchen would not work for a home kitchen. The overhead of all the stations, the planning, and the advanced preparation would not be economical for preparing a single small meal. The approaches of a large-scale operation do not scale down to a small-scale operation anymore than the approaches of a small-scale operation scale up for a large organization. 
            
            The same is true of writing. 

        section: Avoid tool filters 
        
            It is very easy to fall into the trap of viewing our processes through the filter of our tools. Every tool reflects the tool-designer's view of how some or all of the complexity of the content system should be partitioned and directed. And since the partitioning and directing of the complexity of a system is the definition of process, tools are encapsulations of process. When you buy a tool, you buy the process it encapsulates, and long practice with the tools can shape how you view process. After a while, it is hard to manage a process in any other terms. Thus all too often when we spec a new tool, we essentially end up specking our old tool with some particular improvement we thing will make our lives better. But many cases, the improvement we are seeking is not compatible with the current tool. (If it were, the vendor would probably have included it in their ongoing attempts to drive upgrade sales through new features.) If your old tool won't cut it, chances are you need a different process from the one incorporated in that tool, and you are going to need to break through your tool filter to envision a new process. This is why this book has focused on algorithms and structures, not tools and systems: to help you overcome the tool filter in your process design decisions.

            Over the years I have seen many requirements documents for proposed structured writing systems that essentially said that the proposed system must work exactly like Microsoft Word. This is not surprising when the people writing the requirements have used nothing but Word to create content for years. The tools you know shape how you work and what you think of as possible. As Henry Ford is supposed to have said of the Model T, "If I asked customers what they wanted, they would have said faster horses." Even when we are dissatisfied with our current tools, we tend to want the same basic tool only more so. Faster horses. This is why so many structured writing tool vendors literally advertise that their editor looks and feels "just like Microsoft Word". (Not to mention those vendors who create tools that modify Word itself.)

            But Microsoft Word is a tools that sits on the boundary between the Media and Document domains. Using Word itself, or something that looks like Word, is usually an attempt to move its use slightly more into the document domain, but as we have seen, the WYSIWYG authoring interface invites a slide back into the media domain by hiding the structured that is supposed to be created and showing only the formatting that is supposed to have been factored out in adopting the document domain. 

            It is little to be wondered then that the structured writing tools that have been popular in the market to date have been predominantly document domain tools, and have tended, like DocBook, to be very loosely constrained. (It is much easier to write an XML document in a WYSIWYG editor if the underlying structures are minimally constrained, since it lets you insert whatever bit of formatting you want anywhere you want. 

            Even with tools like DITA, which, while it is still fundamentally a document domain system, is more constrained, and capable of being constrained further, tend to be used in its generic out of the box form and with a Word-like WYSIWYG interface.  

            Thus even when a decision-making process is based on business requirements rather that specific tools, it is often tacitly driven by existing tool sets and ways of doing things, because those existing tools and processes shape our view of what the business requirements actually are. We don't ask for a way to get from DesMoins to Albuquerque, we ask for a faster horse that eats few oats.   

        section: DITA
        
            DITA is such a dominant feature of the structured writing landscape at the moment that it is necessary to say something about it. 
            
            DITA, on the other hand is based on a rhetorical theory about what the building blocks of a document are and how they go together. That theory may be very foreign to the way you write and almost certainly a departure from the tools you have been using. 

            People rushing to DITA for its reuse capabilities often seem to be unaware that they are also buying into a rhetorical theory. Paligo essentially is providing similar reuse capability sans the rhetorical theory and the constraints that go with it.
            
            In evaluating DITA it is important to remember that you are getting two things in one box: a set management domain structures optimized for every type of document domain content reuse, and the generic implementation of a particular rhetorical theory. You can get various bundles of reuse capability from a number of other tools without the rhetorical theory in tow. Logically, therefore, the reason to choose DITA would be that your principle needs are met by the combination of its two components: its reuse capability and its rhetorical theory. You can get the rhetorical theory alone from information mapping and the reuse capability alone from several other tools. 
            
            DITA's specialization feature is not merely a technical feature, it is an extension of its rhetorical theory. It is not a tool that is necessarily suitable for other approaches to rhetorical modeling even if it is technically capable of achieving them. It is optimized for the block and map model of document construction and it a clumsy instrument for rhetorical modeling at the document level. Since it should be obvious to the reader by now that I believe strongly in the power of rhetorical modeling at the document level -- it is one of the central pillars of the Every Page is Page One information design approach -- I am not a fan of DITA. Everything I say about DITA in this book should be understood through the lens.       
        
    section: Counterpoint: In praise of complexity
    
        Throughout this book, I have stressed the role of structured writing in partitioning and redirecting complexity within the content system to make sure that no one person or process gets more complexity than they can handle, and that not of the complexity accidentally falls out of the process and lands on the reader's head. In particular I have stressed the value of redirecting complexity away from authors so that they can focus the whole of their attention on the content they are creating. 
        
        This suggests a model of communication and of process in which complexity is uniformly bad. Make each person's life less complex -- in particular, make each writer's life less complex -- and you will reliably make content better and probably reduce costs into the bargain.  
        
        But there is a counterpoint to this argument. The first part of that counterpoint is that you really cannot do high level composition for a steady eight hours day after day. Composition is not the whole of the writer's job, of course. You have to have something to write about, so research is essential, and probably takes more time than composition itself. Still, removing less mentally taxing tasks like formatting or searching for reusable content may not return a 100% productivity benefit because the writer may not have enough mental or physical energy to work at their maximum output all day every day. 
        
        The second part of the counterpoint is that to clean and environment, too reliable a process, can actually harm creativity. In {Messy: The Power of Disorder to Transform Our Lives}(citetitle), Tim Harford argues that complexity -- the different, the unexpected, focuses your attention, opening up your mind to see new possibilities. 
        
        When I started writing this book, I decided that I wanted to focus reader's attention on the structured of the content I showed in examples and that XML syntax tended to get in the way. So I devised SAM, a simple system using colons for labeled blocks and indents to show hierarchy. It was intended to be a clean way to show sample structure. It ended up becoming a full markup language, and I ended up writing the book in it. 
        
        Creating an entirely new markup syntax and writing the parser to process it into XML, obviously added a boatload of complexity to the project. True, it enabled me to purge my frustrations with writing in XML syntax, or, alternately, in a WYSITYG-like editor. But since I already knew DocBook, having written my last book in it, and I already owned an excellent XML Editor ({Oxygen}(tool)), the writing process would have been a lot less complex if I had written in DocBook, and even if I had switched to a lightweight DocBook equivalent like ASCIIDoc. I had to add and refine things in SAM syntax in order to make it easy enough and functional enough to write a work of this scale in. That meant several times when I had to put the book aside and work on the SAM spec and parser before I could come back to the book project. I also had another distraction when I became obsessed with seeing if I could fit SAM into the SPFE process. (Which it does.)
        
        All of this distraction and complexity almost certainly delayed the book. It also made it much better. Because working on SAM, and writing the book in it, helped me to figure out what my argument really was in this book. It helped me to categorize things. It helped me come up with the concept of functional lucidity, and that lead me to the idea that the point of structured writing was to partition and distribute complexity -- because I was inventing SAM to partition and distribute the parts of the of the structured writing process that had bugged me for years. Before that came to me, I was conscious that the book was a collection of techniques and ideas with no compelling overall theme. It was out of the distraction and complexity of inventing SAM that the central theme of the book emerged. 

        But thought originality and invention may well come out of complexity and distraction, that does not make unhandled complexity a universal good. Certainly it is not good for your occasional contributors, people who have other jobs and for whom writing is already a source of complexity and distraction in their work lives. Some insight may well come out of that distraction, either for the work they do, or for the content they create, but adding still more complexity in the form or complex tools and procedures or inadequate guidance in not likely to spark even more insight, and sill less to do so economically. 

        What about your full-time writers? Does the complexity they deal with every day pay for itself in terms of original insights? Does this distraction and the heightening of attention that comes with it, add to the quality of content more than the unhandled complexity of the content system damages it? Indeed, do the distractions and complexities really heighten attention if you deal with them all day, everyday? You may get better results from simplifying the repetitive parts of your writer's work and finding other ways to challenge them and keep their attention levels up. 

                 
        
        
