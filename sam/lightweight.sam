chapter:(#chapter.lightweight) Lightweight Languages

    <<<(annotations.sam)
    
    The term "lightweight markup language" has arisen in recent years and seems to describe that set of markup languages which are designed to use a lightweight syntax, that is, one that imposes a minimal burden on the readability of the raw text of the document. The primary appeal of lightweight markup languages rests on two related phenomena. 
    
    * They have a high degree of {functional lucidity} at the syntactic level and often at the semantic level as well. It is usually possible to read the raw markup of a lightweight language more or less as if it were a conventional text document. 
    
    * They can be written effectively using a plain text editor (as opposed to an elaborate structured editor with a graphical editing view). This means that the editing requirements are lightweight as well. 
    
    Most examples also come with a simple processing applications that creates output directly in one or more output formats. This means that they have a lightweight tool chain that is easy and inexpensive to implement. 
    
    There are a number of lightweight markup languages. Some of the more prominent include: 
    
    section: Markdown
    
        The most prominent of the lightweight languages, and arguably the lightest-weight, is Markdown. Invented in 2004 by John Gruber as a way to quickly write simple web pages using syntax similar to that of an text-format email, it has spread to all kind of systems and now exists is multiple variants that have been adapted for different purposes. 

        Adapted for different purposes mostly means that people have created version with specific additional syntax and semantics in addition to those of Gruber's first version. For instance, the code sharing site GitHub has adopted "Git Hub flavored markdown" as the standard format for user-supplied information on the site, such as project descriptions and issues, and has added syntax specific to tracking issue numbers and code commits for projects, allowing the automatic generation of links between commits and the issues that relate to them.

        Markdown is a simple {document-domain} language. While it semantics are essentially a subset of HTML, it is more squarely in the document domain than HTML since it lacks any ability to specify formatting or even to create tables (though various MarkDown flavors have added support for tables).  

        One of the recurring patterns of technology development, and certainly markup language development, is that when some simple format becomes popular because of its simplicity, people start to add "just one more thing" to it, with the result that it either becomes more complex (and thus less attractive) or more fragmented (and thus harder to build a tool chain for). Markdown is definitely going the route of fragmentation at the moment (though a standardization effort, in the form of CommonMark is also under way). There is even a project to add semantic annotation to MarkDown as part of the {Lightweight DITA}(system) project.
        
        None of this is a reason not to use MarkDown where its structures and syntax make it an appropriate source. MarkDown provides useful constraints on the basic formatting of a web page both by factoring out direct formatting features and by providing a very limited set of document domain features. These constraints help keep all contributors to a site from indulging in extravagant non-standard formatting or overly elaborate text structures. 
        
        It does not provide any kind of subject domain constraints at all. This may be a welcome feature when comparing it with more complex document domain languages, many of which do include some subject domain structures which can be confusing to some writers, or which writers may abuse to achieve formatting effects. 
        
        The inspiration for its syntax, text-format emails, has faded to obscurity, so it is not clear that everyone automatically knows how to write markdown, as was the original design intent, but a lot of it remains obvious and intuitive, meaning that, within it limits, MarkDown has good functional lucidity. 
        
        
    section: Wiki markup
    
        Another popular lightweight format is Wiki markup, introduced by Ward Cunningham in 1995 as the writing format for WikiWikiWeb, the first Wiki.[https://en.wikipedia.org/wiki/WikiWikiWeb] Wiki markup is similar to Markdown in many respects (most lightweight languages share the same basic syntax conventions, based on the imitation of formatted document features in plain text documents). What makes Wiki markup distinct is how it is tied into the operation of a Wiki. One of its most notable feature is how linking is handled. In the original WikiWikiWeb markup, and word with internal capitals was considered a "WikiWord" and instantly became a link to a page with that WikiWord as the title. Such a page was created automatically if it did not already exist. This was an extremely simple implementation of a {linking algorithm} based on annotation rather than the naming of resources. 
        
        A wiki is a type of simple {content management system}(tool) which allows people to create and edit pages directly from a web browser. Wikipedia is by far the largest and most well known Wiki. Wiki's are a preeminent example of a {bottom-up information architecture}. Anyone can add a page and that page is integrated into the overall collection by Wiki word style linking and by including itself in categories (conventionally by naming them on the page).
        
        Cunningham described WikiWikiWeb as "The simplest online database that could possibly work."[http://www.wiki.org/wiki.cgi?WhatIsWiki] Like Markdown, its success has led to additional features, fragmentation, and growing complexity. Some commercial wikis are now complex content management systems. Indeed, it is somewhat difficult today to define the boundaries between Wikis, Blog platforms, and conventional CMSs. 
        
        If Wikis have a defining characteristic today it is probably the bottom-up architecture rather than the original novelty of in-browser editing which is now found across many different kinds of CMS. Cunningham designed Wikis to be collaborative platforms -- places where people could collaborate with people they did not even know to create something new without the requirement for central direction or control. The idea was not only architecturally bottom-up but editorially bottom-up. Most Wiki products today, however, include considerable features for exercising a degree of central control. Question and Answer sites like Stack Exchange with their distributed and democratic control systems may be closer today to Cunningham's idea of a democratic creation space. 
        
        What Wikis illustrate for structured writing is that very simple markup innovations like the WikiWord can have revolutionary effects on how content is created and organized. Most Wikis today use ordinary words between double square brackets for WikiWords, rather than internal capitals, but the principle is the same. You can link to a thing merely by naming it. 
        
        Wiki words are also a case of {subject domain} annotation. Marking a phrase as a WikiWord says, "this is a significant subject". It does not provide type information like most of the subject domain annotation examples shown in this book, but merely denoting a phrase as significant says that it names some subject of importance that deserves a page of its own. This illustrates the point about bottom-up information architectures, that structured writing, even in very simple form, can crate texts that are capable of self-organization, that can be assembled into meaningful collections without the imposition of any external structures. 
    
    section: reStructuredText
    
        {reSturcuteredText} is a lightweight hybrid markup language most often associated with the {Sphinx} documentation framework which was developed for documenting the Python programming language. We looked at reStructuredText briefly as an example of a hybrid markup language in [#chapter.markup]. 
        
        Similar to MarkDown, ReStructuredText uses a plain text formatting approach to basic text structures. This part of the markup looks very natural because it uses characters and patterns that you might easily use to format a document if the only editor you had available were a plain text editor:
        
        ```(reStructuredText)
        
            Hard Boiled Eggs
            ================
            A hard boiled egg is simple and nutritious. 
            Prep time, 15 minutes. Serves 6.

            Ingredients
            -----------
                ======  ========
                Item    Quantity
                ======  ========
                eggs    12
                water   2qt
                ======  ========
                
            Preparation
            -----------
                1. Place eggs in pan and cover with water.
                2. Bring water to a boil.
                3. Remove from heat and cover for 12 minutes.
                4. Place eggs in cold water to stop cooking.
                5. Peel and serve.

        But reStructuredText also has a feature called directives which is used to create markup with more complex semantics. For this, reStructuredText takes the same approach as XML, using characters in a way that they are almost never used in a normal document. This approach simplifies parsing, because there is seldom any question about whether a particular pattern is intended to be markup of text, but it also makes it less natural to read and to write.
        
        ```(reStructuredText)
            .. image:: images/biohazard.png
               :height: 100
               :width: 200
               :scale: 50
               :alt: alternate text
        
        reStructuredText is therefore something of a syntactic hybrid as well as being a hybrid in the sense that it has both fixed concrete parts and extensible parts. 
    
    section: ASCIIDoc
    
        {ASCIIDoc} is a lightweight markup language based on the structure of {DocBook}. It is intended for the same sort of document types for which you might choose DocBook, but allows you to use a lightweight syntax. In appearance it is very similar to MarkDown, as shown in this example from Wikipedia:
        
        ```(ASCIIDoc)
            = My Article
            J. Smith

            http://wikipedia.org[Wikipedia] is an
            on-line encyclopaedia, available in
            English and many other languages.

            == Software

            You can install 'package-name' using
            the +gem+ command:

             gem install package-name

            == Hardware

            Metals commonly used include:

            * copper
            * tin
            * lead
            
        However, while {MarkDown} was designed for simple Web pages, ASCIIDoc was designed for complex publishing projects with support for a much wider array of document domain structures such as tables, definition lists, and tables of contents.
    
    section: LaTex
    
        LaTeX is a {document domain} markup language used extensively in academia and scientific publishing. It is not based on XML syntax but on the syntax of {TeX}, a typesetting system developed by Donald Knuth in 1978.[https://en.wikipedia.org/wiki/LaTeX] Here is an example of LaTex, from Wikipedia:
        
        ```(LaTex)
        
            \documentclass[12pt]{article}
            \usepackage{amsmath}
            \title{\LaTeX}
            \date{}
            \begin{document}
              \maketitle
              \LaTeX{} is a document preparation system for
              the \TeX{} typesetting program. It offers
              programmable desktop publishing features and
              extensive facilities for automating most
              aspects of typesetting and desktop publishing,
              including numbering and  cross-referencing,
              tables and figures, page layout,
              bibliographies, and much more. \LaTeX{} was
              originally written in 1984 by Leslie Lamport
              and has become the  dominant method for using
              \TeX; few people write in plain \TeX{} anymore.
              The current version is \LaTeXe.

              % This is a comment, not shown in final output.
              % The following shows typesetting  power of LaTeX:
              \begin{align}
                E_0 &= mc^2                              \\
                E &= \frac{mc^2}{\sqrt{1-\frac{v^2}{c^2}}}
              \end{align}
            \end{document}

        Here is how that markup is rendered:[By The original uploader was Bakkedal at English Wikipedia - Own work, CC BY-SA 2.5, https://commons.wikimedia.org/w/index.php?curid=30044147]
        
        >>>(image ../graphics/Latex_example.png)
        
        It is the markup for the equation that shows why LaTeX is popular for academic and scientific publishing. While not exactly transparent, the markup is compact and functionally lucid for anyone with a little experience with it. 
        
        Wikipedia offers a comparison of various math markup formats which shows how big a difference syntax can make to the lucidity of markup language in some cases. 

        For the equation:
         
        >>>(image ../graphics/quadratic_formula.svg)
        
        The LaTeX markup is:
       
        ```(sam)       
            x=\frac{-b \pm \sqrt{b^2 - 4ac}}{2a}
            
        Whereas the XML-based {MathML} version looks like this:
            
        ```(xml)
            <math mode="display" xmlns="http://www.w3.org/1998/Math/MathML">
             <semantics>
              <mrow>
                <mi>x</mi>
                <mo>=</mo>
                <mfrac>
                  <mrow>
                    <mo form="prefix">&#x2212;<!-- − --></mo>
                    <mi>b</mi>
                    <mo>&#x00B1;<!-- &PlusMinus; --></mo>
                    <msqrt>
                      <msup>
                        <mi>b</mi>
                        <mn>2</mn>
                      </msup>
                      <mo>&#x2212;<!-- − --></mo>
                      <mn>4</mn>
                      <mo>&#x2062;<!-- &InvisibleTimes; --></mo>
                      <mi>a</mi>
                      <mo>&#x2062;<!-- &InvisibleTimes; --></mo>
                      <mi>c</mi>
                    </msqrt>
                  </mrow>
                  <mrow>
                    <mn>2</mn>
                    <mo>&#x2062;<!-- &InvisibleTimes; --></mo>
                    <mi>a</mi>
                  </mrow>
                </mfrac>
              </mrow>
             </semantics>
            </math>
        
        Clearly MathML was not designed with the idea that anyone would ever try to write it raw. It is intended to be the output of a graphical equation editor.[*1] You might well choose to use a graphical equation editor to create LaTeX math markup as well, but it is certainly possible to write it and read it in raw LaTeX. 
        
        footnote:(*1)
            Interestingly, MathML comes in two different flavors. Presentation MathML is a {media domain} language describing how an equation is presented. Content MathML is a {subject domain} language describing what it means.
            
        LaTeX is not as lightweight a language as {Markdown}. It's markup is almost entirely explicit (except for paragraphs, which are delineated by blank lines just in Markdown. But it is certainly lighter weight in its syntax compared to XML-based languages and has much greater {functional lucidity}. There are a number of LaTeX editors, but they tend to be the same style of side-by-side style of editors also popular for {MarkDown}. That is, the author writes in LaTeX syntax and a preview is generated continuously in a separate panel. Sufficient functional lucidity to be able to write in raw markup rather than needing a graphical editor is the hallmark of a lightweight markup language. 
        
    section: Subject Domain Languages
    
        So far we have looked at languages that are primarily {document domain} oriented. The {document domain} is an obvious choice for a public language since the use of common document types like books and articles is widespread. But there are a number of public {subject domain} languages as well. One example that we have looked at before ([#chapter.merge]) is JavaDoc. Here is the example we looked at there:
        
        ```(Java)
            /**
             * Validates a chess move.
             *
             * Use {@link #doMove(int theFromFile, int theFromRank, 
             * int theToFile, int theToRank)} to move a piece.
             *
             * @param theFromFile file from which a piece is being moved
             * @param theFromRank rank from which a piece is being moved
             * @param theToFile   file to which a piece is being moved
             * @param theToRank   rank to which a piece is being moved
             * @return            true if the move is valid, otherwise false
             */
            boolean isValidMove(int theFromFile, int theFromRank, 
            int theToFile, int theToRank) {
                // ...body
            }
        
        Not only does JavaDoc have {subject domain} tags for parameters and return values, it effectively incorporates the Java code itself (all computer programs are structured text). Thus the JavaDoc processor will pull information from the function header itself to incorporate into the output. 
        
        There are a number of similar languages for documenting different programming languages, such a {Doxygen}(tool) which is used for multiple languages. Wikipedia maintains an extensive list at: {https://en.wikipedia.org/wiki/Comparison_of_documentation_generators}(url).

        It is difficult to find public {subject-domain} lightweight markup languages outside the realm of programming language and API documentation. This is probably because only programmers are likely to write their own parser in order to create a markup language. Most other people are going to choose an extensible language as a base, which today usually means {XML}. Part of my motivation for creating {SAM} is to provide a way to create {subject domain} languages with lightweight syntax. 
    
    
    section: SAM
    
        I've talked about {SAM} a couple of times now, and said that many of the examples in this book are written in SAM. That is true, in the same sense that some of the examples are written in XML. But this is not the same thing as saying that an example is written in {reStructuredText}. reStructuredText is a hybrid {document domain} markup language that predefines a large range of document domain structures. You can write a complete document in {reStructuredText} without defining any new structures. In other words, you can treat reStructuredText as a purely concrete language, and that is exactly what most people 
        
        SAM, on the other hand, cannot be used as a concrete language out of the box. While it has concrete lightweight syntax features, they need to be wrapped in a containing block, and SAM does not predefine any blocks. The most complex SAM document you can write without defining any blocks is a single paragraph or list. You need a block structure such as `topic` or `chapter` or `recipe` to contain everything and SAM requires you define those structures for yourself.  
        
        In this respect, SAM is much more like XML than reStructuredText. It is an extensible language that is intended to be used only when extended. It does not belong in this discussion of concrete lightwight markup languages, therefore. I'll get back to it in [#chapter.extensible].
