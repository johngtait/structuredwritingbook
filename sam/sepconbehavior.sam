chapter: Separating Content From Behavior

    <<<(annotations.sam)

    We have seen how you can use structure writing to separate content from formatting, but electronic media have behavior as well as formatting. In order to be able to publish our content to different media it is often necessary to separate content from behavior. And, just as we may sometimes want to format content different for the same media on different occasions, we may also want to publish content to the same electronic media with different behavior on different occasions or as part of different collections. 
    
    One of the simplest behavioral differences between paper and a Web browser is that the browser allows the reader to change the size of the window through which they view the content. The question is, does the text re-wrap to fit in the resized window. In many cases, it does, because that is HTML's default behavior. But sometimes it does not, and in some cases you want some content to re-wrap, but have other content maintain its line endings, even if that means not all of the text stays in the main window. Computer code and poetry are both examples of content you might not want to have wrap to fit the window, because the placement of the line endings is crucial. 
    
    How do you indicate that parts of your content should not be re-wrapped?
    
    In HTML the {pre}(element (HTML)) element is used to indicate preformatted text that should not be wrapped. The HTML5 spec defines its typical default formatting in CSS terms like this:
    
    ```(css)
        pre {
        display: block;
        font-family: monospace;
        white-space: pre;
        margin: 1em 0; }

    
    In other words, the content of a `pre` element will be displayed in a monospace font and will keep its original line endings, even if the text runs off the page.  This is pure {media domain} structure, of course. It tells you nothing about what sort of content is in the `pre` element or why it is to be presented with its line endings intact.
    
    {pre} clearly has a prejudice towards preformatted text being some form or computer code, or possible output, as it defaults to a monospaced font. But what if your content is poetry? You probably don't want:
    
    ```
        Mary had a little lamb.
        Its fleece was white as snow.
        And everywhere that Mary went,
        The lamb was sure to go.

    
    What you want is probably more like:
    
    | Mary had a little lamb.
    | Its fleece was white as snow.
    | And everywhere that Mary went,
    | The lamb was sure to go.
    
    To get that from HTML, you would need to use additional CSS instructions to get it to format correctly.
    
    ```(css)
        pre {
        font-family: serif;}

   
    And if have both computer code and poetry in the same page (and really, who doesn't?) then you will need to go back into your source and add different class attributes to your different uses of {pre}:
    
    ```(html)
        <pre class="code">
        main( ) {
            printf("hello, world");
        }
        </pre>

     
     and:
     
    ```(html)
        <pre class="poetry">
        Mary had a little lamb.
        Its fleece was white as snow.
        And everywhere that Mary went,
        The lamb was sure to go.
        </pre>

    
    And then the CSS stylesheet would look like this:
    
    ```(css)
        pre.code {
        font-family: monospace;}

        pre.poetry {
        font-family: serif;}

    There are other ways to do this in HTML. You could style a regular {p}(element (HTML)) with `white-space: pre;`. The fact that we have these options only serves to point out that we are still in the {media domain}. The behavior of maintaining line endings when resizing the window is not being separated from the content.

    To separate the behavior from the content, we need to move out of the {media domain}. In this case, however, a move into the document domain is not as straight forward as when we were {separating content from formatting}(algorithm). The difference between how code is formatted and how poetry is formatted is really based on the subject matter. Any document structures we create to separate content from behavior here are going to touch into the subject domain.
    
    The simplest way to do this would be to create elements for codeblocks and poetry:
    
    ```(xml)
        <codeblock>
        main( ) {
            printf("hello, world");
        }
        </codeblock>

     
     and:
     
    ```(xml)
        <poetry>
        Mary had a little lamb.
        Its fleece was white as snow.
        And everywhere that Mary went,
        The lamb was sure to go.
        </poetry>

    
    This markup simply states what type of content is found in each block. It separates the content from both its formatting and its behavior. Both formatting and behavior for different media will be handled by the formatting algorithm. This also means that the author does not have to think about the formatting of behavior of the content as they are writing. 
    
    The re-flowing of text to a window is a trivial bit of what is now called {responsive web design}(https://en.wikipedia.org/wiki/Responsive_web_design). Responsive design employs a combination of layout strategies and JavaScript code to change the whole structure of a website based on the size of the display window. This is all {media domain} stuff, of course, and it should be very clear that you do not want to be writing in the media domain yourself if you want to create responsive web pages. 
    
    Responsive web design involves handing a package of HTML, CSS, and JavaScript to the web browser, which then executes the responsive behavior. An alternative approach is {content adaptation}(https://en.wikipedia.org/wiki/Content_adaptation) which actually delivers a different page to the browser based on the device the browser is running on. This allows for more complex adaptations of content to the device. 
    
    One possible example of this is a table. On a large screen, a table can be an effective way to all the reader to quickly look up information on a particular item. But tables assume a certain amount of height and width is available to view the content. Put them on a small screen and either they are too small to read, or you see too small a portion of the table to view properly. In many cases, the small screen simply can't render the table correctly at all.
    
    >>(image "kindle-table.png")
    
    A content adaptation response to this problem would be to present the material as a table on paper and on screens large enough to show a table effectively, but in another format altogether. 
    
    
    
    
        
    