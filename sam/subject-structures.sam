chapter: Subject domain structures
    <<<(annotations.sam)
    
    index: type, term
        concept, subject structures
    
    A subject domain structure is one that is specific to a particular subject. As we have seen with our recipe example, there are two approaches to the subject domain. One it to create a document type that specifies how a particular subject is to be presented. Thus it defines subject domain blocks in terms of the document domain structures that should be used to present them. For example, it might specify that the ingredients of a recipe must be presented as a list:

    
    ```(sam)
        recipe: Hard Boiled Egg
            introduction:
                A hard boiled egg is simple and nutritious. 
                Prep time, 15 minutes. Serves 6.
            ingredients:
                * 12 eggs
                * 2qt water
            preparation:
                1. Place eggs in pan and cover with water.
                2. Bring water to a boil.
                3. Remove from heat and cover for 12 minutes.
                4. Place eggs in cold water to stop cooking.
                5. Peel and serve.

    Here the narrative block -- the recipe and its parts are in the subject domain, since they are specific to the subject of recipes, but the language is only specifying how to present a recipe. Presentation is a document domain concern, but here the presentation is specific to a single subject, putting this structure on the border between domains. The structural blocks that specify how the ingredients and preparations steps are to be presented are simply two different types of lists: document domain structures.
    
    This structure provide guidance for authors, which helps with repeatability, at the top level, but it does not provide a lot of support for validating things like the way ingredients are presented or making sure that the prep time and servings are always stated. 
    
    We can address these things by moving the recipe format further into the subject domain. To do this, we make data structure of any data that is already presented in fields, lists, or tables. (In other words, not in paragraphs.)
    
    ```(sam)
        recipe: Hard Boiled Egg
            introduction:
                A hard boiled egg is simple and nutritious. 
                Prep time, 15 minutes. Serves 6.
            ingredients:: ingredient, quantity, unit
                eggs, 12, each
                water, 2, qt
            preparation:
                step: Place eggs in pan and cover with water.
                step: Bring water to a boil.
                step: Remove from heat and cover for 12 minutes.
                step: Place eggs in cold water to stop cooking.
                step: Peel and serve.

    
    The next step is to look for data that is consistent across instances of the type and worthy of being constrained and made available to algorithms, and to pull it out of paragraphs and into structured fields, lists, or tables. Here we pull out the prep time and number of servings:
    
    ```(sam)
        recipe: Hard Boiled Egg
            introduction:
                A hard boiled egg is simple and nutritious.
            ingredients:: ingredient, quantity, unit
                eggs, 12, each
                water, 2, qt
            preparation:
                1. Place eggs in pan and cover with water.
                2. Bring water to a boil.
                3. Remove from heat and cover for 12 minutes.
                4. Place eggs in cold water to stop cooking.
                5. Peel and serve.
            prep-time: 15 minutes
            serves: 6

    The next step it to think about other information that you might want to capture. Usually during this process, people start to say things like "Wait, shouldn't we tell them X?" The process of formalizing the information you are proposing to offer often produces the realization that there is valuable information that you have not been providing. 
    
    ```(sam)
        recipe: Hard Boiled Egg
            introduction:
                A hard boiled egg is simple and nutritious.
            ingredients:: ingredient, quantity, unit
                eggs, 12, each
                water, 2, qt
            preparation:
                1. Place eggs in pan and cover with water.
                2. Bring water to a boil.
                3. Remove from heat and cover for 12 minutes.
                4. Place eggs in cold water to stop cooking.
                5. Peel and serve.
            prep-time: 15 minutes
            serves: 6
            wine-match: champagne and orange juice
            beverage-match: orange juice
            nutrition:
                serving: 1 large (50 g)
                calories: 78
                total-fat: 5 g
                saturated-fat: 0.7 g
                polyunsaturated-fat: 0.7 g    
                monounsaturated-fat: 2 g    
                cholesterol: 186.5 mg    
                sodium: 62 mg    
                potassium: 63 mg    
                total-carbohydrate: 0.6 g    
                dietary-fiber: 0 g    
                sugar: 0.6 g    
                protein: 6 g    

    

    The next step is to look through the remaining paragraph data for the mention of significant subjects that should be annotated, and to define the types of those annotations. This could include annotating things that you decided not to pull out of paragraphs into fields. For instance, if you decided not to pull out all mentions of cooking utensils from your recipe to make a list of required tools, you could annotate the mention of tools in recipe steps. (Or you could decide to do both, so you can validate one against the other.) 

    ```(sam)
        recipe: Hard Boiled Egg
            introduction:
                A hard boiled {egg}(food) is simple and nutritious.
            ingredients:: ingredient, quantity, unit
                eggs, 12, each
                water, 2, qt
            preparation:
                1. Place eggs in (pan){utensil} and cover with water.
                2. Bring water to a boil.
                3. Remove from heat and cover for 12 minutes.
                4. Place eggs in cold water to stop cooking.
                5. Peel and serve.
            prep-time: 15 minutes
            serves: 6
            wine-match: champagne and orange juice
            beverage-match: orange juice
            nutrition:
                serving: 1 large (50 g)
                calories: 78
                total-fat: 5 g
                saturated-fat: 0.7 g
                polyunsaturated-fat: 0.7 g    
                monounsaturated-fat: 2 g    
                cholesterol: 186.5 mg    
                sodium: 62 mg    
                potassium: 63 mg    
                total-carbohydrate: 0.6 g    
                dietary-fiber: 0 g    
                sugar: 0.6 g    
                protein: 6 g    

    Most {subject domain} languages are small, simple, and fairly strict in their constraints. This is as it should be. Since you have to design them, and the algorithms that translate them into the {document domain} for publishing, you don't want them to be elaborate or full of different permutations of structure. The point of a subject domain language is to partition the gathering of information about a subject from all the processes that you might want to perform on that content, from differential single sourcing, to linking, to information architecture, to content reuse.
    
    All subject domain structured essentially do the same thing: they isolate a piece of content and describe its relationship to its subject matter in precise terms. We said that data is created by metadata, and subject domain markup is the application of metadata to content to make it into data that can be accessed interpreted reliably by both people and algorithms. 
    
    If you find yourself needing a similar language for a related subject, it is usually better to create a new equally small, equally strict language for that subject rather than trying to make one language cover both. Subject domain languages get both their power and ease of use from the simple and direct way that the language related to its subject matter. Trying to make one language cover more than one subject takes away from these properties. If you have ever tried to fill out a government form in which different people or entities are supposed to fill out different fields in different ways, you know how difficult it can be to be sure you have filled out all the sections, and just the sections, that apply to you. It is far better to have one form for each case (though obviously you need to make sure that it is very clear which case each form applies to). 
    
    A subject domain language should communicate with the author in terms that they understand. This means that the names of structures should make sense to them, but it also means that the how the formal structures break things up should make intuitive sense as well. For an author with experience in the field, a subject domain language should be such a good fit that they don't really feel like they have to learn anything to use it. The vastly increases the {functional lucidity} of the language leaving more of the author's attention free to focus on content, while at the same time providing constraints and guidance that make sure that things are complete and consistent. 

    It is easy to get carried away with breaking things down into finer and finer pieces to formally describe the subject matter in finer and finer detail. Remember that all of this is wasted unless it enables one of the structured writing algorithms that matter to you. Remember too that {authoring} and {conformance} are among the algorithms. Making your markup mysterious, difficult, or tedious to create in the name of more precisely modeling the subject matter does more harm than good if reduces {functional lucidity} without creating a compensating increase in quality or efficiency. Again, this is an improper partitioning of the complexity of content: increasing complexity without any benefit in transferring complexity to a more appropriate person or process.    
    
