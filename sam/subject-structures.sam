chapter: Subject structures
    <<<(annotations.sam)
    
    index: type, term
        concept, subject structures
    
    When you create content in the subject domain, or add subject domain structures to document domain languages, the structures should reflect the subject matter rather than the presentation of the content. How exactly do you make this distinction? It is not always obvious, because even in the subject domain you are still often writing in {document-domain} structures like paragraphs and lists. As we have noted, a {subject-domain} structured writing language is not an {ontology}. It does not attempt to capture the entire semantics of a piece of content as formal data. It merely captures enough to enable the set of structured writing algorithms you are interested in, or to factor out constraints in other domains, or to increase functional lucidity. 
    
    This means that border between the {document domain} and the {subject domain} is somewhat fuzzy. There are {subject domain} structures in public document domain languages like {DocBook}, and there are {document-domain} structures in examples of {subject domain} languages that we have looked at, like recipes, movie reviews, and API references. 
    
    The key indication that you are in the {subject domain} is whether or not you could reasonably use the language to write about other subjects. {DocBook} has a number of {subject domain} structures related to software and computers, but you can ignore those structures (none of them are mandatory) and use DocBook to write recipes or movie reviews if you want to. Thus {DocBook} is a {document domain} language. Can you use our recipe markup language to write about software or movies? No. Can you use our API reference markup to write about preparing food? No. Therefore these languages are in the {subject domain}.
    
    There are document domain languages that are suitable for  only certain document types. {DocBook}'s `article` document type and {DITA}'s task topic are not specific to one subject, but they are specific to one type of document. Similarly, {MarkDown} is designed for simple web pages. {eLesson Markup Language}(language) (eLML) is a format for creating electronic lessons, but it is not restricted to lessons on a particular subject. It is therefore in the document domain. {Journal Article Tag Suite}(language) (JATS) is a language for scientific journals online. It is {document domain} because it is specific to a document type, not a subject.
    
    The development of a subject-domain language generally begins by formalizing the rhetorical structure of a document on that subject . As we have shown, you can write a recipe in a document domain language. It will still follow the template of a recipe: introduction, picture, ingredients, preparation steps. But that template will not be formalized or recorded in the content. So, the first step into the subject domain is to formalize the rhetorical structure:
    
    ```(sam)
        recipe: Hard Boiled Egg
            introduction:
                A hard boiled egg is simple and nutritious. 
                Prep time, 15 minutes. Serves 6.
            ingredients:
                * 12 eggs
                * 2qt water
            preparation:
                1. Place eggs in pan and cover with water.
                2. Bring water to a boil.
                3. Remove from heat and cover for 12 minutes.
                4. Place eggs in cold water to stop cooking.
                5. Peel and serve.

    
    The next step is to formalize the data structure of any data that is already presented in fields, lists, or tables. (In other words, not in paragraphs.)
    
    ```(sam)
        recipe: Hard Boiled Egg
            introduction:
                A hard boiled egg is simple and nutritious. 
                Prep time, 15 minutes. Serves 6.
            ingredients:: ingredient, quantity, unit
                eggs, 12, each
                water, 2, qt
            preparation:
                step: Place eggs in pan and cover with water.
                step: Bring water to a boil.
                step: Remove from heat and cover for 12 minutes.
                step: Place eggs in cold water to stop cooking.
                step: Peel and serve.

    
    The next step is to look for data that is consistent across instances of the type and worthy of being constrained and made available to algorithms, and to pull it out of paragraphs and into structured fields, lists, or tables. 
    
    ```(sam)
        recipe: Hard Boiled Egg
            introduction:
                A hard boiled egg is simple and nutritious.
            ingredients:: ingredient, quantity, unit
                eggs, 12, each
                water, 2, qt
            preparation:
                1. Place eggs in pan and cover with water.
                2. Bring water to a boil.
                3. Remove from heat and cover for 12 minutes.
                4. Place eggs in cold water to stop cooking.
                5. Peel and serve.
            prep-time: 15 minutes
            serves: 6

    The next step it to think about other information that you might want to capture. Usually during this process, people start to say things like "Wait, shouldn't we tell them X?" The process of formalizing the information you are proposing to offer often produces the realization that there is valuable information that you have not been providing. 
    
    ```(sam)
        recipe: Hard Boiled Egg
            introduction:
                A hard boiled egg is simple and nutritious.
            ingredients:: ingredient, quantity, unit
                eggs, 12, each
                water, 2, qt
            preparation:
                1. Place eggs in pan and cover with water.
                2. Bring water to a boil.
                3. Remove from heat and cover for 12 minutes.
                4. Place eggs in cold water to stop cooking.
                5. Peel and serve.
            prep-time: 15 minutes
            serves: 6
            wine-match: champagne and orange juice
            beverage-match: orange juice
            nutrition:
                serving: 1 large (50 g)
                calories: 78
                total-fat: 5 g
                saturated-fat: 0.7 g
                polyunsaturated-fat: 0.7 g    
                monounsaturated-fat: 2 g    
                cholesterol: 186.5 mg    
                sodium: 62 mg    
                potassium: 63 mg    
                total-carbohydrate: 0.6 g    
                dietary-fiber: 0 g    
                sugar: 0.6 g    
                protein: 6 g    

    

    The next step is to look through the remaining paragraph data for the mention of significant subjects that should be annotated, and to define the types of those annotations. This could include annotating things that you decided not to pull out of paragraphs into fields. For instance, if you decided not to pull out all mentions of cooking utensils from your recipe to make a list of required tools, you could annotate the mention of tools in recipe steps. (Or you could decide to do both, so you can validate one against the other.)

    ```(sam)
        recipe: Hard Boiled Egg
            introduction:
                A hard boiled {egg}(food) is simple and nutritious.
            ingredients:: ingredient, quantity, unit
                eggs, 12, each
                water, 2, qt
            preparation:
                1. Place eggs in (pan){utensil} and cover with water.
                2. Bring water to a boil.
                3. Remove from heat and cover for 12 minutes.
                4. Place eggs in cold water to stop cooking.
                5. Peel and serve.
            prep-time: 15 minutes
            serves: 6
            wine-match: champagne and orange juice
            beverage-match: orange juice
            nutrition:
                serving: 1 large (50 g)
                calories: 78
                total-fat: 5 g
                saturated-fat: 0.7 g
                polyunsaturated-fat: 0.7 g    
                monounsaturated-fat: 2 g    
                cholesterol: 186.5 mg    
                sodium: 62 mg    
                potassium: 63 mg    
                total-carbohydrate: 0.6 g    
                dietary-fiber: 0 g    
                sugar: 0.6 g    
                protein: 6 g    
    
    The final step is to think about whether there is any management domain metadata that you need to add to the model. Usually this will be for management or tracking purposes, and may not be part of any current content examples you are looking at. This should be the last step because once you have formalized the rest of the model you may find that that data is usable for management and tracking purposes as well, so you won't need to add additional fields just for management purposes. For instance, lots of the {subject domain} information that is already formalized in the model can be used for managing which recipes you include in particular publications, such as quick and easy meals (less than 20 minutes prep time, fewer than 6 ingredients, fewer than 5 steps) or a low-cal vegetarian cookbook (fewer than 160 calories, no meat ingredient).

    
    ```(sam)
        recipe: Hard Boiled Egg
            author: bcrocker
            rights: full
            season: winter, spring, summer, fall
            introduction:
                A hard boiled {egg}(food) is simple and nutritious.
            ingredients:: ingredient, quantity, unit
                eggs, 12, each
                water, 2, qt
            preparation:
                1. Place eggs in (pan){utensil} and cover with water.
                2. Bring water to a boil.
                3. Remove from heat and cover for 12 minutes.
                4. Place eggs in cold water to stop cooking.
                5. Peel and serve.
            prep-time: 15 minutes
            serves: 6
            wine-match: champagne and orange juice
            beverage-match: orange juice
            nutrition:
                serving: 1 large (50 g)
                calories: 78
                total-fat: 5 g
                saturated-fat: 0.7 g
                polyunsaturated-fat: 0.7 g    
                monounsaturated-fat: 2 g    
                cholesterol: 186.5 mg    
                sodium: 62 mg    
                potassium: 63 mg    
                total-carbohydrate: 0.6 g    
                dietary-fiber: 0 g    
                sugar: 0.6 g    
                protein: 6 g    

    Most {subject domain} languages are small, simple, and fairly strict in their constraints. This is as it should be. Since you have to design them, and the algorithms that translate them into the {document domain} for publishing, you don't want them to be elaborate or full of different permutations of structure. If you find yourself needing a similar language for a related subject, it is usually better to create a new equally small, equally strict language for that subject rather than trying to make one language cover both. 
    
    A subject domain language should communicate with the author in terms that they understand. This means that the names of structures should make sense to them, but it also means that the how the formal structures break things up should make intuitive sense as well. For an author with experience in the field, a subject domain language should be such a good fit that they don't really feel like they have to learn anything to use it. The vastly increases the {functional lucidity} of the language leaving more of the author's attention free to focus on content, while at the same time providing constraints and guidance that make sure that things are complete and consistent. 

    It is easy to get carried away with breaking things down into finer and finer pieces to formally describe the subject matter in finer and finer detail. Remember that all of this is wasted unless it enables one of the structured writing algorithms that matter to you. Remember too that {authoring} and {conformance} are among the algorithms. Making your markup mysterious, difficult, or tedious to create in the name of more precisely modeling the subject matter does more harm than good if reduces {functional lucidity} without creating a compensating increase in quality or efficiency.    
    
    Moving your content to the subject domain, in other words, is about doing the simplest thing that works to achieve a given outcome of a given quality. Sometimes {MarkDown} is the simplest thing that works, but there are lots of quality, management, and production goals that are hard to meet with {MarkDown}. Going to elaborate {document domain} languages is often the next step people take in pursuit of those goals, but these are not simple. In many cases, the {subject domain} may be the simplest thing that works for these larger goals. But it make it so, you need to make sure that your subject domain languages are as simple as they can be to get the job done.  