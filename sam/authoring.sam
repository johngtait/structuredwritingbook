sam:

chapter: Authoring

        It may not be immediately obvious that authoring is an algorithm. It is not part of the publishing chain of content. It is not something done to content, but something that creates content. 
        
        But as I have emphasized throughout this series on algorithms, the algorithms always begin with structures. But the only way we get the right content in the right structures is if authors create the structures we desire. Creating a set of content structures while thinking only about how they will feed publishing or content management structures is a recipe for a system that is difficult to use, expensive to implement and run, and subject to ongoing data problems. You will not get good data for any downstream algorithms unless you structures are engineered for ease of correct authoring. 
        
        Ease of correct authoring is a key idea here. It is easy enough to find easy ways to author content that do not produce correct and consistent structures. The trick is to make it easy for authors to write content in correct and consistent structures. And the trick to that is not to try to re-engineer the authors, but to re-engineer the structures so that they are easier to create in a correct and consistent way.
        
        In many cases, the attempt to make authoring easy as been an afterthought, treated as a tools question rather than an question of structure design. Markup languages are designed to feed publishing or content management algorithms. The tools such as XML editors are used to provide pseudo-WYSIWY interfaces and various widgets are created to help authors create the often complex management domain metadata involved. The problem with this approach is that at best it addresses the mechanical ease of use issues of creating and managing this complex markup. It does not address the conceptual ease of use issues that arise from the author needing to understand the algorithms that act on this complex and abstract markup. 
        
        Hiding markup, in other words, does not factor out structure. There is an additional problem with this approach, however, which is that hiding markup often hides the structure. It makes the authoring process look superficially easier, but it actually makes things more difficult because it still asks authors to create structures while presenting an interface in which these structures are not visible. 

        
        
        How is engineering structures for ease of authoring consistent with engineering them to match the specific constraints that we want to impose for the sake of quality and efficient processing? As we have seen, moving content between the domains is a matter of factoring variants from invariants. By refactoring our structures we can produce radically different structures that can still be passed through the same publishing tool chain, simply by adding another processing step. To get to structures that both support our publishing and quality goals and support ease of correct authoring (which is essential to achieving those goals) we refactor our content into a form that is comfortable for our authors while still containing the structure needed for downstream processing. 

        One of the most important consequences of this, both for ease of authoring and reliability of data, is that in the subject domain, you are not asking the author to think and to structure content in terms of algorithms. In this sense, the move to the subject domain not only factors our specific constraints from the author, it factors out the need to think in algorithms at all, leaving the author free to think in terms of subject matter.
        
        This kind of meta refactoring, where you are refactoring the author's whole working model is extremely powerful. It can have profound impacts on content quality and the ease of the authoring experience. At the same time it may create resistance or confusion for some types of authors, such as technical writers, who tend to be responsible for the whole publishing process, not just the the writing piece of it. This means they have always been responsible for the publishing algorithms. When working in the media domain, they executed these algorithms themselves. When working in the document domain they have created structures that were directly related to the algorithms they understood and felt responsible for. 
        
        For instance, for indexing, they created index markers, for links they created xref structures. Yet as we have seen, in the subject domain both these things go away and their functions is replaced by subject annotations. This is much easier for authors who don't want to think about linking and indexing algorithms, but disconcerting for those who are used to thinking about them.
