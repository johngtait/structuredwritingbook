chapter: Markup

    Through much of this book so far I have talked about markup without really explaining it. Markup is the way much, but not all, structured writing is done. Let's look at the alternative and the varieties of approaches to markup.
    
    First, structured writing, in the broadest sense, is writing that applies any form of structure (any set of constraints) to writing. As such, most forms of writing on a computer, other than perhaps in a straight text editor without the use of markup, are structured writing since they all contain text in structures. 
    
    All writing programs have to store the writing in files. There are two possible file types they can use: binary and text. 
    
    For all intents and purposes, a binary file is one that can only be read or written by a computer program, usually the program that created it. Open up a binary file in a text editor and you won't be able to make heads or tails of it. And even if parts of it look like plain text, editing those sections and saving the file is likely to result in a corrupt file that the original application can no longer open. 
    
    A text file, by contrast, is one that you can open in a text editor and actually be able to read and write without breaking it. But to express structure in a text file, you need a way to interpolate structure into the text. The way we interpolate structure is with markup -- special sequences of text characters that are recognized as defining structure rather than expressing content. There are three broad areas of application for markup.
    
    |Application independence| With binary files, it is possible to obscure how the file is interpreted, making it more difficult to write other applications that can edit the file. With markup, it is generally much easier to create other applications that can read and write the same file. 
    
    |Ad hoc structure definition| If you need to define a structure to serve a particular purpose, perhaps one that will be used for relatively few documents, then you need a simple and inexpensive way to create that structure. Markup can provide such a format. 
    
    |Human reading and writing| Markup makes it possible for humans to read and write files that are processable by computers. All markup formats make it possible for humans to read and write the files, but not all formats make it easy. As we shall see, some formats are much easier to write in than others. 
       
    section: Markup vs content
    
        A markup language file consists of a stream of text characters. Since it records both structures and content, it needs to distinguish the characters that record content from the characters that describe structure. To do this, certain patterns or sequences of characters are recognized as "markup". The markup describes the structures. 
        
        An example of markup is an HTML tag. Tags are set off by opening and closing angle brackets:

        ```(HTML)
            <h1>Moby Dick</h1>
            <p>Herman Melville's <i>Moby Dick</i> is a long book about a big whale.</p>
        
        
        HTML uses open angle brackets `<` to indicate the start of markup and closing angle brackets `>` to indicate the end of markup and a return to content. Actually the recognition of markup in HTML is a little more complicated than that, but that is more detail than we need to get into at this point. What matters is that there are certain sequences in the text which trigger a processing program (generally called a "parser") to recognize when markup starts and when it ends.
        
        What if you want to enter these "markup start" characters into the content of your document? You can't just type them in because the parser will think they are markup. To fix this, markup languages either define "escape" characters, that signal the parser to treat the following character as content, or they include markup for inserting individual characters in a way that won't be confused with markup. HTML takes the second approach. To include a `<` character in HTML, you use another type of markup called a "character entity." A character entity is a code for a character. It begins with `&` (another "markup start character), followed by a character code and ending with a semicolon. The character entity for `<` in HTML and XML is `&lt;`. ("lt" us short for "less than", the name of the `<` character.) 
        
        ```(html)
            <p>In HTML, tags start with the &lt; character.</p>
            
        This will display as:
        
        """
            In HTML, tags start with the < character.
            
        Since `&` is also a markup start character, we need to replace it with a character entity as well if we want to include it literally. To include a literal `&` you use the character entity `&amp;`. 
        
        ```(html)
            <p>In HTML, character entities start with the &amp; character.</p>
            
        This will display as:
        
        """
            In HTML, character entities start with the & character.
            
        To include the literal sting `&amp;` therefore, you would write `&amp;amp;`.
        
        
        ```(html)
            <p>The character entities for an ampersand is &amp;amp;.</p>
            
        This will display as:
        
        """
            The character entities for an ampersand is &amp;.
        
    section: Markup languages
    
        A set of markup conventions taken together constitutes a markup language.  {Markdown}(language), {DocBook}(language), and {JavaDoc}(language) are all markup languages. However, each of these languages recognizes markup in a different way. `&` may be a markup start character in {HTML}(language) and {XML}(language), but it is just plain text in {reStructuredText}(language).
        
        But not all languages rely on a fixed set of markup start characters or sequences. Some rely on patterns in the text instead. For example, Markdown recognizes a line beginning with a number followed by a period as markup for a list item. Numbers and periods do not have any significance generally. It is only when they occur in this particular pattern that they are use to recognize structure. 
        
        ```(markdown)
            1. This is a list item. It starts with 1.
            
        This traslates into HTML as:
        
        ```(html)
            <li>This is a list item. It starts with 1.</li>
            
        The sequence `1.` is recognized as markup at the start of the line, but not in the middle of it.
           
    
    section: Concrete markup languages
    
        We can usefully divide markup languages into three types which I will call: concrete, abstract, and hybrid. 
        
        A concrete markup language has a fixed set of markup that describes a fixed set of content structures. For example, {Markdown} is a concrete markup language that uses a markup that is designed to mimic the way people write plain text emails. Here is the same passage as above written in Markdown:
        
        ```(markdown)
            Moby Dick
            =========
            
            Herman Melville's _Moby Dick_ is a long book about a big whale.
        
        In {Markdown}, a line of text underlined with equal signs (`=`) is a level one heading. A paragraph is a block of text set off by blank lines. Emphasized text is surrounded with underscores or asterisks. 
        
        In Markdown, these patterns correspond directly to specific concrete document structures. You cannot invent new structures without inventing a new version of Markdown. 
        
    section: Abstract markup languages
    
        An abstract markup languages does not describe specific concrete document structures directly. It describes abstract structures which can be named to represent structures in any domain. 
    
        XML is an example of an abstract markup language.[*1] The markup in an XML file does not directly indicates things like headings or paragraphs. Instead, it indicates a set of abstract structures called elements, attributes, entities, processing instructions, marked sections, and comments. 
        
        footnote:(*1)
            The formal term for a language like XML is "meta language", a language for describing other languages. In calling XML an "abstract" language, I am focusing on a different property, its use of structures that are not parts of a document but generic containers. A meta language needs such abstract containers. But I find that the term "meta language" is not helpful to most readers, so I have chosen instead to focus on this property of using abstract structures as opposed to the concrete structures of a language like Markdown. 
            
        None of these abstract structures describes document structures in any of the structured writing domains. Instead, specific markup languages based on XML (or its cousin, SGML) indicate subject, document, management, or media domain structures as named instances of elements and attributes. 
        
        ```(DocBook)
            <section>
                <title>Moby Dick</title>
                <para>Herman Melville's <citetitle>Moby Dick</citetitle> is a long book about a big whale.</para>
            </section>

        
        Thus in the example above (which is in {DocBook}(language), a language based on {XML}), the document domain structures "section", "title", and "para" are defined by XML elements named, respectively, "section", "title", and "para". The generic `<i>` tag from the HTML example has been replaced with them more semantically specific `<citetitle>` tag, which in {DocBook} means the name of a literary work. Both "i" and "citetitle" are modeled as XML elements in DocBook. 
        
        XML elements are generic abstract structures. To create markup to represent  real document structures, you give names elements. Named elements can then represent any {media}(concept "media domain"), {document}(concept "document domain"), {subject}(concept "subject domain"), or {management domain}(concept) structure that you want, thus allowing you to create a markup language that suits a specific purpose.
        
        Unlike a Markdown parser, an XML parser does not see paragraphs or titles. It sees elements. It passes the elements it finds, along with their names, down to a processing application which is responsible for knowing what "section", "title", and "para" elements mean in a particular markup language like DocBook. The parser is common to all XML-based languages, but the processing application is specific to DocBook. 
        
    section: Instances of abstract markup languages
    
        This means that {DocBook} is a specific instance of the abstract language {XML}. Many common markup languages are instances of XML[*2]. XML is virtually the only abstract language used for content these days so it is the only abstract language I am going to talk about.
        
        footnote:(*2)
            Sometimes also referred to as "applications" of XML, though this usage was far more common in the days of SGML.
        
        So let's revise my earlier statement: We can usefully divide markup languages into *four* types: concrete, abstract, instances of abstract, and hybrid. In fact (spoiler alert), lets revise it again: We can usefully divide markup languages into *five* types: concrete, abstract, instances of abstract, hybrid, and instances of hybrid. 
        
        By these definitions, abstract and hybrid are not language types you can actually write content in, they are languages that you can use to define other languages that are instances of them. Despite how we often use the term, you don't actually write in XML, you write in DocBook or DITA, which happen to be instances of XML.[*3] Thus in terms of actually writing content, we really do have just three types of markup languages: concrete languages, instances of abstract languages, and instances of hybrid languages. 
        
        footnote:(*3)
            Or to put it another way, you write in DocBook semantics using XML syntax. Alternatively, since DocBook originated in the days of XML's predecessor abstract language, SGML, you can write DocBook semantics in SGML syntax. 
        
    section: Concrete languages in abstract clothing
    
        The key defining characteristic of an abstract language is the use of abstract named structures like elements. All elements share a common markup start sequence followed by the element name. This creates a named block of content.  But concrete languages can use named blocks too. For example, {JavaDoc}, a concrete language for describing Java APIs, uses named blocks using `@` as a markup start character:
        
        ```(Java)
            /**
             * Validates a chess move.
             *
             * Use {@link #doMove(int theFromFile, int theFromRank, int theToFile, int theToRank)} to move a piece.
             *
             * @param theFromFile file from which a piece is being moved
             * @param theFromRank rank from which a piece is being moved
             * @param theToFile   file to which a piece is being moved
             * @param theToRank   rank to which a piece is being moved
             * @return            true if the move is valid, otherwise false
             */
            boolean isValidMove(int theFromFile, int theFromRank, int theToFile, int theToRank) {
                // ...body
            }

        # Duplicate of content in publishing algorithms chapter
        
        In this sample, `@param` and `@return` are named blocks. But in JavaDoc, there is a fixed set of named blocks that are defined as part of the language. You can't create a new language by defining your own block names. By contrast, {XML} itself defines absolutely no element names. Only instances of XML, like {Docbook}(language), define element names. 
        
        A particularly notable example of a concrete language in abstract clothing is {HTML}. HTML looks a lot like an instance of XML, but it is not. An XML parser cannot parse most HTML. HTML is nominally an instance of SGML but never did quite conform to it. XHTML is a version of HTML that is an instance of XML. {HTML5}(language) actually supports two different syntaxes, one of which is an instance of XML and one of which is not, meaning that it has both a concrete syntax and a syntax which is a instance of an abstract language. (Sigh. This is consequence of having made a mess early on and having to live with it for evermore. A lesson for all markup language designers.)
                       
    section: Abstract languages are extensible
    
        The downside of concrete languages is that their concrete syntax defines a fixed set of structures. If you want other structures, there is no way to create them short of inventing your own concrete language, or a variant on and existing one, and coding the parser and all the other tools to interpret that language. And designing new concrete languages is non-trivial because you need to make sure that any combination of characters that the writer may type is interpreted in an unambiguous way. Many versions of Markdown, including the original, contain ambiguities about how certain sequences of characters should be interpreted as defining structures. 
        
        If you want to define your own structures to express the constraints that matter to your business, you need an easier way to do it. Abstract languages like XML make this much easier. You just write a {schema}(tool) describing the structures you want, and any algorithms you need to process those structures. 
        
        
    section: Abstract languages are constrainable
    
        Extensibility allows you to add structures to a language but does not place restrictions on where they can occur. 
        
        Extensibility allows you to have elements called `ingredients` and `ingredient` and `wine-match`. Constraints allow you to require that `ingredient` only occurs inside an `ingredients` structure and that the content of the `ingredients` structure must be a sequence of `ingredient` elements and nothing else. Constraints lets you say that writers can't put `wine-match` in the `introduction` or as a `step` in the `preparation`, they can only put it as a child of `recipe` after the `servings` field and before the `prep-time` field. Constraints allow, you to require that every recipe have the full list of nutritional information.
        
        Constraints are what bring discipline to structured writing. They drive content quality and enable efficient reliable processing with algorithms. Constraints make it easier to write good algorithms because they limit the number of permutation of structures that you have to deal with.
               
    section: Showing and hiding structure
    
        The whole point of structured writing it to create content that meets constraints and that records the constraints it meets so that it can be reliably validated, audited, and processed. For this to happen, authors need to see the structures they are creating. In the {media domain}(concept) a WYSIWYG interface shows your the media domain structures you are creating. But what about in the other domains? The document domain creates abstract document structures that are deliberately separated from their formatting. The subject domain creates subject-based structures that don't have a one-to-one relationship with any organization or formatting of a document. The management domain creates structures that have nothing to do with the representation of content at all. How does the author get to see these structures when writing in these domains?
        
        This is a big problem with XML, the only abstract language in widespread use today. XML tends to hide structure. As an abstract language, an XML document is a hierarchy of elements and attributes -- not the subject, document, management, or media domain structures the author is supposed to be create. Those structures are present in the markup because their names are there, but they are not visually distinguished the way the basic document structures are in a concrete language like Markdown. And XML syntax is verbose, meaning that there is a lot of clutter in the raw text of an XML document, which makes it hard to discern both the structure and the content.
        
        To remove that clutter, many authors use XML editors that provide a graphical view of the content similar to that of a word processor. But while XML editors removes visual clutter, they also hide the structure. Even if the author is supposed to be working in the document domain or the subject domain, the editor is now displaying content in the media domain. As we have discussed before, these kinds of displays tend to {encourage authors to backslide into the media domain}[#chapter.document-domain]. And we know very well how bad the structure can be that is produced by the typical HTML visual editor.
        
        And then there are the problems that arise when you try to edit the WYSIWYG view of an XML document. Underneath is a hierarchical XML structure, but all you can see it the flat media-domain like view of the graphical editor. Editing or cutting and pasting structures you can't see can be an exercise in futility and frustration. You can learn to do it, but it is frustrating and it takes time, and even when you learn, the process is still more complicated than it should be. 
        
        Concrete markup languages like Markdown, on the other hand, show you the structure you are creating and are simple to edit. 
        
    section: Hybrid languages
    
        There are significant advantages and significant disadvantages, then, in both concrete and abstract languages. Hybrid languages try to find a middle way. 
        
        By hybrid, I mean a language that combines both abstract and concrete markup in one language. A hybrid language has a base set of concrete syntax describing basic text structures as well as abstract structures such as XML's elements and attributes that can be the basis of extensibility and constraint.
        
        An example of a hybrid markup language is {RestructuredText}(language) (usually shortened to "reST"). Like {Markdown}(language), it has a basic concrete syntax for things like lists and paragraphs. But it also supports what it calls "directives", which are essentially named block structures. For example, a codeblock in reST looks like this:
        
        ```(reST)
            .. code-block:: html
                :linenos:

                <h1>code block example</h1>

        
        reST provides an extension mechanism that allows you to add new directives. But while reST directives are similar to XML elements, reST predefines a core set of directives for common document structures. The `code-block` directive above is not an extension of reST, it is part of the core language.  
        
        Because it defines a large set of document oriented directives, reST is inherently a document domain language. You could, of course, add subject domain directives to it. Most document domain languages in use today include some subject domain structures, reflecting the purpose they were originally designed to serve. Nonetheless, reST is inherently document domain. 
        
        Another important note about reST is that it has no constraint mechanism. You can add new directives, but you can't constrain their use, or the use of the predefined directives. 

        I have been developing a hybrid markup language which is designed to be both extensible and constrainable. I call it SAM (which stands either for Semantic Authoring Markdown or Semantic Authoring Markup, as you please). SAM is the language I have been using for most of the examples in this book, and have been promising all along that I would eventually explain. 
        
        Here is the same example used above, written in SAM:
        
        ```(sam)
            section: Moby Dick
            
                Herman Melville's {Moby Dick}(novel) is a long book about a big whale.

        
        In SAM, as in Markdown and most other concrete markup languages, a paragraph is just a block of text set off by white space. Thus there is no explicit  structure named `p` or `para`.
        
        At the beginning of a line, a single word without spaces and followed by a colon is an abstract structure called a block. The word before the colon is the name of the block. Thus `section:` above creates a block structure named "section". 
        
        Blocks can contain blocks or text structures such as paragraphs and lists. The hierarchy of a SAM document is indicated by indentation. Thus the paragraph in the sample in indented under the section block. This removes the need for end tags, which reduces verbosity, and it helps make the structure of the document visually clear. 
        
        Within a paragraph, curly braces markup a phrase, to which you can attach an annotation in parentheses. Here the phrase "Moby Dick" is annotated to indicate that it is a novel. SAM also supports decorations like the underscores in the Markdown example, so in the {media domain} "Moby Dick" could have been written `_Moby Dick_`. 

        SAM is not intended to be nearly as general in scope as a purely abstract markup language like XML. It is meant for semantic authoring (which is to say, structured writing). As such it incorporates a number of shortcuts to make writing typical structured documents easier. 
        
        In a typical document, a block of text (larger than a paragraph) typically has a title. So in SAM, a string after a block tag is considered to be a title. That means that the markup above is equivalent to:
        
        ```(sam)
            section: 
                title: Moby Dick
            
                Herman Melville's {Moby Dick}(novel) is a long book about a big whale.

        
        Unlike reST, however, SAM does not have an extensive set of predefined blocks. It has just a few, which correspond the the basic text structures for which it provides shortcuts or concrete syntax. And SAM is designed to have a constraint mechanism, allowing you to write a schema to define what blocks and annotation are allowed in s SAM document. This will include constraining the use of the concrete syntax as well. SAM thus represents a different type of hybrid. 
        
        Also unlike {reST}(language), SAM is not intended to have its own publishing tool chain. SAM is really intended for creating {subject domain}(concept) languages, with just enough basic concrete document domain structures to make writing easier. SAM outputs an {XML}(language) file which can then be further processed by any existing publishing tool chains by transforming it into an appropriate document domain language.
              
        Most concrete markup languages, at least those designed for documents, try to make their marked-up documents look and read as much as possible like a formatted document. SAM is designed to be easy and natural to read, like a concrete markup language, but it is also designed to make the structure of the content as clear and explicit as possible while requiring the minimum of markup. This is why it uses indentation to express structure. Indentation shows structure clearly with a minimum of markup noise to distract the reader's eye. 
        
        Because it is meant specifically for authoring, the SAM parser outputs XML, which can then be processed by the standard XML tool chain. Below is how the SAM markup above would be changed to XML:
        
        ```(XML)
            <section>
                <title>Moby Dick</title>
            
                <p>Herman Melville's <phrase><annotation type="novel"/><text>Moby Dick</text></annotation> is a long book about a big whale.</p>
            </section>

        
        This book is authored in SAM. Most of its examples are in SAM. I'll describe SAM more fully another chapter. 
                
       
    section: Instances of hybrid markup languages
    
        I said above that this book is written in SAM, but that is not quite accurate. As noted above, you can't write anything in an abstract or hybrid language directly. You write in instances of those languages. Thus DocBook is an instance of the abstract language XML. You can write documents in DocBook. We do say, of course, that we write documents in XML, but that statement is, if not wholly inaccurate, certainly non-specific. Saying the a document is written in DocBook tells you what constraints it meets. Saying it is written in XML merely tells you which syntax it uses, which is a whole lot less informative.
        
        So, to be more specific, this book is written in a markup language written in SAM, one that I created for the specific purpose of writing this book. That markup language was then transformed by a processing application into DocBook, which is the markup language that the publisher uses for producing books. 
        
        
        
        
        
    

        
    
    
    
    
    
    
   
    