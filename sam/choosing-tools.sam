chapter:(#chapter.tools) Choosing Tools

    The standard advice on setting up a structure writing system is that you should choose your tools last. That is, that you should decide on you business goals first, then choose the structured writing domain and/or specific language you want to use, and then, and only then, go shopping for tools that meet those requirement. 
    
    This sounds good in theory, but it is not quite so simple in practice. Different types have different costs and require different skill sets. To entirely ignore tools until everything else is decided could lead you to choosing a system that is not economical or is too hard for you to use or maintain. And if {functional lucidity} is one of your goals, it cannot be separated from tools. 
    
    Here is another way to think about it. Tools are not just hardware and software. A structured writing tagging language is a tool. It is a tool you will select or design and it is the tool with which your writers will interact the most in their day to day work. The tagging language you choose or create will have a far greater impact on {functional lucidity} than any choice you make about editors or repositories. 
    
    
    
    section: Monoliths vs tool chains
    
    section: Editors and development environments

    section: Parsers and processing tools

    section: Static site generators
    
    section: Content management systems
    
    section: DITA-OT
    
    section: SPFE
                
    section: Buy vs Build
    

        The buy vs build decision is one of the most important you can make in implementing a system for any purpose. 
        
        But today it is seldom a straight dichotomy. Most of the things we buy, we customize to meet our needs. So it is really more a matter of buy and use the defaults vs buy and customize vs build. 
        
        But it is not as simple as that either. Today we are increasingly recognizing the virtue of using loosely coupled systems. That is, rather than using a single integrated tool to do the whole job, we use a tool chain: many small tools working in serial or in parallel with well defined interfaces between them. So the real choices are default vs customize vs integrate vs build. 
        
        When we integrate, we have the same choice with each of the tools we use to build our system: default vs customize vs integrate vs build. 
        
        Some of the tools we have discussed recognize this pattern and are themselves constructed of loosely coupled pieces so that you can make the default vs customize vs integrate vs build decision within that framework. This does not mean that all systems designed like this are equivalent, though. I matters very much how the divide their functionality into pieces, how cohesive each of the pieces is, how loose the coupling, and how adaptable the integration framework (the thing that allows you to string the pieces together) is. 
        
        When it comes to the cost of the tool itself, the order of preference is usually:
        
        default > customize > integrate > build
        
        In other words, unless a tool is outrageously expensive off the shelf, it is usually cheaper to buy and use the defaults and progressively more expensive to customize, integrate, and build. 
        
        But this if far from telling the whole story. While you should obviously try to find a tools whose defaults are closest to what your organization needs, off the shelf tools obviously have very generic defaults. In terms of the ability to meet your needs precisely, the order of preference is:
        
        build > integrate > customize > default 
        
        In other words, in order to meet your needs precisely, unless you are very lucky, the defaults of an off the shelf system will not suit your organization particularly well, and you will be able to meet them progressively better if you customize, integrate, and build. 
        
        Working around the limitations of generic system defaults creates costs in terms of inefficiency and lost quality. A system that meets you needs better will generally cost less to run and will help you make more money. Of course, many people and many organizations do choose to work with the defaults or to mildly customize off the shelf tools because while they may be inefficient compared to a custom solution, creating a custom solution not only involves greater costs, it is also outside their range of expertise. Indeed, not knowing how to create and maintain a custom tools set is probably a more compelling reason to stick to off the shelf tools than the costs of building. 
        
        On the other hand, as we said from the beginning, all writing you do with digital looks is structured writing. When we talk about moving to structured writing, what we mean is adding more structure to our writing in order to better serve a business need. At a certain point in this progression, you pass the point at which the added structure you need can be found off the shelf. At this point, adding more structure, particularly structure which is specific to your business needs, structure which enforces or factors out constraints that are important to your process efficiency and content quality, means moving in the direction of customization, integration, and building.
        
        Indeed, whether intended or not, many organizations find themselves going down this road. There is a pattern in many organizations where the initial decision is to buy off the shelf and use defaults but over time the need to better meet organizational needs leads to customization, then to integration with other tools, and finally to building some pieces themselves. Whether or not the original plan was to stick with defaults, needs and circumstances push people down the customize, integrate, build path. 
        
        The upside of this approach is that is is gradual and so is based on what the organization has learned about their needs over time. The downside is, the original tools were not chosen with ease of integration in mind. The integrations that get done are often ad hoc and brittle. Over time, the system can become fragile and it can be difficult to do further customization, integration, or building without breaking something. 
        
        No tooling lasts forever. One of the lessons we should learn from this is that content that is tied to a tool is going to create large problems for us when we are inevitably forces to change tools. Tool independence is often touted as the benefit of moving to structured writing, or more specifically of moving to XML. However, it is not the markup format that makes content independent of tools. If you use a format that has a lot of management domain markup, for instance, that ties your content that to tools that support those management semantics. DITA content, for instance, is portable between different DITA tools, but not to non-DITA tool chains. Pure document domain and pure subject domain formats have a much greater degree of independence. 
        
        Then again, we should not raise tool independence above all other considerations. Migrating content between tools is a cost, and a particularly thorny one because you often need to do it in a hurry in order to maintain production while executing a tool change. But maintaining tool independence above all other considerations may not be the most cost effective approach if you give up the specific business benefits of all other tools. 
        
        The default, customize, integrate, build decision is one that is filled with bogeymen. People will tell you never to do this or never to do that. But in the end it all comes down to cost benefit analysis. You can get any approach right and any approach wrong. Implementing any strategy badly can lead to disaster, but so can choosing the wrong strategy and implementing it well. 
        
    
    
        The real crunch point of any tool strategy, no matter which parts of the tool set you buy, customize, or build, is integration. Integration means getting all the pieces to work together without breaking. If integration fails, everything fails. 
        
        Integration is every bit as much about getting the markup language design right as it is about getting the tools right. 
        
        The simpler a system is, the easier the integration will be. Simplicity is not just about the number of pieces. It is much more about the simplicity of the relationships and information flows. A system in which all the information flow point in the same direction and in which there are minimal dependencies between pieces will the the easiest to integrate. 