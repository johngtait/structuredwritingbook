SAM:

article: Conformance

    Structured writing is about constraints. Texts that meet appropriate constraints are of higher quality and greater consistency than those that do not. Text that record the constraints they conform to can be reliably processed with algorithms. The key to any structured writing systems, therefore, it the ability to assure conformance with the desired constraints. 
    
    At the most basic level, for any language that is {extensible} and {constrainable}, the conformance algorithm is the job of the schema. The schema is a formal definition of the structural constraints a document must meet. But a schema is not the whole of the story when it comes to conformance. A schema can validate that a document conforms to its desired structure, but it can't validate that the content in those structures is correct, or even that it is the type of content that the schema says it should be. 
    
    In other words, it does not work to design structures without any thought to conformance and then to slap a schema on them afterwards. If you want to ensure conformance, you should be designing for conformance from the beginning. 
    
    For most content, conformance is not about trying to catch evil doers. The authors are on side and trying to produce good content. Authors who understand structured content may seek to impose constraints as an aid to their own work, just as a carpenter, for instance, might design a jig to guide their saw. Constraints are a tool for writers, not a defense against them.
    
    Lack of conformance occurs mostly for four reasons:
    
    * Authors do not understand what is being asked of them.
    
    * Authors cannot figure out how to accomplish their goals within the structure.
    
    * Authors forget to supply required information or to use the desired format.
    
    * Authors are being asked to follow constraints that are not appropriate to the content. 
    
    The real core of compliance in structured writing, therefore, is not enforcement, but creating structures that:
    
    * Are clearly and specifically appropriate to the subject matter and the audience being addressed.
    
    * Clearly communicate to authors what is expected of them in terms they understand.
    
    * Support the author's goals.
    
    * Either remind authors of what is required or factor it out. 
    
    Auditing and enforcement still have a role to play, not because authors are hostile to the system, but because they a human. But auditing and enforcement are secondary to the main aim of conformance-friendly design. And in that spirit, auditing and conformance should be seen as part of a feedback loop that is constantly seeking to improve the design. If you keep finding the same mistakes over and over again, that is not a training problem or a human resources problem, it is a design problem. 

    section: factor out
    section: restrict
    section: guide
    section: validate
    section: audit



    The first principle of conformance should be to design something that is easy to conform to. This means using structures and terms that make intuitive sense to writers in their own domains. One of the most common mistakes is to create structures to solve technical problems and then try to teach them to writers.

   
    The compliance algorithm is about making sure that a piece of structured writing meets its intended constraints. The more robust the compliance algorithm, the more consistent the quality of the content will be (assuming that the constraints imposed are correct) and the more reliable it will be, meaning that you can run other algorithms on it with greater confidence. If you want to do any kind of real-time publishing of content, meaning there is no time to do quality assurance on the output of the algorithm, then reliable content is key, and compliance is how you ensure that content is reliable. 
    
    There are essentially four approaches to compliance:
    
    |Factor out the constraint| If you factor out the constraint, there is no question of compliance.
    
    |Enforce the constraint| You can use structures to enforce constraints. Compliance is not automatic since writers can still misuse the structure. Auditing is required to be sure the constraint is followed.
    
    |Train the constraint| The constraint is not enforced or expressed in the content. Writers are trained to follow the constraint. Auditing is required to be sure the constraint is followed.
    
    |Audit the constraint| There are constraints that cannot be directly enforced when the writer is writing, but which can nevertheless be audited with the assistance of algorithms after the fact. 
    
    The larger your content set becomes, the more frequent and dynamic your outputs, and the more of your processes rely on algorithms, the more pressing the issue of conformance becomes. Poor conformance can also hobble other algorithms. Content reuse, for example, relies on conformance to the constraints for writing content that fits when reused, and on conformance to the constraints on what can be reused where. 
    
    
    This introduces a problem, because as your need for constraints grows, so does your need to express those constraints. This often leads to more complex structures, particularly in the document domain, and to greater intrusions of the management domain. This in turn makes your markup more complex and more abstract, which makes it harder for writers to comply with the structures. It is not uncommon to end up in a situation where you have having to spend a lot of resources on trying to train compliance to the structures designed to enforce compliance. 
    
    One way out of this is to focus more on factoring out constraints rather than enforcing them. This usually means moving more of your content into the {subject domain}. There is a trade-off here too, of course, because the {subject domain} requires you to create custom structures rather than relying on generic document domain structures. 
    
    Early in your move into structured writing, sticking with generic document domain structures may seem like a clear win. Over time, thought, the cost of compliance, and the costs which accumulate when compliance is not achieved, can tip the scale in favor of factoring out the constraints.  



    Structured writing is about producing content that meets constraints. There are many reasons for wanting your content to meet constraints, and many reasons for wanting some of those constraints to be made explicit and machine readable. However, the most basic issue you will face in achieving these ends is ensuring that writers actually meet the constraints you need. 

    And just so we are clear, this includes you as the writer. Writing is hard. It tends to occupy all of your mental energy. Keeping all of the constraints you want to meet in the forefront of your mind while also working out the story you are trying to tell and how to tell it is more than most brains can handle. Structured writing is not just about imposing a discipline on the author from without (though sometimes it is about that); it is about giving the author a tool that make it easier for them to create content that follows the constraints they themselves believe to be appropriate for the work. 

    How do you know if you are meeting constraints -- in any activity? Feedback. With any activity, we need a way to know when we are done and when we have done it correctly. In the [media domain](concept), there is one form of feedback: how the document looks. With a true WYSIWYG display, if it looks right on the screen, it will render correctly on paper, or whatever media you are targeting as you write. That is the writer's signal that they are done, and done correctly. 

    There may, of course, be other constraints that the copy is expected to obey. Those constraints might be expressed in a template or a style guide. They may be enforced by an editor, or by self-editing, or even by style checking algorithms that can process natural language text. But in the media domain, the structure of the content itself is not contributing to this validation. 

    And since none of these other constraints is being recorded in the text, there is no way for an algorithm to do anything with that text except to display it. 