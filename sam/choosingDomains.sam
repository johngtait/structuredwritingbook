sam:

chapter: Choosing the domain to work in

    So, which structured writing domain should you work in? Here is a simple principle. It is easiest to work on each aspect of a publication in its own domain. That is, it is easiest to work on the appearance and behavior of content in the media domain. It is easiest to work on the organization of content in the document domain. It is easiest two work on the subject matter of the content in the subject domain. 

    But easiest does not necessarily mean most efficient nor does it mean most consistent or highest quality. It is easiest to manipulate the appearance and behavior of content when you can manipulate these things directly and see the results immediately. You can do than in the media domain, but not in the document or subject domains. But manipulating the appearance and behavior of each piece of content directly is not particularly efficient. It will often be the case that if you write in the document domain (in Markdown, say) and allow an algorithm to handle formatting and behavior, you may be able to produce more content faster. The results are also likely to be more consistent. Every writer is working within the constraints of Markdown, which does not give you a lot of options about how to structure things, and every writer's work is being formatted by the same algorithm, the results will be more consistent. If the algorithm is a good one, they may also be of higher quality, at least higher quality than the work of the writer who cares least about layout. 

    And from the point of view of the writer's work, it will be easier as well. The writer who is not responsible for formatting has less to think about and can focus more of their attention and energy on writing. 

    Now there are a couple of caveats here. We have a generation of writers who have grown up using WYSIWYG tools. To many of them, the act of writing and the act of designing a page are one an the same. Learning to separate the two can be difficult. Many will reject the idea that they can or should be separated. 

    And in some cases, they will have a point. There are some communications in which the overall design of the page carries part of the meaning of the content or serves to make the meaning clearer and easier to understand. These are niche publications, but they are real and the value of the ad-hoc layout in these publications is sufficient reason to keep creating them in the {media domain}(concept).

    But of course, layout based communication is not portable. It is not something you want to do when layout-independent forms of communication are available and equally effective. Writers who are used to using layout-based communication in trivial or non-essential ways may have a hard time adjusting how they thing and write when asked to work in the {document}(concept "document domain") or {subject domains}(concept "subject domain"), but such shifts can usually be justified by quality gains and cost savings realized from working in those domains.    

    But if working in the document domain is easier for the writer and produces more consistent and usually higher quality results. Why is it more difficult to handle formatting when working in the document domain? Quite simply, because in these cases the formatting is handled by algorithms and someone has to design, code, and maintain those algorithms, and this is not the kind of work writers and publishing people are used to doing or necessarily understand very well.  

    Nor is it possible to just by a document domain structured writing system off the shelf with all th algorithms written for you. You have individual requirements about how you want your content formatted. You need individual algorithms to do that for you. For the Web, CSS makes learning to write those algorithms less painful than it used to be. But for the more complicated processes of formatting for paper, with all of the pagination issues that go with it, the tools are still not exactly easy. 

    But writing the formatting algorithms is only half the problem. Once you learn to write them you quickly discover that in order to get certain formatting effects in a consistent way, and without forcing the writers back into the media domain, you need additional structures in the document domain. While Markdown seemed to work okay at first, you may soon find that it does not provide all the document structures that you need to produce the formatting you need, and you have to start moving to more complex systems like {Restructured Text}(language) or {DocBook}(language).

    And it may also be that you have other reasons for moving to the document domain besides relieving writers of formatting chores. Maybe you also want to constrain the document structures the writer can use to improve usability or consistency. In which case you need to create document domain structures that express or factor out those constraints and corresponding algorithms to {publish}(algorithm) them.   

    These more complicated document domain languages require more training for writers and take up more of their attention, and they require more effort in writing algorithms.   

    Designing document domain languages that are going to be both clear enough in their intent for authors to understand and rich enough in their structure to meet formatting and validation needs is difficult. Most organizations, therefore, turn to existing document domain languages like {DocBook}, {DITA}(language), {ASCIIDoc}(language), or {MarkDown}(language). Even organizations that had developed their own document domain languages have tended to abandon them in favor of a publicly available alternatives.

    This is something of a double edged sword. While it is clearly a major cost savings to avoid developing and maintaining a complex document domain language yourself, publicly available ones are obviously designed to serve a wide variety of needs which means that they are both large and poorly constrained. This makes them harder to learn and use, and harder to validate, meaning that loss of consistency and quality is again possible. At the same time they many not support specific features you would like to have in obvious or easy ways.

    Some of these languages do allow you to extend or constrain the languages, essentially creating your own language as a variant on the public language. This necessarily involves you writing or modifying the corresponding algorithms, but it can still be less work than doing it from scratch, and you may be assisted by a richer set of tools. 
    
    However, there are limits to how far you can take this. Taking a very large very loose public language and modifying, extending, or constraining it down to a small easy to use language that is specifically constrained for your business will likely end up being more difficult and more expensive than designing the small simple task-specific language yourself. 
    
    Simply navigating these complexities, let alone implementing the path you choose, and seem like a good reason to sticking with the media domain and putting up with the duplication of effort and inconsistent outputs that it involves, simply so that you can keep doing the work you understand with tools you understand. The tools and the concepts are just simpler and more direct than those of the document domain.
    
    What we see here is that the complexities of the move to the document domain tend towards the development of large public document domain languages and the tendency of organization to prefer adopting a single document domain language for all of their structured writing work.
    
    >>>(image onedocmanymedia.png)
    
    The one big complicated document domain language creates problems, though. It cause groups within organization, and sometimes whole organizations to choose a much simpler document domain language such as {MarkDown}, essentially giving up on refined layouts in some or all media for the sake of a simpler and cheaper authoring experience. These often end up existing in parallel to the systems based on the richer more complex languages. 
    
    >>>(image minnowsandwhale.png)
    
    
    
    
    This said, even within the document domain, the subject matter can have a significant influence. Even if there are few or no direct subject domain structures being created, different kinds of subject matter often demand different styles of document, either based on the nature of the subject matter, how the documents are use, or longstanding conventions of the field. Document structures created in one field can thus vary greatly from those created in another. For example, {S1000D}(language) and {DITA}(language) are both document domain languages with strong management domain features and a focus on modular reuse. But they are different because {S1000D} was developed in the aerospace and heavy equipment industries whereas {DITA} was developed in the software and services industry. There are no truly neutral document domain languages. If you choose to go with a public document domain language, you should take the time to make sure that it suits your industry.
    
    
    Another reason that companies choose document domain languages is that they want to enable content management features such as {content reuse}(algorithm). We have seen that content reuse can be accomplished using subject domain structures, but going to the {subject domain}(concept) involves close attention to your subject matter and the appropriate structures to capture it. If you aim is simply to introduce content reuse, you are more likely to look at a system like {DITA}(system) that has a complete set of {content reuse}(algorithm) features baked in, and to accept its {document domain}(concept) structures more because they come attached to the {management domain}(concept) features you are interested in rather than because you have determined that the are the best document domain structures for your content.
        


    Problems with working in the media domain
    * Different media have different media domain objects
    * Only rendering algorithms are explicitly supported

    Taking a structured approach to the media domain can greatly increase your flexibility. It your document consists of basic document domain objects attached to named styles, you can swap in a new stylesheet with the same style names and totally change how your document looks. But that is the limit of the changes you can make. 

    #Actually, it is a good question whether working in the document domain gives you any real advance in flexibility or options over working in a structured way in the media domain. The answer is probably that working in the document domain is not more flexible, but it is more verifiable and controllable. Incorrect style use in the media domain is undetectable by algorithms. The document domain can impose restrictions and perform checks to eliminate a lot of the cases in which the incorrect document structure is used. 

    In practice, it doesn't always work out that way, since the editor is still showing content in the media domain as the author writes, and it still provides controls for direct formatting which ignore the stylesheet. 

    Further, applying a style requires the author to pause and decide which style they want to apply. If there are a lot of styles to choose from, this becomes significant mental effort and can interrupt the flow of composition. In many cases it is mentally easier for the author to think in terms of formatting than in terms of styles, which makes the mentally taxing act of writing a little less exhausting. In practice, therefore, many writers continue to apply media domain formatting directly. 



    It should be clear from the discussion of working in the media, document, and subject domains, as well as the incursion of the management domain, that few writing systems exist entirely in one domain. Writing in the media domain, for instance, is made much more efficient by using a few basic document domain structures to hang media domain styles on. In the document domain, we found that purely abstract document structures didn't capture many of the constraints that we might be interested in, necessitating the use of subject-specific document types. We also saw that the intrusion of the management domain was often necessary in generic document domain structures to facilitate management below the file level. Finally, it is often impossible to work entirely in the subject domain without using some basic document structures to contain discursive text. 

    So while your working environment may be centered in the media domain, or in the subject domain, or in the middle in the document domain, it will likely contain a mix of structures from multiple domains, including the management domain. And since working in each domain has its specific advantages and drawbacks, your actual working environment will be something of a compromise between these advantages and drawbacks. 

    Another compromise you will need to deal with is the degree of variability you support in your structures. In a perfect world, your structures would be very strict and your conformance to them would be very high. But this is not always possible when dealing with content. The reason is that content is often created to describe the irregular and the messy parts of our world and our work. 

    If the subject matter that our content deals with was perfectly regular, we could model it entirely in database tables, and we would have no need for content. We use language -- we tell stories -- to communicate about the parts of reality that do not fit neatly into rows and columns. 

    Given that content deals with irregular subject matter, you might well ask what is the point of structured writing at all, particularly the kind of structured writing that uses subject-specific document types and pure subject domain structures, which come pretty close to being database tables themselves. There are two answers to this:

    1. Much of the subject matter we are talking about actually is quite regular. It may not be perfectly regular, but it has very strong and familiar patterns that repeat time after time, such as the recipe pattern. There is some irregularity within most of these patterns -- special cases that occur in a few instances, like a recipe with two procedures and two ingredient lists. There is also considerable variability in how the pattern can be expressed in actual document structures. One can find many variations of the recipe pattern in different publications which would each be a different recipe document type specific to that publication. But despite these variations, the pattern itself is still strong, and is vital to both the completeness of the information and it best expression for the reader. 

    2. Precisely because the subject matter is irregular, it is quite hard for an author to treat each instance in a full and satisfactory way. Every irregularity sticks out with a prominence that can blind the writer to the importance of the common parts. And without a pattern and a type to break the subject matter down into its necessary pieces, it is easy to forget what needs to be said in each case. A specific topic type that captures your desired presentation of that pattern can greatly improve the consistency, completeness, and correctness of your content. 



	section: Pros and cons of the management domain

		The management domain does not exist by itself, because it does not express actual content. It is always an intrusion into other markup domains, most prominently the document domain. 

		* It ties your content to your management system. 

		* It requires your authors to make management decisions while writing. Professional writers may be able to handle this -- and may even balk at a system that does not let them do it -- but other writers may have no interest in them and no clue how to make them correctly.

		* They record only current management decisions about your content. There is no guarantee that either the structures or the data recorded in them will be sufficient for future management purposes.

		* It is hard to constrain their effects. Writers can use them as a substitute for, or as a way to circumvent, other constraints.

		* It distributes management information across the content set. If you record management domain information in your content, and then change how you want things managed, you will potentially have to go to thousands of places in the content and change the management domain content. One of the key things we try to do in structured writing is to avoid having content that may need to be changed at the same time scattered widely across the content set. Ironically, one of the techniques we use to do this can end up scattering management information just a widely. 



		Because many management decisions are based on factors in the real world, there are often subject domain and management domain alternatives for handling situations where decisions have to be made below the file level. The advantage and disadvantages of using each domain are similar to those for choosing between the document domain and the subject domain. 

			* There is an additional step required to publish subject domain content. 
			
			* You have to write an algorithm to implement your invariant rule. This takes the burden of implementing it off the authors, but someone has to write the code.  

			* The author does not have to know anything about the rule for inserting warnings on dangerous procedures. They are simply asked if the procedure is dangerous or not. This is a question about the subject matter that they should be able to answer correctly without knowing anything about the publishing requirement. 

			* If the requirement for documenting dangerous procedures changes, the instruction to insert a partiualr file may no longer be appropriate. If you used the management domain, you may have to edit every file that contains the include instruction. But if you used the subject domain, you just rewrite the algorithm that handles dangerous procedures. The content itself remains untouched. 
			
			* This can be particulary important if there are multiple factors that affect how dangerous procedures should be handled. Suppose that there is a new requirement that you use a different warning for procedures that are performed by robots. If your subject domain markup contains a field `performed-by-robots` then you simply adjust the algorithm to make the right choice in each case. If you have use the management domain approach, you will have to visit every file and make the appropriate determination, and update each include statement appropriately. 
			
			* The subject domain markup is always specific to its subject matter. Whether a procedure is dangerous or performed by robots is specific to procedures, and only organizations who have potentially dangerous procedures that might be performed by robots are likely to include those fields in their markup. By contrast, the management domain include markup is much more general. It can be used to insert a hundred different pieces of a invariant text in a hundred different contexts. This reduces the cost of developing the markup and the algorithms to process it. But it also ties the content to a specific management system, and it means that authors have to know a lot more about how the publishing system works. This reduces you pool of authors and makes authoring more difficult and therefore more expensive. Finally, it means that it is much more expensive to maintain the content if you change publications. 


		


		Given all these difficulties with management domain intrusions, you may wonder why they occur at all. Part of the answer may be that markup language design is complex, and if the designers are not fully aware of the problems that management domain intrusions cause, they may see them as an easy way to solve markup design problems. 

		But a more significant reason is the flexibility that management domain intrusions can provide. By giving authors access to conditional content, for instance, you can avoid creating more complex declarative structures, and thus have a smaller markup language with less processing required. You can also provide ways for authors to work around deficiencies in the current structures, especially when new needs arise. If a company decides that it wants a single markup language to meet all its structured content needs, it is pretty difficult to meet that requirement without adding some management domain intrusions.  

		But note what this is saying: management domain intrusions can often be used to work around constraints of the current model. And if the purpose of structured writing is to impose constraints, there is  a contradiction, or at least a trade off, here. 


		



	section: The use of the subject domain for managing content

		While management domain structures often intrude into the structure of a document, much of the actual management of content is done using metadata from the document and subject domains.

		In many content management systems, content is written and stored in the document domain (with management domain intrusions), but the content management system captures, stores, and uses, a great deal of subject domain metadata. 

		Some of the reasons for capturing content in the subject domain can also be fulfilled by capturing the content in the document domain and managing it with subject domain metadata stored in a content management system. (Think of this like a label on a can of soup. The can is just a can. The only way you know there is soup inside is that the label says so.) Other benefits of capturing content in the subject domain cannot be fulfilled this way. In particular, the use of subject domain structures to factor out document domain constraints cannot be done with subject domain metadata in a CMS.
		
			section: Role of management domain structures in the document domain
			
		In the article on the [subject domain](link "http://techwhirl.com/structured-writing-writing-in-the-subject-domain/") we noted that a key characteristic of the document domain is that a document domain document describes a document as it is meant to be published. There is no option to reorganize, add, or subtract content from the document. This is in contrast to the subject domain where you can pick and choose the pieces you want to publish and the order you want to publish them in. 

		Including management domain structures in a document domain language is essentially a way of getting around this feature/limitation of the document domain. It gives you a way to manipulate the final display of the document by specifying conditions and inclusions in the file itself.
		
		
		
		When you attempt to set up a comprehensive document domain markup language, you quickly run into complex issues about how content will be handled in different situations. One way to handle those issues, and to avoid dipping back into the media domain, is to add management domain structures to the language. 



	section: Management domain as programming language

		I suggested above that management domain markup could be thought of as a kind of simple programming language embedded
		in a text. The best example of this is HTML, particularity HTML5, which included a full embedded programming language: JavaScript. 
		
		JavaScript is used for far more things on the Web than embedding management domain information in the text of a Web page, but that is certainly one of the things it is used for. 
		
		When you are designing or using a language that has embedded management domain structures, it is often helpful to remember that they do actually form a programming language, if not one as complex or powerful as JavaScript. Each management domain element in a document is an instruction, and if you have multiple instructions in a document, you have issues about which ones are performed first and how the different instructions interact with each other. And it is not simply a matter of your architects having to wrestle with these issues, your authors have to understand the consequences of the combinations of management domain structures they use. 
        
        
        
        Four paths to dealing with the complexities of the document domain.
        
        1. Pick a standard document domain language and stick to it.
        
        2. Pick a standard document domain language like DocBook and customize it.
        
        3. Pick a specializable document domain language like DITA and specialize it. 
        
        4. Create a subject domain language to write in and transform it to a document domain language as part of the publishing algorithm. 
        
        All three options generally involve some type of move to the subject domain. Options 2 and 3 involve adding subject domain structures to base document domain languages (though they may also add specialized document domain or management domain structures). 
        
    
        
		

		
		