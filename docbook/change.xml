<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
<db:title>Change management</db:title>

<db:para>Some people talk about future proofing content as a reason for adopting structured writing. This is a misnomer. Structured writing imposes specific structures on content for specific purpose. It does not make content magically immune to change not does it guarantee you will not have to rewrite the content change the structure to accommodate future changes.</db:para>
<db:para>You can, however, design your content structures to help you manage specific and foreseeable changes in your subject matter or business requirement. If you are lucky, the structures you create for this or other purposes may also allow you to adapt content for unforeseen circumstances. But this is a bonus. You cannot guarantee any content or structure will work for things you have not foreseen.</db:para>
<db:para>But changes in content happen all the time. Many of them are entirely predictable and you can use structured writing to support the management of those changes. For instance, companies re-brand from time to time. If the content is in media domain structures, the effort to change to a new appearance could be significant. If the content is in the document domain, however, changing how it is formatted is simply a matter of changing the formatting algorithm to produce different looking output.</db:para>
<db:para>It is worth noting, though, that while changing the formatting algorithm is less work than changing the formatting of a large body of content, it is also more complex work. It requires a skill set that is not as widely available as the skill of changing fonts in a word processor, for instance. It also cannot be done incrementally. Once the entire new algorithm is written, all the content can be converted to the new look almost instantly. But until it is finished, none of the content can be converted. A structured writing system is not the kind of think you can set up once and walk away from. You need to maintain an ongoing capability for making these kinds of changes efficiently and effectively.</db:para>
<db:para>A general move to the document domain (or the subject domain, or even a disciplined use of styles in a word processor) will allow you to handle font and layout changes. But what if the re-branding goes further. Suppose it involves changing the names of products or even the company. Should your structured writing approach explicitly support that change? Some organization like to mandate that writers insert a variable rather than the actual name for the company name and all product names. That way, when the product names or the company names changes all you have to do is redefine the variables.</db:para>
<db:para>I have always been skeptical of the value of this practice. It forces the writers to remember to use the variable every time. This interrupts their chain of thought, which slows their writing down and uses up some of their precious attention, thus impacting content quality. And it is virtually impossible to to ensure compliance. Writers will sometimes simply forget and write the names out normally, which means you always have to search for these instances anyway when a change happens. Then there are issues with historical usage of the names, where you don’t want the change to happen, and with inflections if the new or old names end in ‘s’.</db:para>
<db:para>Fundamentally, company and product names are distinct strings that easy to search for when you need to make a change. The overhead of creating and maintaining the variables is greater than the overhead of doing a search and replace through the content when a change occurs. And doing a search and replace allows you to make intelligent choices about historical usage, inflections, and even changes in line breaks.</db:para>
<db:para>You may well need some markup for company and product names. You may want to format them differently of link from them to more information about the product of company.</db:para>
<db:para>Rather than use a variable like this:</db:para>
<db:programlisting language="sam">
We here at &gt;($company-name) do not recommend using our product to catch roadrunners. 
</db:programlisting>
<db:para>I would rather use an annotation like this:</db:para>
<db:programlisting language="sam">
We here at {Acme Corporation}(company) do not recommend using our product to catch roadrunners.
</db:programlisting>
<db:para>This second approach identifies the words Acme Corporation as a company name. Creating this markup requires no extra thought from the writer. They do not have to remember what the appropriate variable name is. And this same markup can be used to format the company name appropriately and to generate links to information on the company.</db:para>
<db:para>It does not guarantee that the writer will always remember to add the annotation, or that they will always spell the company name correctly. But you can use the <db:code>company</db:code> annotation to find all the phrases marked as company names, sort them, and look for variants. This then allows you to go back and fix incorrect spellings. But it also allows you to identify the ways in which writers are misspelling the company names and search the whole text for them, catching both the misspelling and the failure to annotate. This kind of content hygiene operation should be performed regularly on any content set, and subject domain annotation makes it easier to do than the use of variables while removing a distraction for writers.</db:para>
<db:para>At another level, re-branding can involve the organization deciding to change its tone or voice. It may wish to go from professional and reserved to friendly and jocular. There is not way, of course, for any structured writing process to recast content from formal to funny. You can’t make you content proof against every kind of change.</db:para>
<db:para>One form of change that is so common that it may be overlooked is simply the ongoing creation of new content and the editing of old content.</db:para>
<db:para>For change management algorithms to be effective, you need to be able to rely on them. If you end up feeling that you have to go through and check all the content or all the output by hand, you will have lost much of the efficiency you sought. Change management, therefore, relies heavily on the conformance algorithm. ...</db:para>
</db:chapter>
