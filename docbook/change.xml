<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0">
<db:title>Change management</db:title>

<db:para>Some people talk about future proofing content as a reason for adopting structured writing. This is a misnomer. Structured writing imposes specific structures on content for specific purposes. It does not make content magically immune to change nor does it guarantee you will not have to rewrite the content or change the structure to accommodate future changes in your subject matter or your business requirements.</db:para>
<db:para>You can, however, design your content structures to help you manage specific and foreseeable changes. If you are lucky, the structures you create may also allow you to adapt content for unforeseen circumstances, particularly if your content is stored in the subject domain. But this is a bonus. You cannot guarantee any content or structure will work for things you have not foreseen.</db:para>
<db:para>But changes in content happen all the time. Many of them are entirely predictable and you can use structured writing to support the management of those changes. For instance, companies re-brand from time to time. If the content is in media domain structures, the effort to change to a new appearance could be significant. If the content is in the document domain, however, changing how it is formatted is simply a matter of changing the formatting algorithm to produce different-looking output.</db:para>
<db:para>It is worth noting, though, that while changing the formatting algorithm is less work than changing the formatting of a large body of content, it is also more complex work. It requires a skill set that is not as widely available as the skill of changing fonts in a word processor, for instance. It also cannot be done incrementally. Once the entire new algorithm is written, all the content can be converted to the new look almost instantly. But until it is finished, none of the content can be converted. A structured writing system is not the kind of thing you can set up once and walk away from. You need to maintain an ongoing capability for making these kinds of changes efficiently and effectively.</db:para>
<db:para>A general move to the document domain (or the subject domain, or even a disciplined use of styles in a word processor) will allow you to handle font and layout changes. But what if the re-branding goes further? Suppose it involves changing the names of products or even the company. Should your structured writing approach explicitly support that change? Some organization like to mandate that writers insert a variable rather than the actual name for the company name and all product names. That way, when a product name or the company names changes all you have to do is redefine the variables.</db:para>
<db:para>I have always been skeptical of the value of this practice, however. It forces the writers to remember to use the variable every time. This interrupts their chain of thought, which slows their writing down and uses up some of their precious attention, thus impacting content quality. And it is virtually impossible to to ensure compliance. Writers will sometimes simply forget and write the names out normally, which means you always have to search for these instances anyway when a change happens. Then there are issues with historical usage of the names, where you don’t want the change to happen, and with inflections if the new or old names end in ‘s’ (in English; other languages may have different inflection problems).</db:para>
<db:para>Company and product names are distinct strings that are easy to search for when you need to make a change. The overhead of creating and maintaining the variables is greater than the overhead of doing a search and replace through the content when a change occurs. And doing a search and replace allows you to make intelligent choices about historical usage, inflections, and even changes in line breaks. It your content is held in text form (in a markup language) in a repository (file system or content management system) that allows you to do a search and replace across multiple files, this is probably easier and more reliable than using variables. (And it is what you are going to have to do anyway if there is a name change that you did not anticipate and therefore did not use variables for.)</db:para>
<db:para>You may well need some markup for company and product names, however. You may want to format them differently or link from them to more information about the product or company.</db:para>
<db:para>Rather than use a variable like this:</db:para>
<db:programlisting language="sam">
We here at &gt;($company-name) do not recommend using our product to catch roadrunners. 
</db:programlisting>
<db:para>I would rather use an annotation like this:</db:para>
<db:programlisting language="sam">
We here at {Acme Corporation}(company) do not recommend using our product to catch roadrunners.
</db:programlisting>
<db:para>This second approach identifies the words Acme Corporation as a company name. Creating this markup requires no extra thought from the writer. They do not have to remember what the appropriate variable name is. (They do have to remember <db:code>company</db:code> as an annotation type, but that is a type, not an individual name, and if your markup is well designed your types should be few and memorable.) And this same markup can be used to format the company name appropriately and to generate links to information on the company.</db:para>
<db:para>This does not guarantee that the writer will always remember to add the annotation, or that they will always spell the company name correctly. (There is no way to guarantee that a free-floating annotation will always be remembered. The best you can do is make them easy to do.) But you can use the <db:code>company</db:code> annotation to find all the phrases marked as company names, sort them, and look for variants. This then allows you to go back and fix incorrect spellings. But it also allows you to identify the ways in which writers are misspelling the company names and search the whole text for those misspellings. This improves your success rate catching both misspellings and the failure to annotate. This kind of content hygiene operation should be performed regularly on any content set, and subject domain annotation makes it easier to do while removing a distraction for writers.</db:para>
<db:para>At another level, re-branding can involve the organization deciding to change its tone or voice. It may wish to go from professional and reserved to friendly and jocular. There is no way, of course, for any structured writing process to recast content from formal to funny. You can’t make you content proof against every kind of change.</db:para>
<db:para>One form of change that is so common that it may be overlooked is simply the ongoing creation of new content and the editing of old content. In the age of the Web, this is a particular concern because we can now add a new piece of content whenever it is ready, edit and existing piece whenever it needs it, and delete an old piece whenever it becomes obsolete. We don’t have to wait for a major publication release for all these changes to roll out. Each rolls out when it is ready. And each time one rolls out, it impacts the information architecture or the entire content set.</db:para>
<db:para>Adding, editing, or deleting one topic does not mean that all the other topics are unaffected:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>There may be topics that link to the deleted topic.</db:para>
</db:listitem>
<db:listitem>
<db:para>There may be topics that should link to the newly added topic.</db:para>
</db:listitem>
<db:listitem>
<db:para>There may be topics that should no longer link to a changed topic, and topics that should now start linking to it.</db:para>
</db:listitem>
<db:listitem>
<db:para>Topics in a category may now have a new neighbor or may have lost one.</db:para>
</db:listitem>
<db:listitem>
<db:para>Any top-down navigation tools need to be updated for the topic changes.</db:para>
</db:listitem>
<db:listitem>
<db:para>Deleted topics may leave holes in the information set that need to be filled.</db:para>
</db:listitem>
<db:listitem>
<db:para>New topics or edited topics may introduce subjects that are not adequately covered by existing topics, revealing the need for yet more topics.</db:para>
</db:listitem>
<db:listitem>
<db:para>Deleted or edited topics may leave other topics orphaned, needing to be removed or edited to serve a current purpose.</db:para>
</db:listitem>
<db:listitem>
<db:para>Events in the world can change the status of a whole set of topics, for instance, those relating to the current version of a product suddenly become “previous version” when a new topic is released.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When there is the potential for the effects of adding, editing, or deleting a topic to have ripple effects through the whole content set, and when such additions, deletions, and edits happen on a daily basis, it is vital to have algorithmic support for change management. Managing all the effects by hand is doomed to failure.</db:para>
<db:para>Content management systems often have change management features that can be helpful. For instance, many of them will inform you if a change of deletion of an existing topics will break any existing links. They will also help you find topics on related subjects or manage the membership of categories and the navigation aids that are based on them. What they won’t do is tell you things like which pieces of existing content should be linking to the new content you just added.</db:para>
<db:para>For change management algorithms to be effective, you need to be able to rely on them. If you end up feeling that you have to go through and check all the content or all the output by hand, you will have lost much of the efficiency you sought. Change management, therefore, relies heavily on the conformance algorithm. ...</db:para>
<db:section>
<db:title>Future proofing</db:title>
<db:para>One important motivation for structured writing is what is often called “future proofing”. Future proofing means building a system or product with a view to making it able to survive future changes in environments or requirements. Future proofing is difficult because you cannot know with certainty what changes will occur, how likely they are, or what they will cost.</db:para>
<db:para>Building a future proof platform can increase up-front costs delaying the time it takes to get to market and possible missing a window of opportunity. Nor can you be sure that your investment will every pay off, since the future you prepared for may not be the future you get.</db:para>
<db:para>But not building a future proof platform can result in your not being able to keep up with developments in a market and losing your early lead. It may require massive and expensive changes when future events render your current system obsolete. Instances of both problems abounded when traditional publication systems were confronted with the rapid rise of the Web.</db:para>
<db:para>The safest approach to future proofing is not to try to anticipate the particular way in which the future will develop, but to create features that will be of value no matter what happens in the future. Creating content in the subject domain is the best way to practice this kind of future proofing for content, because writing in the subject domain creates metadata that contains only true statements about the subject matter itself. Those statements are going to remain true as long as the subject matter itself remains unchanged. That is as future proof as you can make your content.</db:para>
<db:para>For example, suppose you write your ingredient list in reStructuredText as a table:</db:para>
<db:programlisting language="reStructuredText">
======  ========
Item    Quantity
======  ========
eggs    12
water   2qt
======  ========
</db:programlisting>
<db:para>Later you decide that you want to present ingredients as a list instead. To do this, you will have to go back to your content and change the markup. Doing this across a whole collection of recipes will be expensive.</db:para>
<db:para>Suppose instead that you use subject domain markup:</db:para>
<db:programlisting language="sam">
ingredients:: ingredient, quantity
    eggs, 12
    water, 2qt
</db:programlisting>
<db:para>Now you don’t have to change the content to make the change in presentation. You just change the presentation algorithm. Thus the subject domain markup has future proofed your content against this change of layout. The document domain reStructuredText markup specified the use of a table, which is not a truth about the subject matter, but a decision about layout that can change independent of the subject matter. The subject domain markup simply specifies that “eggs” is an ingredient and “12” is a quantity. These are truths about the subject matter that will not change. Thus they are invulnerable to future changes outside of the subject matter itself.</db:para>
<db:para>Moving your content from the media domain to the document domain provides a degree of future proofing. By factoring out the formatting details, it protects your content against changes in formatting rules. Moving your content from the document domain to the subject domain provides additional future proofing. By factoring out the content and organization of documents, it allows you to target different publications and to create different document designs for different media.</db:para>
</db:section>
</db:chapter>
