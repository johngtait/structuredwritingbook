<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0" xml:id="chapter.rhetorical_structure">
<db:title>Rhetorical Structure</db:title>


<db:para>Structured writing it an attempt to improve the quality of written work. It’s intended outcome is a piece of writing that works well for its intended purpose. All writing has structure, from the basic grammatical structures that make sentences comprehensible, to the larger rhetorical structures the make information accessible or frame an argument cogently and persuasively.</db:para>
<db:para>While structured writing is not an ontology and does not attempt to express the actual information in a piece of writing, it does aim to support the creation of an effective rhetorical structure. There is, therefore, a relationship between the rhetorical structure of a document and <db:xref linkend="chapter.mechanical-structure"/> created by markup.</db:para>
<db:para>The rhetorical structure of a piece of content is how it tells its story. For many types of stories, the optimal rhetorical structure is quite consistent and often well known. In other cases, the best rhetorical structure can be determined both by a careful consideration of what needs to be said and by experience and testing with readers. Content quality is greatly enhanced when the rhetorical structure is well defined and followed consistently. Also, a well defined rhetorical structured provides an effective baseline against which to compare and measure proposed improvements. Using an explicit predefined rhetorical structure helps enhance and maintain content quality.</db:para>
<db:para>In <db:xref linkend="chapter.subject-domain"/> we looked at how structured writing in the subject domain can capture the rhetorical structure of a recipe in various ways to serve various business purposes. A recipe is a fairly well known type of information. The various parts can be organized and presented in different ways, but most people recognize a recipe when they see one. This makes a recipe an example of what I call a topic pattern. A topic pattern is a loose rhetorical structure. Topic patterns are likely to be common in texts from many different sources. In many cases, readers will recognize content that conforms to a topic pattern more easily.</db:para>
<db:para>Individual organizations, however, may require more specific structures within instances of the topic pattern. As we saw in <db:xref linkend="chapter.subject-domain"/>, a wine magazine may require every recipe to have a wine match. A health-oriented magazine may require every recipe to contain a complete set of nutritional information. Other organization may have specific requirements about how recipes are to be presented, such as requiring ingredients to be presented in a table rather than a list. The specific set of requirements of an organization -- their unique constraints -- constitute a topic type.</db:para>
<db:para>Different organizations may create different recipe topic types to impose constraints on the recipe format that are specific to their business needs. Each of these recipe topic types is an interpretation of the recipe topic pattern.</db:para>
<db:para>In some cases, topic patterns are immediately obvious because they have a visual shape. The various components of a recipe just happen to look physically different on a page (which is why recipes are the most popular structured writing example). There is the picture; the introduction, which is a block; the ingredients, which are a list; and the steps, which are a numbered list. The recipe topic patters is visually distinctive even without looking at a word of the text.</db:para>
<db:para>However, topic patterns are not about elements that are visually distinct. They are about the rhetorical structure of the content. They are about the different types of information that are required, they way they are expressed, and the order they are presented in. There may be considerable variation in the second two properties. Whether we would count these variations as options within one topic pattern or as defining different topic patterns should probably depend on their effect. Any organization and means of expression that has the same rhetorical affect we can reasonable count as variations on a single pattern.</db:para>
<db:para>When you look at a page that appears to be just a sequence of paragraphs with perhaps some subheadings thrown it, it is easy to assume that there is no particular topic pattern present. But this is not necessarily true at all. If a consistent set of information is being presented for a particular purpose, and we can find (or reasonably imagine) that same set of information being assembled for the same purpose to describe another object of the same type, then we have a topic pattern. And where we have a topic pattern, we can define a topic type.</db:para>
<db:para>This is not to say that once you define a topic type, you will be able to take the markup that you define and wrap it around every existing example of the topic pattern without changing a word. (Again, the point of structured writing is to improve content, not to faithfully represent its current state.) Topic types are more precise than topic patterns and existing unstructured topics that follow a topic pattern will almost always have to be edited to fit a topic type.</db:para>
<db:para>What you will find when you start to move content that meets a topic pattern into a defined topic type is that a lot of the content does not fit the topic pattern particularly well. You will find some instances that only partially fit, but which omit information commonly found in the pattern (and perhaps required in the type). You will find that some instance contain information not found in most instance of the pattern, and not supported by the type. You will find information not expressed in the way that the topic type expects.</db:para>
<db:para>These discoveries mean one of four things:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The discernment of topic patterns in incorrect and you are trying to make content with a different pattern fit your topic type. You need to define a new topic types for this new topic pattern.</db:para>
</db:listitem>
<db:listitem>
<db:para>The definition of the topic type is incorrect. You need to modify the topic type to more correctly reflect the topic pattern.</db:para>
</db:listitem>
<db:listitem>
<db:para>The content is a variation of the topic pattern that is deliberately not supported by the topic type. The content needs to be edited to fit.</db:para>
</db:listitem>
<db:listitem>
<db:para>The content is deficient. It needs to be upgraded so that it fulfills it purpose correctly, as defined by the topic type.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Interpreting the mismatch between existing content and the topic type can make or break your entire structured writing project. There is a huge temptation to treat existing text as canonical and try to shape the model to fit it. But as I have stressed several times, the purpose of structured writing it not to represent existing texts, but to make content better. If your current content processes are so good that all your existing content fits your new structures perfectly, then you are not realizing any gain in content quality and you are wasting your time by adding additional mechanical structure. Finding content that does not fit the models is not a sign that the models are broken, but that the process is working.</db:para>
<db:para>This does not mean that the models never need to be changed. But it does mean that you change the models to match the things you discover about the best rhetorical structure for your content to achieve your business goals, not to make your existing content, or even the new content that authors want to write, fit the model.</db:para>
<db:para>This means that applying structure to your existing content is not a trivial or mechanical task. The purpose, after all, is to improve the quality of the existing content, and that is going to mean additional research and writing work to bring the content up to standard.</db:para>
<db:para>(Let’s make this distinction clear: people often convert content from one file format to another, including for binary formats to markup formats. This is a mechanical process, though one that may require some cleanup. It does not, in itself, impose any additional constraints on the content. It merely changes the syntax that expresses existing structures. This kind of conversion is often possible to document domain formats like DITA and DocBook. This does not mean that the resulting DocBook or DITA output will correctly express the full range of constraints or structures that these formats are capable of. You can also do a reliable transformation from one subject domain format to another (say from a relational database to XML markup). But your cannot do a reliable mechanical transformation of media domain content to the document domain or of document domain content to the subject domain. The subject domain imposes constraints that may be expressed rhetorically in the document domain, but are not expressed mechanically. These conversions are writing tasks, not something than can be done mechanically.)</db:para>
<db:section>
<db:title>Irreducible rhetorical models</db:title>
<db:para>In some cases, as we have seen, it is possible to factor out the rhetorical structure of a item and move the content entirely into the subject domain. This is possible with a recipe, for instance (see <db:xref linkend="chapter.subject-domain"/>). In these cases, any reasonable rhetorical design can be created from the subject domain content by the presentation algorithm because the rhetorical design consists of a particular arrangement of facts.</db:para>
<db:para>But not all rhetorical models are reducible to an arrangement of facts. This is clearly true of philosophical essays and even of books like this one. In works of this sort, the rhetorical structure -- the course of the argument -- cannot easily be reduced to a repeatable structure. But there are certainly cases in which rhetorical structures can be highly repeatable and yet do not consist merely of an arrangement of facts.</db:para>
<db:para>One such is a rhetorical pattern useful in technical communication (and perhaps in other fields) which I call the think-plan-do pattern. Many technical communication tasks simply involve telling a user how to perform specific functions on specific pieces of machinery. But there are cases in which the user’s task has highly complex input conditions and potentially far-reaching consequences. In this case, the technical communication task goes well beyond telling the user how to operate the machine. It is about helping the correctly plan their actions to achieve the desired business outcome.</db:para>
<db:para>You can approach this problem by simply collecting all the relevant facts that the user would need to make a correct decision. In this case, a subject domain approach would be sufficient and would help ensure that no relevant pieces of information were missed. But a mere listing of relevant facts is not helpful to a user who does not fully understand the complexity of the task or the seriousness of its potential consequences. For example, a user may well not understand the security implication of a particular configuration option of a computer system. The safety of that option may depend of a variety of factors, such as who has access to the system, what software is running on the system, what data it contains, and how other settings are configured.</db:para>
<db:para>If the user does not appreciate the seriousness or complexity of the issues involved, they may skip all of the additional information and go straight to the beginning of the procedure. If they do, a mere listing of relevant facts may scare them out of trying to change the setting (which may be just as unsafe as changing it, and may have other negative consequences).</db:para>
<db:para>A potential rhetorical approach to addressing this problem is to walk the user through each of the decisions that need to be may in order to plan their changes correctly. This can consist of a number of carefully designed discrete questions designed to help the user figure out which issues apply to their situation and, if they do apply, how to deal with them.</db:para>
<db:para>In other words, the model presents a formal planning methodology in the form of a set of questions which break down the planning of the change into manageable pieces that the user can successfully comprehend and act on.</db:para>
<db:para>Depending on the material, it may be possible to find a common patterns in the subject matter of these questions. (The exact same set of questions need to be considered for each configuration setting, for example.) But in may cases, the questions that need to be asked are particular to the individual case. It is the rhetorical device of breaking the planning process into a set of discrete questions that is most important to improving the quality of the content and ensuring that the reader is successful.</db:para>
<db:para>Most document domain models used in structured writing are used simply to separate content from formatting or to facilitate content reuse. A focus on quality often takes us into the subject domain. But this example shows that the document domain can also be used to enforce or encourage rhetorical structures that can be highly beneficial to readers. While these structures are not in the subject domain themselves, they are often highly specific to the subject matter. It is certain particular subjects, and certain particular audiences that create the need for these kinds of rhetorical structure. In many cases, such structures will occur within a larger subject-domain structure that establishes the appropriateness of the rhetorical tool that is used.</db:para>
</db:section>
<db:section>
<db:title>Rhetorical metamodels</db:title>
<db:para>There are different ways of thinking about the rhetorical structure of content. Above, I describe the topic pattern of a recipe as consisting of a picture, an introduction, ingredients, and a list of preparation steps.</db:para>
<db:para>However, we could notice that there are a great many other type of information with a similar pattern. For instance, a knitting pattern  usually has a picture of the garment, an introduction describing the project, a list of the yarns and needles required, and a list of steps for knitting and assembling the pieces. Lots of other things look similar. Instructions for assembling flat pack furniture, for example, or planting flowers in your garden.</db:para>
<db:para>These are not the same topic pattern. You would not confuse a recipe with a knitting pattern. And each of them can have specific information fields that would make no sense for the others. A pot roast will never have washing instructions. A flat pack bookcase will never have a wine match. Nonetheless, they all have the basic pattern of picture, description, list of stuff you need, steps to complete. We might call this the make-thing-out-of-stuff pattern.</db:para>
<db:para>The make-thing-out-of-stuff pattern is what we might call a meta-pattern. It is not based on seeing similarities between texts, but on seeing similarities in the patterns of texts. The meta pattern is not intended for creating content directly, but it can potentially provide hints that help us develop individual topic patterns.</db:para>
<db:para>Not only are there meta-patterns for topics, like the make-thing-out-of-stuff meta pattern, there are also meta patterns for the different types of information that go into a meta pattern, such as the picture, description, list of stuff you need, and steps to complete. These are sometimes called “information types” (a confusing term, since text at any scale expresses information, and therefore the structure of information at any scale is an information type).</db:para>
<db:para>Two notable examples of these information type meta patterns are found in Information Mapping and DITA. Information Mapping proposes that document are composed of just six information types: procedure, process, principle, concept, structure, fact.<db:footnote><db:para>http://www.informationmapping.com/fspro2013-tutorial/infotypes/infotype1.html</db:para></db:footnote> Documents are then constructed of some arrangement of information blocks of one of these six types, which it calls a map.</db:para>
<db:para>In other words, Information Mapping proposes that every topic pattern is always composed of some combination of these six information types.</db:para>
<db:para>DITA proposes something similar, but it proposes just three types: concept, task, and reference,<db:footnote>
<db:para>Or, at least, it originally proposed these three types. The DITA specification now includes other topic types, some of which are much more concrete than these original three.</db:para>
</db:footnote> which, confusingly, it calls topic types. Like information mapping, DITA assembles documents out of these topic (information) types using a map.</db:para>

<db:para>In the concept/task/reference metamodel, our recipe topic pattern would consist of one concept topic (the introduction), one reference topic (the list of ingredients), and one task topic (the preparation steps). And our make-thing-out-of-stuff meta-pattern would similarly consist of one concept topic (description), one reference topic (list of stuff you need), and one task topic (steps to complete). (DITA’s information model does not include pictures. It just provides a mechanism for including them in textual topic types.)</db:para>
<db:para>What neither DITA nor Information Mapping provide is any way to model the larger recipe pattern. DITA will let you write a map to combine a concept topic containing an introduction (which presumably is where you would include the picture), a reference topic containing a list of ingredients, and a task topic containing preparation instructions. But it does not give you a way to specify that a recipe topic consists of one concept topic, one reference topic, and one task topic. In other words, DITA does not provide any way to define larger types or the overall rhetorical structure of documents.</db:para>
<db:para>What DITA does do is provide a way to specify a concrete instance type of any of its meta-types. The list of ingredients in a recipe is an instance of the meta-pattern list of stuff your need in the make-thing-out-of-stuff meta-pattern. But a list of ingredients has a specific structure that is not the same as the list of pieces in a flat-pack furniture box, for instance. It consists of an ingredient name, a quantity, and a unit of measure. The unit of measure is vital in an ingredient listing because not all ingredients are quantified in the same way. You don’t measure eggs the same way you measure flour, for instance.</db:para>
<db:para>To express this constraint, DITA will let you specialize the reference topic type to create a list-of-ingredients topic type that imposes (and records) this constraint. You could then construct a recipe using a introduction-to-recipe topic (a specialization of concept), a list-of-ingredients topic (a specialization of reference), and a preparation steps topic (a specialization of task). However, it still would not give you a way to specify that a recipe consists of these three topic types in this order.</db:para>
<db:para>Actually, it is possible to define a recipe topic types in DITA, but this involves having a different idea about how atomic the basic DITA topic types are. Some DITA practitioners might say that a recipe is not a map made up of three information types, but a single task topic. In this view, a task topic is much more than what Information Mapping would call a procedure. It allows for the introduction of a task, a list of requirements, and the procedure steps all within the definition of a single topic. (I have asked a number of DITA practitioners how a recipe should be modeled in DITA and have received both answers from multiple people.)</db:para>
<db:para>One of the reasons for this uncertainty about what an atomic topic is in DITA is DITA’s focus on content reuse. DITA topics are not only units of information typing, they are units of reuse. The approach in which a recipe is a single topic leaves you with fewer larger units of content, which makes individual topics harder to reuse. The atomic unit of  content that is small enough to maximize potential reuse is much smaller than the atomic unit of  content that contains a complete topic pattern. The atomic unit of reuse is smaller than the atomic unit of use.</db:para>
<db:para>Because DITA has not mechanism for describing model larger than a topic, a DITA practitioner is left with a choice between modeling for maximum reuse and modeling to constrain a topic type to topic pattern. In practice, it seems that different DITA users make different decisions about how atomic their topic types should be, based on their business needs.</db:para>
<db:section>
<db:title>Meta models vs generic models</db:title>
<db:para>Ideally, a meta model should just be a model of models. You should not be about to use it for anything other than to create concrete models. In practice, a meta model tends to be a list of those things that all instances of the model have in common. In many cases, instead of inventing an entirely new notation for describing meta models, people just create a model with only the common properties. Thus the expression of the meta model takes the form of a generic model, which means that it is perfectly possible to write content using that generic model. Thus while DITA’s concept, task, and reference topic types are intended as meta models to be specialized into concrete models, they are implemented as generic models which can be used directly.</db:para>
<db:para>A great many DITA users don’t specialize at all. They write all of their content in the base task, reference, and concept topics types (or the even more basic “topic” topic type, of which task, reference, and concept are actually specializations).</db:para>
<db:para>Are metamodels useful for defining topic patterns? If a concrete topic pattern describes the kinds of information that are needed to help a particular audience perform a particular task, do we arrive at that pattern more easily by derivation from a meta model or from observation of multiple concrete examples.</db:para>
<db:para>The obvious problem with the current generation of content meta models is that none of them alert us that a recipe might need a field for a wine match. It is not impossible to imagine that a metamodel could do this. A metamodel could observe that objects are commonly used with other objects and lead us to ask what other objects is a steak dinner used with. There are obviously multiple aspects of this question. A steak dinner is used with a knife and fork. A steak dinner is used with a table and chair. A steak dinner is used with family and friends. A steak dinner is used with a glass of wine. How do we characterize each of these thing-used-with-thing relationships in a metamodel, and how do we decide which of these types of thing-used-with thing types is relevant to a recipe?</db:para>
<db:para>Perhaps, for instance, we might decide that because a recipe describes a foodstuff, thing-used-with-thing relationships are relevant when the other thing is also a foodstuff. In other words, we might decide that a thing-used-with-like-thing relationship is part of the metamodel.<db:footnote>
<db:para>Rob Hanna’s Enterprise Content Metamodel[https://www.oasis-open.org/committees/download.php/41040/Enterprise%20Content%20Metamodel.pptx] does attempt to do something like this for business information, attempting to describe the relationships between pieces of business content based on the business functions they serve as a basis for deriving specific information types.</db:para>
<!--  Needs a better citation. -->
</db:footnote> (I am not, by the way, suggesting that this is a useful part of a metamodel, I merely wanted to illustrate the problem of defining a metamodel that would comprehend all the specific models we might care about in the real world.]</db:para>

<db:para>This is getting complicated enough for me to conclude that, while the {ontologists)(concept “ontology”) may one day come up with a such a model and a reliable way to derive concrete content models from it, for most writers, information architects, and content strategist, building a concrete topic model from the observation of instances is probably the preferable method.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>Making the rhetorical model explicit</db:title>
<db:para>I noted above that there can be a rhetorical model in a piece of text that is just a sequence of paragraphs. You can discern the topic pattern in those paragraph and model that pattern in a topic type, and still present the output as a sequence of paragraphs. Presumably, in each instance of the topic type, those paragraphs would now be more consistently expressed with fewer errors and omissions than before, but the presentation itself would be the same.</db:para>
<db:para>Alternatively, you may choose to make the structure of the rhetorical model more explicit to the reader as well as to the writer. In this case, the sequence of paragraphs might be replaced with a distinct combination of headings, graphics, tables, lists, pictures, and text sections that would repeat in every topic of that type.</db:para>
<db:para>The question, of course, is whether making the rhetorical type explicit in this way improves the content or not. In its favor, the more explicit rhetorical type makes it easier for the reader to recognize the type. (As we noted above, you can recognize a recipe by its shape, without reading a word.) This makes it easier to identify relevant content, which is particularly important on the Web. It can also make it easier to scan the content to pick out the parts you need. (This is a property that the Information Mapping company tends to focus on in their promotional material.) The argument against this treatment is that it can lead to a noisier page that is harder to read straight through.</db:para>
<db:para>Whether you want to make the rhetorical structure of your pages explicit in these ways, therefore, is a matter to be decided on a case-by-case basis. But don’t fall into the trap of supposing the because you have chosen a plain presentation, that means there is no rhetorical structure, and therefore no topic pattern. The rhetorical structure of the content is a separate thing from the presentation of the content, and the aim of structured is to improve the rhetorical structure, not just to make the presentation more uniform.</db:para>
</db:section>
<db:section>
<db:title>Structure and randomness</db:title>
<db:para>However much success we may have in defining common rhetorical structures, most content does not surrender to the analytical knife entirely. There is usually an element of randomness in every piece of content: material that does not fit the model perfectly but is vital to an individual instance, relationships that do not fit the pattern of relationships in the type but are crucial to the individual instance.</db:para>
<db:para>These arise because the world that the content describes has irregularities. If the world were perfectly regular, we would not need content. All of it features and relationships of a perfectly regular world could be described in database tables. We turn to written descriptions in human languages because the features and relationships we want to describe are, in greater or fewer aspects, unique, unusual, or irregular. The orderliness that we create when we create a topic type for a particular subject is in part a reflection of the orderliness of the human designed things, and partly an imposition of structured on the world by humans in an effort to make it easier to understand, communicate, or reason about. Creating that order is essential to effective understanding and reasons, but dealing with, and adequately expressing the significant irrecularities that remain after that order and structure is imposed, is also vital to effective understanding and reasoning.</db:para>
<db:para>Discerning when you are dealing with randomness within the scope of the model and when you are trying to stuff things into the model that do not belong is much more art than science. But it is important to make good decisions when these cases arrive.</db:para>
<!-- more -->
</db:section>
</db:chapter>
