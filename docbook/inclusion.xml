<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0">
<db:title>The Inclusion Algorithm</db:title>

<db:para>Inclusion is the ability to pull content or resources from one location or source into another. Online content relies heavily on inclusion. If you see a picture on a web page, it almost certainly got there by inclusion. If you see one in a book, it is similarly almost certain that in got there by inclusion at some point in the publishing process.</db:para>
<db:para>We have already looked at inclusion in the content of the reuse algorithm, since most content reuse is done by inclusion. However, there are other aspects of inclusion that are worth looking at. In many ways, inclusion is very similar to the linking algorithm. Both connect one resource to another. In the case of the linking algorithm, the connection is used to move the reader from one resource to another. In the case inclusion algorithm, to pull content from one resource into another.</db:para>
<db:section>
<db:title>Progressive disclosure</db:title>
<db:para>Progressive disclosure is a technique in which a piece of information is initial hidden on a page but can be revealed, usually by clicking on a link. Progressive disclosure is related to linking in that the reader voluntarily accesses additional content. The difference is whether the content is loaded as a new document or is inserted into the current document. While the specific mechanism of progressive disclosure are a media domain issue, the progressive disclosure itself a document domain issue. It consists of a part of the document structure that can be displayed or hidden at the reader’s choice. That structure also has a default state: visible or hidden.</db:para>
<db:para>I mentioned in the chapter on <db:xref linkend="chapter.separating"/> that for online media there is also the question of separating content from behavior. Progressive disclosure is an example of content behavior.</db:para>
<db:para>In the media domain, the behavior of progressive disclosure usually takes the form of a piece of code that turns on or off the visibility of a piece of content when the user clicks something.</db:para>
<db:para>In the document domain, we factor out the code and simply indicate that the content is optional, including whether it should default to shown of hidden. This could be done with structure for hideable content:</db:para>
<db:programlisting language="XML">
&lt;hideable initial="hidden"&gt;
    &lt;section&gt;
</db:programlisting>
<db:para>or with an annotation on an existing structure:</db:para>
<db:programlisting language="XML">
&lt;section hidden="yes"&gt;
</db:programlisting>
<db:para>In the subject domain, we factor out the question of hideability altogether. The subject domain markup simply divides the content into sections based on their subject matter or the contributions they make to the description of the subject. The presentation algorithm then translates certain portions of the content into hideable sections in the document domain. Progressive disclosure becomes a design decision at the document domain level that is entirely divorced from the content. Thus it can be changed at any time without any need to change the content.</db:para>
<db:para>We should note that linking is also a form of progressive disclosure. It displays new information to the reader at the click of a button. The difference between the two is one of design. They are implemented differently at the media domain and document domain levels, but in the subject domain this design decision has been entirely factored out.</db:para>
</db:section>
<db:section>
<db:title>Continuous scroll</db:title>
<db:para>A similar technique is continuous scroll in which when you reach the bottom of the page, more content is loaded automatically. This is a form of progressive disclosure, in the sense that the full content is not visible at once, but it does not involve the reader’s choice whether to view the content or not, it just loads automatically as the reader reaches the end of the page.</db:para>
<db:para>Unless it is being implemented purely as a bandwidth optimization measure (in which case it is orthogonal to the document structure), continuous scroll usually applies to some kind of feed: a stream of similar objects: photos in an album, tweets in a tweet stream, news stories. Each of the objects in this feed has its own internal structure which works just the same whether the object is being displayed individually or as part of a stream. There is thus no special media domain or document domain structures required in the object itself to allow it to be part of a continuous scroll.</db:para>
<db:para>However, there may be subject domain considerations. A continuous scroll is essentially a matter of progressively loading object from a data store according to some property or properties that they have in common. In other words, according to their metadata. Writing in the subject domain internalizes a lot of metadata that describes the subject of a piece of content, so it is often just the metadata that is used to select content objects to include in a continuous scroll.</db:para>
<db:para>This probably does not necessarily require you to think about continuous scroll applications specifically. If your content is richly structured in the subject domain, it will contain the metadata you need. But if you are debating whether particular facets of the content are worth pulling out into specific subject domain structures, the ability to power continuous scroll may be a consideration. (The broader consideration being that being explicit in this not only improves consistency and completeness, it also enables publishing choices that may not have occurred to you yet.)</db:para>
</db:section>
<db:section>
<db:title>Transclusion</db:title>
<db:para>The word transclusion was coined by Ted Nelson for including content from one document into another in a hypertext environment. I have always found the distinction between transclusion and simple inclusion a little hard to pin down. We don’t tend to call it transclusion, for instance, when we include a graphic in a web page. But why would transclusion only apply to text?</db:para>
<db:para>I take the implication of transclusion to be this: that it refers to including existing published material dynamically from one place to another. That it, it is not something that you do as part of your publishing chain to pull various resources together, but something that your published work does dynamically after it is published. It is not about how you pull your bits together, but how you borrow other people’s already published bits.</db:para>
<db:para>This is not a technical distinction, then, but one of intent and ownership.</db:para>
<db:para>As published, your HTML page pulls the picture in with an include instruction that is only executed by the client’s browser. But as we noted in the chapter on the <db:xref linkend="chapter.publishing"/>, in Web publishing, part of the publishing algorithm (the encoding and rendering algorithms) is delegated to the browser. So the inclusion of our picture in our document is part of our own publishing process which we have delegated to the user’s browser. We still control all the published artifacts and consider them part of our publication (even is we consider some of them part of other people’s publications).</db:para>
<db:para>Transclusion seems to me to refer to something else: to pulling in material from other people’s publications: material over which we have no direct control. In a hypertext environment we link to such material all the time, but that requires us to follow the links, which pulls a new document into our view port, rather than allowing us to read through as if in a single document. Transclusion seem to mean creating a single document by dynamically pulling in material from other published works.</db:para>
<db:para>To be sure, some people in the structured writing world use transclusion to mean inclusion within their own publishing system. DITA users sometimes refer to DITA’s reuse mechanisms as transclusion. Some Wiki program support inclusion from one published Wiki page to another and call it transclusion. Since Wikis are, by design, open collaboration platforms, this sense of transclusion is perhaps closer to the one I am using. It also illustrates how fluid the boundaries of published works and their ownership become in a hypertext environment, and how fluid the very concept of “published” becomes.</db:para>
<db:para>In any case, the subject of transclusion of work you do no control deserves to be considered separately from the inclusion of work you do control. Ad hoc transclusion of text has never really caught on on the Web, and the transclusion of pictures, though more common, is often frowned upon, in part because it is considered theft of bandwidth, and is suspect from a copyright point of view.</db:para>
<db:para>The main difficulty with transclusion, so defined, is that since you have no control over the material you are transcluding, you have no guarantee that it will remain available, or that it will remain the same. Perhaps the idea of transclusion was based on an older idea of publishing, that once a thing was published it was settled. But the Web very swiftly disproved that model. It showed that permanence in publishing was an artifact of paper, not something inherent to the act. By nature we prefer to exercise the power to retract, redact, and revise what we have published. Indeed, on the Web, a page that ceases to be edited and maintained is often a page that had died.</db:para>
<db:para>In short, transcluding material that comes with no promise that it will remain available or constant is not attractive. The same problem exists with links, of course. The thing you link to can vanish or change. We call it <annotation type="link" specifically="https://en.wikipedia.org/wiki/Link_rot">link rot</annotation>. But link rot does not make the page containing the link unreadable. Transclusion rot would.</db:para>
</db:section>
<db:section>
<db:title>Web services</db:title>
<db:para>Still, we do use material from other sites when we create web pages. In fact, we do it all the time. The mechanism we use is, broadly, called “web services”. What is the difference between transclusion and a web service? Simply a web service come with a promise. It is a promise that when called in a particular way it will deliver a particular type of content. It cannot promise to do so forever, of course, but it can at least promise to be consistent as long as it exists.</db:para>
<db:para>The promises a web service makes are, in fact, constraints. It promises that the material provided when you call a particular URL in a particular way will meet a particular set of constraints. And generally, it also promises that that material will be structured so that you can tell which constraints each piece of it meets. In other words, web services deliver structured writing. And structured writing, conversely, is content that comes with a set of promises. Constraints, in the end, are promises: promises you must make when writing; promises you must keep when delivering.</db:para>
<db:para>Transclusion, then, is perilous with unstructured content, but with structured content, providing it promises to meet the appropriate constraints, it becomes possible. (This is the same point we made about content reuse as well. To reuse content that makes no promises about itself is risky. You should only reuse content that promises to meet an appropriate set of constraints.)</db:para>
<db:para>Whether we call it transclusion or web services, then, what this means is that the real work of making it possible lies not with the person doing the borrowing but with the person doing the lending. From the point of view of the person doing the borrowing, it is all really just a case of inclusion, and uses all the same methods as inclusion of your own material. In both cases you are including something you can rely on because of the constraints it meets. The only difference is the address you are loading it from.</db:para>
<db:para>Making martial available to be borrowed in this way, on the other hand, is more work. You have to establish a source that makes an appropriate set of promises about what constraints content will meet and how it will be delivered. The mechanics of web services are beyond the scope of this book, but the thing that web services deliver is exactly what this book is about: structured writing.</db:para>
<db:para>And depending on what type of service you want to provide, you can provide content structured in any of the domains: media, document, or subject domain. Clearly, providing content in the subject domain will give your users the greatest range of possible uses, though it will also impose on them the responsibility of translating to the other domains for publishing. (You could also provide content that includes management domain structures, though this will narrow the range of people who can use it to those using a compatible management system.)</db:para>
</db:section>
</db:chapter>
