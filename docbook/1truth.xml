<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0">
<db:title>Single source of truth</db:title>


<db:para>The third form of single sourcing is the single source of truth. This means that when a piece of information is needed anywhere in your organization, there is one and only one place where that information is stored and from which it should be accessed.</db:para>
<db:para>This is, of course, a case of content reuse, but whereas the content reuse algorithm deals with how reuse happens, the single source of truth algorithm is concerned with ensuring that only one copy of a given truth is created and maintained. The content reuse algorithm can work without any such assurance, and frequently does. The writer finds some content to reuse and reuses it, without asking if it represents the one and only source of the truth it expresses.</db:para>
<db:para>The task of finding some content that meets your needs and can be reused is very different from that ask of assuring that there is only one piece of content in existence that can meet a specific need. Finding content to reuse is a task for the writer of the content doing the reusing. Ensuring that there is only one source for that content is a task for the writer of the content being reused. They have to make sure when they create and store some piece of content that there really is no other piece of content serving the same purpose in then entire body of content.</db:para>
<db:para>The problem with the single source of truth algorithm is, as Pontius Pilate asked, “What is truth?”<db:footnote><db:para>John 18:38</db:para></db:footnote></db:para>
<db:para>For some types of content, this is an easy question to answer. What is the customer’s birthday? A person can only have one birthday, so there is no difficulty creating a clear policy that says that a customer’s birthday may only be recorded once across the organization and should be accessed from that single source whenever it is needed. (Stating the policy is straightforward; implementing and enforcing it may be more difficult, since it means every system or document that wants to include the customer’s birthday has to be capable of retrieving it dynamically from the central data story.)</db:para>
<db:para>For other types of information, however, the question becomes much more complex. There are two fundamental problems.</db:para>
<db:orderedlist>
<db:listitem>
<db:para>Content, by its nature, deals with those subject that do not fit neatly into rows and columns, and thus cannot be formally normalized according to database rules. Where databases describe relationships formally by use of records and keys, content describes relationships informally in prose. In particular, content deals with complex, unique, and potentially ambiguous relationships that could not be reduced to rows and tables at any reasonable cost. The same fact may be mentioned in many different pieces of content for many different purposes. It may be elaborated on in one place, explained briefly in another, and merely mentioned in a third. What is the single source of this fact? Can it be effectively factored out and stored separately when it is described (legitimately) in different levels of detail in different documents?</db:para>
</db:listitem>
<db:listitem>
<db:para>Content is always designed for a particular audience, both to serve a particular need and to suit a particular background and level of knowledge. Everything we know about effective content tells us that we need to address different audiences and different tasks differently. Taking a piece of content designed for one audience and using it for all other audiences, or attempting to write generic content that takes no account of any audience’s needs or tasks is certain to produce content that is significantly less effective. What then is the single source of truth for this information?</db:para>
</db:listitem>
</db:orderedlist>
<db:para>It comes down to this: there is a difference between a truth and an expression of a truth. You can have one source of a truth, but you often require different expressions of that truth for different purposes and different people.</db:para>
<db:para>In the database world, you can store the customer’s birthday in a single field of a single database, but you will produce may different expressions of this truth for use by different functions in your organization and for presentation to this or other customers in different forms.</db:para>
<db:para>The way we achieve the storage of a single source of a truth is by abstracting it out of all of the expressions of that truth. Abstracting variants from invariants is, of course, what structured writing is about. But content is, per se, not a truth but an expression of a truth (or of several truths and their relationships).</db:para>
<db:para>A simple case of the single source of truth algorithm is the replacement of certain pieces of text by variables. In technical communication, it is a frequent practice to replace things like company names and product names by variables:</db:para>
<db:programlisting language="sam">
Thank you for buying &gt;($company-name)'s &gt;($product-name). 
We hope you enjoy it for many years to come.
</db:programlisting>
<db:para>There are a couple of reasons for doing this. One is that company names and product names often have a precise formal variant that the marketing department wants everyone to use, and the informal variant that people actually use. There is constraint here: use the formal name for company and product not the common name. But because authors are more used to using the common name (like everyone else) they are likely to slip it in without thinking. And if they do remember that they are supposed to use the formal name, they may not remember it correctly and so use the wrong form. Using the variable instead ensures that the correct version of the name is used at all times.</db:para>
<db:para>The second reason is that products and companies are sometimes re-branded. The names change. If the names are written into the source in a hundred places, you will need to find those hundred instances and change them all. If a variable is used, you just need to change the definition of the variable and you don’t have to touch the source content at all.</db:para>
<db:para>This is clearly a very tactical approach to creating a single source of truth. We have a single source of truth for the name of the company and the name of the product. We don’t have a single source of truth for every name. We don’t for example, have a variable for the name of every ingredient in a recipe:</db:para>
<db:programlisting language="sam">
ingredients:: ingredient, quantity, measure
    &gt;($carrots), &gt;($5), &gt;($lb)
</db:programlisting>
<db:para>We don’t do this because there is no abstraction here. Carrots are carrots, 5 is 5, and pounds are pounds. Whereas, the company name is not company name, but “Acme Corporation”.</db:para>
<db:para>When we talk about single source of truth in regard to content, therefore, we are not (or should not be) talking about designating a single piece of content as the sole truth on a particular subject. We are (or should be) talking about abstracting out key information from various pieces of content to store separately.</db:para>
<db:section>
<db:title>Single vs Findable</db:title>
<db:para>In many cases, the desire to create a single source of truth is to manage change in a content set. Since facts may be scattered across a content set in all kinds of content designed for all kinds of purposes for all kinds of audiences, it can be time consuming and expensive to find and change all of these instances when the subject matter changes. The biggest challenge, perhaps, is making sure that you have found all the instances in which the fact is mentioned, which can be particularly challenging when information is scattered across multiple formats and systems. We will look at managing change in more depth in <db:xref linkend="chapter.change"/>.</db:para>
<db:para>Factoring out that information into a single source of truth should, in theory, make the whole update process much easier. Lots of organization use variables to insert product names into documents, for instance, so that they can just update the value of the variable when the product name changes. However, there are a number of problems with this approach:</db:para>
<db:variablelist>
<db:varlistentry>
<db:term>Historical usage</db:term>
<db:listitem><db:para>Sometimes there is historical usage in a document: a reference to past products or services that remain true after the contemporary changes are made. Not ever instance of a product name, for instance, should change when the current product name changes. But it is often hard to make the distinction between historical and contemporary use at the time the variable is inserted into the content.</db:para></db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Validation</db:term>
<db:listitem><db:para>It is hard to make sure that the variable is always used by writers. There is generally no way to structurally remind or constrain the author to use the variable instead of the name. Automated checking systems can sometimes catch instances, but they can be confused by historical usage or by other facts that happen to be expressed with the same words. (Think of a company like Henry’s Camera, for instance, who cannot guarantee that every use of “Henry’s” is a reference to the company name.)</db:para></db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Anticipating change</db:term>
<db:listitem><db:para>Finally, there is the problem of which facts to factor out and which not to. Factoring out every fact would be prohibitively expensive and make authoring virtually impossible. You can only afford to factor out those facts are are likely to change. But none of us has a crystal ball, and some of the biggest changes we have to deal with often come from places we did not expect.</db:para></db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para>For all these reasons, factoring out facts into a single source of truth is a limited proposition. It can be highly useful if we apply it in the right way to the right facts, but it can be cumbersome and error prone is we try to take it too far. Thus we are certainly going to end up with all sorts of duplication of facts and names in our content. And from time to time those facts are going to change and we are going to have to find all the instances and make the appropriate changes.</db:para>
<db:para>If we structure our content in a way that makes that search easier, we can potentially save ourselves a large about of time and money. Making expressions of a truth more findable has many of the benefits of creating a single source of truth and can be less extensive, easier to implement, and more resilient in the face of unanticipated changes.</db:para>
<db:para>This is all about the ability to recognize information in context, and the ability to recognize non-canonical references to facts (a person or thing referred to by a nick name, for instance, like calling John Wayne “The Duke” or IMB “Big Blue”). Having your content in the subject domain make this much easier. Second best is having your content in the document or media domains but stored in a content management system with a cataloging scheme based in the subject domain.</db:para>
<!-- Two basic problems: the same truth referred to using different terms, and different truths referred to using the same term. In the latter case, context can tell us much. -->
<!-- Need for strict typing. If only source, got to make sure it does the whole job correctly. -->
<!-- Can use differential single sourcing to produce variants. -->
</db:section>
</db:chapter>
