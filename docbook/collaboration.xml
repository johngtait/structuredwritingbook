<?xml version="1.0"?>
<db:chapter xmlns:db="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:strings="http://exslt.org/strings" version="5.0" xml:id="chapter.collaboration">
<db:title>Collaboration</db:title>
<db:para>Many organization produce large information sets that cannot be produced and maintained by a single person. Thus collaboration is required in producing and maintaining all that content. Collaboration is a difficult and complicated process, and the more people you have trying to collaborate, the more complex it becomes. How does each collaborator know what others are doing? How do they know which parts of the wider work they are responsible for? How do they integrate their work with the work of others? How do you manage the overhead created when collaborators have to be aware of other people’s work as well as their own? As always, any complexity that is not handled in the organization gets dumped on the customer in the form of quality and findability problems.</db:para>
<db:para>The fundamental constrain on collaboration is the amount of time that collaborators have to spend on collaborative activities -- orienting themselves to the work of others -- as opposed to creating new work of their own. Unless you do something to ease this burden you quickly reach the point where adding more collaborators actually slows the project down because every new person you add to the project increases the collaboration overhead for everyone already working on the project, which means they have less time left for new work. At a certain point, therefore, the next person added takes more new-work time away from every other contributor than the new-work time they add to the project.</db:para>
<db:para>The essence of managing collaboration, therefore, is to minimize the amount of collaborative overhead in the system. But unless you do this in a way that allows all of the necessary coordination of work to get done, the unmanaged complexity gets dumped on the customer. Before the Web, companies handled the overhead of collaboration largely by assigning different books, pamphlets, and other publications to different writers and issuing them with some basic style guidance for language and physical appearance and layout. All the other aspects of collaborative complexity, like making sure that everyone way saying the same thing at the same time in the same way, or that people were not creating the same content over and over again, or that at least one person was saying everything that needed to be said, were ignored and the results were dumped on the customer in the form of inconsistent information that was incomplete, incorrect, contradictory, and hard to find.</db:para>
<db:para>With the advent of the Web, all the same content, produced by the same non-collaborative approach to collaboration, got dumped onto the company website. It wasn’t necessarily any better or worse than it was before, but because it was now all searchable in one place, the quality problems became much more obvious. Early attempts to allow employees to post content to the Web, however, arguably made things worse, since they combine a technically difficult process with a complete lack of support for collaboration on coverage, consistency, or style. Out of this mess, the discipline of content strategy was born.</db:para>
<db:para>As always, we can address these problem by moving the complexity around to make sure that each part of the burden is placed on a person or process best able to handle it. Structured writing can help by enabling your to more effectively redistribute the complexity while reducing the amount that slips through the cracks.</db:para>
<db:para>DITA, as a language, moves a lot of the complexity of content management, and therefore of collaboration, into the source file in the form of management domain structures. If the writer is working directly in DITA, therefore, that complexity is transferred to the writer. In a collaborative situation, this means that that part of the burden is being transferred onto the collaborators, which means that it takes more time, discipline, skill, and knowledge to be an effective collaborator. Not all DITA-based systems do this, however. Some systems -- off the shelf or customized -- may put an interface over DITA that makes it simpler for collaborators to contribute. This means they are transferring the complexity from the writer to the interface, and therefore the person who designs the interface. However, it the interface does not capture the full sophistication of the DITA language underneath, resulting in certain functions not being supported, it is actually distributing complexity to the reader again.</db:para>
<db:para>Don’t think that all authors in a collaborative system have to be treated the same way. Some of your contributors may be full time professional writers while others are engineers or marketers, field personnel or support people for whom communication is an important, but not central, part of their jobs. It makes perfect sense in these situations to design a collaborative system that distributes authoring complexity from your occasional contributors to your full time writers. People can handle far more complexity in their core task than then can in any of their peripheral tasks.</db:para>
<db:para>This kind of approach can be very fruitful, but it is not well supported by most off the shelf tools which essentially present the same interface to everyone. A structured writing approach in which different contributors use different structured writing languages, each best suited to their contributions, can be very effective. Of course, any use of structured writing distributes some degree of complexity towards the writer, since they are not obliged to know and follow the structure. On the other hand, this can also distribute a lot of complexity away from the writer. While the blank page may seem like the simplest possible interface, it actually give no task guidance at all. It is an interface without any affordances. It leaves it to every author not only to write, but do design the information they are creating, to decide what needs to be said and how to say it. Structured writing can provide this design information to the writer, thereby distributing the design complexity to the information architect who designs the structured writing language. What is vital here, though, is that the structured writing language not distribute any other complexity to the writer. Any language that requires them to master publishing or content management concepts, for instance, is not going to work well for this purpose. What works is a simple subject-domain language the addresses the reader in terms they already understand and ask for annotation using concepts and ideas that the writer already knows.</db:para>
<db:para>One of the more common reasons for introducing content management and/or structured writing to an organization is to improve collaboration. It is certainly not the only way to facilitate collaboration. In fact, the more common approach is to create dead simple and largely unstructured tools such as message boards and wikis. One of the most widely collaborative projects in the world -- Wikipedia -- runs on a wiki using a fairly simple document domain markup language which is often hidden behind a simple WYSIWYG editor.</db:para>
<db:para>Why then might one turn to a more complex structured writing system for collaboration. In a word: integration. The kind of collaboration that is supported by message boards and wikis is one in which collaboration chiefly means everybody being able to see what everyone else is doing. Any connections between the pieces created by different people are loose and non-critical, mostly taking the form of hypertext links. And such connections are there are are manged by large scale community efforts. Wikipedia is full of links beteen articles largely because anyone can go in an edit an article to add a link to an article on a related subject.</db:para>
<db:para>But not all collaboration can rely on such loose and uncoordinated activity. In many cases you need to bring the pieces created by collaborators together to form an integrated and cohesive whole. You can do that by hand, of course, but that can be cumbersome and time consuming. It may be hard for any one coordinator to keep up with all the content that is being created, especially if new content is continually being written, without any freeze period to allow the integration to take place.</db:para>
<db:para>Equally important, the collaborators on a message board or a lager wiki like Wikipedia are largely ignorant of each other and each others activity. Duplication of effort and even outright contradiction may be frequent. If you have huge amounts of volunteers constantly reading the site and finding duplication and contradiction, as Wikipedia does, you can live with this (though there will always be parts of the system that are in error at any give time). But an organization that is paying its writers and editors may not be able to afford this slow and effort-intensive approach. It may need a way to coordinate the activity of its collaborators to avoid duplication and error.</db:para>
<db:section>
<db:title>Bridging silos</db:title>
<db:para>There is a lot of talk in content management circles about breaking down content silos. The naive way to do this it to have everyone use a single system and a single markup language. But as we have seen, this means either adopting a simple document domain language that everyone can learn, like Markdown, which does not have enough structures to meet everyone’s needs, or adopting a large complex document domain language like DITA or DocBook that meets a lot of needs but has poor functional lucidity, especially for part-time contributors.</db:para>
<db:para>The most pernicious myth about collaboration is that it requires everyone to use the same tools and to understand each other’s work. In fact, this is the worst way to collaborate, because it create a huge amount of overhead which can swamp the ability to actually get anything done. Efficient collaboration is actually achieve by limiting the amount that collaborators have to know about each others work and each others tools. This allows each group or individual to work efficiently while still creating a product that can be integrated successfully with the work of other.</db:para>
<db:para>This approach to collaboration is seen through the worlds of engineering and computer programming. The secret ingredient that allows workers to collaborate with minimal knowledge of each other’s work is the interface.</db:para>
</db:section>
<db:section>
<db:title>Expanding your pool of authors</db:title>
<db:para>It is often desirable to bring other authors into the fold. However, as soon as you get outside your pool of professional authors, the ability to teach them to do complex publishing or content management tasks is greatly reduced.</db:para>
<db:para>Groups who want to involve software developers in the authoring of documentation, for instance, often turn to simple document domain markup languages such as MarkDown of WikiMarkup (using a Wiki as a collaboration platform).</db:para>
<db:para>Functional lucidity is the key to expanding your pool of authors.</db:para>
</db:section>
</db:chapter>
